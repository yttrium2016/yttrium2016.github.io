<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac开发环境配置</title>
      <link href="/34755/"/>
      <url>/34755/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac开发环境配置"><a href="#Mac开发环境配置" class="headerlink" title="Mac开发环境配置"></a>Mac开发环境配置</h1><pre><code>机缘巧合 获得了人生中第一台MacBook Pro 2020款 16G 256G i5  研究了几天 准备把自己的开发工作从Windows全面转移到MacOS上了，周末还把自己的台式换成了黑苹果系统 几乎完美使用，惯例到了 装软件的时候，留个记录写个博客方便自己以后重新配置。</code></pre><p>列出Windows常用软件</p><ul><li>Git</li><li>Java</li><li>Maven</li><li>HBuilderX</li><li>IntelliJ IDEA</li><li>Navicat Premium 15</li><li>Notepad++</li><li>PicGo</li><li>Snipaste截图工具</li><li>Typora</li><li>Visual Studio Code</li><li>WinSCP</li><li>XMind</li><li>Xshell</li><li>docker</li><li>node</li></ul><p>还有些绿色的软件 先不管 一个个安装</p><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>地址 <a href="https://brew.sh/" target="_blank" rel="noopener">https://brew.sh/</a></p><p>环境变量安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开终端</span><br><span class="line">执行</span><br><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>自动安装完成</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>地址：<a href="https://git-scm.com/download/mac" target="_blank" rel="noopener">https://git-scm.com/download/mac</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Download for macOS</span><br><span class="line">There are several options for installing Git on macOS. Note that any non-source distributions are provided by third parties, and may not be up to date with the latest source release.</span><br><span class="line">Homebrew</span><br><span class="line">Install homebrew if you don&apos;t already have it, then:</span><br><span class="line">$ brew install git</span><br><span class="line"></span><br><span class="line">Xcode</span><br><span class="line">Apple ships a binary package of Git with Xcode.</span><br><span class="line"></span><br><span class="line">Binary installer</span><br><span class="line">Tim Harper provides an installer for Git. The latest version is 2.31.0, which was released 26 days ago, on 2021-03-16.</span><br><span class="line"></span><br><span class="line">Building from Source</span><br><span class="line">If you prefer to build from source, you can find tarballs on kernel.org. The latest version is 2.31.1.</span><br><span class="line"></span><br><span class="line">Installing git-gui</span><br><span class="line">If you would like to install git-gui and gitk, git&apos;s commit GUI and interactive history browser, you can do so using homebrew</span><br><span class="line">$ brew install git-gui</span><br></pre></td></tr></table></figure><p>官方说可以使用Homebrew安装</p><p>先安装brew</p><p>然后执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install git</span><br><span class="line">安装Git</span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>地址 <a href="https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html</a> 下载安装</p><p>环境变量配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在终端输入</span><br><span class="line">第一次的话 先执行以下</span><br><span class="line">touch .bash_profile</span><br><span class="line">以后的使用open命令打开</span><br><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 我的设置 包含maven</span><br><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span><br><span class="line">MAVEN_HOME=/Users/yangzhenyu/Development/apache-maven-3.8.1</span><br><span class="line">PATH=$MAVEN_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export CLASSPATH</span><br><span class="line">export MAVEN_HOME</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><blockquote><p>如果终端显示 zsh: command not found: java  open ~/.zshrc 输入 source ~/.bash_profile 保存 再执行 of source ~/.zshrc</p></blockquote><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>地址 <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p>下载 <a href="https://downloads.apache.org/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz" target="_blank" rel="noopener">apache-maven-3.8.1-bin.tar.gz</a></p><p>解压到自己的目录</p><p>环境变量配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在终端输入</span><br><span class="line">第一次的话 先执行以下</span><br><span class="line">touch .bash_profile</span><br><span class="line">以后的使用open命令打开</span><br><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 我的设置 包含maven</span><br><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span><br><span class="line">MAVEN_HOME=/Users/yangzhenyu/Development/apache-maven-3.8.1</span><br><span class="line">PATH=$MAVEN_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export CLASSPATH</span><br><span class="line">export MAVEN_HOME</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><p>文件根目录下conf文件夹下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置本地仓库地址</span><br><span class="line">&lt;localRepository&gt;/Users/yangzhenyu/Development/localRepository&lt;/localRepository&gt;</span><br><span class="line">配置默认从阿里云仓库拿</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">  &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h2 id="HBuilderX"><a href="#HBuilderX" class="headerlink" title="HBuilderX"></a>HBuilderX</h2><p>地址 <a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">https://www.dcloud.io/hbuilderx.html</a></p><p>下载安装</p><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><p>地址 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/</a></p><p>下载安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认配置路径</span><br><span class="line">/Users/yangzhenyu/Library/Application Support/JetBrains/IntelliJIdea2021.1</span><br><span class="line">可以替换自己的建议多机器一套配置文件</span><br></pre></td></tr></table></figure><h2 id="Navicat-Premium-15"><a href="#Navicat-Premium-15" class="headerlink" title="Navicat Premium 15"></a>Navicat Premium 15</h2><p>地址 <a href="https://www.macfz.com/a/Navicat-Premium.html" target="_blank" rel="noopener">快乐版</a></p><p>下载安装 不过是英文的 页面上下汉化包</p><h2 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h2><p>mac下好像米有替换BBedit或者Sublime Text</p><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><p>地址 <a href="https://www.macfz.com/a/sublime-text-3-for-mac.html" target="_blank" rel="noopener">快乐版</a></p><p>下载安装</p><p>汉化流程</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开Sublime Text,使用快捷键Shift+Ctrl+P</span><br><span class="line">输入install搜索</span><br><span class="line">选择Package Control: Install Package</span><br><span class="line">在新的页面搜索chinese</span><br><span class="line">选择ChineseLocalizations 等待安装完成</span><br></pre></td></tr></table></figure><h3 id="BBedit"><a href="#BBedit" class="headerlink" title="BBedit"></a>BBedit</h3><p>地址 <a href="https://www.macfz.com/a/bbedit-for-mac-13.html" target="_blank" rel="noopener">开心版</a></p><p>下载安装</p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>地址 <a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">https://molunerfinn.com/PicGo/</a></p><p>下载安装</p><h2 id="Snipaste截图工具"><a href="#Snipaste截图工具" class="headerlink" title="Snipaste截图工具"></a>Snipaste截图工具</h2><p>地址 <a href="https://www.macfz.com/a/Snipaste.html" target="_blank" rel="noopener">开心版</a></p><p>下载安装 11.2.3安装使用卡住报错 放弃了</p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>地址 <a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></p><p>下载安装</p><p>图片配置默认 配合PicGo</p><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><p>地址 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p><p>下载安装</p><blockquote><p>下载速度慢 把下载链接的 az764295.vo.msecnd.net 换成 vscode.cdn.azure.cn</p></blockquote><h2 id="WinSCP（ForkLift）"><a href="#WinSCP（ForkLift）" class="headerlink" title="WinSCP（ForkLift）"></a>WinSCP（ForkLift）</h2><p>Mac 没有 使用替换软件ForkLift</p><p>地址： App Store搜索下载</p><h2 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a>XMind</h2><p>地址 <a href="https://www.macfz.com/a/XMind.html" target="_blank" rel="noopener">开心版</a></p><p>下载安装</p><h2 id="Xshell（electerm）"><a href="#Xshell（electerm）" class="headerlink" title="Xshell（electerm）"></a>Xshell（electerm）</h2><p>Mac没有Xshell软件 用electerm替代</p><p>地址 <a href="https://github.com/electerm/electerm" target="_blank" rel="noopener">https://github.com/electerm/electerm</a></p><p>下载安装</p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>macOS 我们可以使用 Homebrew 来安装 Docker。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install --cask --appdir=/Applications docker</span><br></pre></td></tr></table></figure><p>直接安装完成</p><h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><p>macOS 我们可以使用 Homebrew 来安装 NodeJS。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>直接安装完成</p><p>或者 下载安装</p><p>地址 <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境变量 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode记录</title>
      <link href="/22690/"/>
      <url>/22690/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode记录"><a href="#LeetCode记录" class="headerlink" title="LeetCode记录"></a>LeetCode记录</h1><p>地址:<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">https://leetcode-cn.com/</a> 记录下刷题记录和思路吧</p><h3 id="73-矩阵置零-2021年3月21日"><a href="#73-矩阵置零-2021年3月21日" class="headerlink" title="73. 矩阵置零 2021年3月21日"></a><a href="https://leetcode-cn.com/problems/set-matrix-zeroes/" target="_blank" rel="noopener">73. 矩阵置零</a> 2021年3月21日</h3><p>难度中等460收藏分享切换为英文接收动态反馈</p><p>给定一个 <code>*m* x *n*</code> 的矩阵，如果一个元素为 <strong>0</strong> ，则将其所在行和列的所有元素都设为 <strong>0</strong> 。请使用 <strong><a href="http://baike.baidu.com/item/原地算法" target="_blank" rel="noopener">原地</a></strong> 算法<strong>。</strong></p><p><strong>进阶：</strong></p><ul><li>一个直观的解决方案是使用  <code>O(*m**n*)</code> 的额外空间，但这并不是一个好的解决方案。</li><li>一个简单的改进方案是使用 <code>O(*m* + *n*)</code> 的额外空间，但这仍然不是最好的解决方案。</li><li>你能想出一个仅使用常量空间的解决方案吗？</li></ul><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]</span><br><span class="line">输出：[[1,0,1],[0,0,0],[1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span><br><span class="line">输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[0].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>-231 &lt;= matrix[i][j] &lt;= 231 - 1</code></li></ul><blockquote><p>2021年3月21日 每日一题 完成</p></blockquote><h4 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZeroes</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">            <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">int</span>[] lArr = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">            <span class="keyword">int</span>[] hArr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                        lArr[i] = <span class="number">1</span>;</span><br><span class="line">                        hArr[j] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (lArr[i] == <span class="number">1</span> || hArr[j] == <span class="number">1</span>)&#123;</span><br><span class="line">                        matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        先第一遍遍历 用横竖2个数组记录下 对应序号是否为0,第二遍遍历,把对应行号或者列号上的数字清0 来解决问题.</p><h3 id="3-无重复字符的最长子串-2021年3月21日"><a href="#3-无重复字符的最长子串-2021年3月21日" class="headerlink" title="3. 无重复字符的最长子串 2021年3月21日"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a> 2021年3月21日</h3><p>难度中等5176收藏分享切换为英文接收动态反馈</p><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s = &quot;&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><blockquote><p>2021年3月21日 完成</p></blockquote><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; temp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (temp.containsKey(c)) &#123;</span><br><span class="line">                <span class="comment">//找到重复的了</span></span><br><span class="line">                start = Math.max(start, temp.get(c) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            temp.put(c, i);</span><br><span class="line">            max = Math.max(max, i - start + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        移动窗户的想法,先记录下每个元素的坐标,如果有重复,就把左边的start向右移动,然后遍历的右坐标继续增加,同时记录下最长的不重复的值,关键的点是左边的start是要取历史以来最大值.</p><h3 id="191-位1的个数-2021年3月22日"><a href="#191-位1的个数-2021年3月22日" class="headerlink" title="191. 位1的个数 2021年3月22日"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/" target="_blank" rel="noopener">191. 位1的个数</a> 2021年3月22日</h3><p>难度简单329收藏分享切换为英文接收动态反馈</p><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为<a href="https://baike.baidu.com/item/汉明重量" target="_blank" rel="noopener">汉明重量</a>）。</p><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/二进制补码/5295284" target="_blank" rel="noopener">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：00000000000000000000000000001011</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &apos;1&apos;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：00000000000000000000000010000000</span><br><span class="line">输出：1</span><br><span class="line">解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &apos;1&apos;。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：11111111111111111111111111111101</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &apos;1&apos;。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</li></ul><blockquote><p>2021年3月22日 每日一题 完成</p></blockquote><h4 id="Java代码-1"><a href="#Java代码-1" class="headerlink" title="Java代码"></a>Java代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((n &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        通过位操作,并向右移位来判断,个数自加.</p><h3 id="341-扁平化嵌套列表迭代器-2021年3月23日"><a href="#341-扁平化嵌套列表迭代器-2021年3月23日" class="headerlink" title="341. 扁平化嵌套列表迭代器 2021年3月23日"></a><a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator/" target="_blank" rel="noopener">341. 扁平化嵌套列表迭代器</a> 2021年3月23日</h3><p>难度中等270收藏分享切换为英文接收动态反馈</p><p>给你一个嵌套的整型列表。请你设计一个迭代器，使其能够遍历这个整型列表中的所有整数。</p><p>列表中的每一项或者为一个整数，或者是另一个列表。其中列表的元素也可能是整数或是其他列表。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [[1,1],2,[1,1]]</span><br><span class="line">输出: [1,1,2,1,1]</span><br><span class="line">解释: 通过重复调用 next 直到 hasNext 返回 false，next 返回的元素的顺序应该是: [1,1,2,1,1]。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,[4,[6]]]</span><br><span class="line">输出: [1,4,6]</span><br><span class="line">解释: 通过重复调用 next 直到 hasNext 返回 false，next 返回的元素的顺序应该是: [1,4,6]。</span><br></pre></td></tr></table></figure><blockquote><p>2021年3月23日 每日一题完成</p></blockquote><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the interface that allows for creating nested lists.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * public interface NestedInteger &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"><span class="comment"> *     public boolean isInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"><span class="comment"> *     // Return null if this NestedInteger holds a nested list</span></span><br><span class="line"><span class="comment"> *     public Integer getInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"><span class="comment"> *     // Return null if this NestedInteger holds a single integer</span></span><br><span class="line"><span class="comment"> *     public List&lt;NestedInteger&gt; getList();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    ListIterator&lt;Integer&gt; listIterator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NestedIterator</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        add(nestedList);</span><br><span class="line">        listIterator = list.listIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (NestedInteger item : nestedList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.isInteger()) &#123;</span><br><span class="line">                list.add(item.getInteger());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                add(item.getList());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listIterator.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listIterator.hasNext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NestedIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NestedIterator i = new NestedIterator(nestedList);</span></span><br><span class="line"><span class="comment"> * while (i.hasNext()) v[f()] = i.next();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        主要是变量添加,查看是否是数组,如果是的话 递归操作,直到不是数组位置,层层递归拿到所有元素,再直接使用元素遍历.</p><h3 id="7-整数反转-2021年3月23日"><a href="#7-整数反转-2021年3月23日" class="headerlink" title="7. 整数反转 2021年3月23日"></a><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">7. 整数反转</a> 2021年3月23日</h3><p>难度简单2627收藏分享切换为英文接收动态反馈</p><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−231, 231 − 1]</code> ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x = -123</span><br><span class="line">输出：-321</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x = 120</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：x = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><blockquote><p>2021年3月23日 完成</p></blockquote><h4 id="Java-2"><a href="#Java-2" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = -x;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">            result = result * <span class="number">10</span> + (x % <span class="number">10</span>);</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result &gt;= Integer.MAX_VALUE || result &lt;= Integer.MIN_VALUE) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag ? (<span class="keyword">int</span>) -result : (<span class="keyword">int</span>) result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        先记录下数字的正负,根据%10的操作取出每个位同时 新的数字去*10加上,要注意边界的问题,将反转后的数字返回.</p><h3 id="456-132模式-2021年3月24日"><a href="#456-132模式-2021年3月24日" class="headerlink" title="456. 132模式 2021年3月24日"></a><a href="https://leetcode-cn.com/problems/132-pattern/" target="_blank" rel="noopener">456. 132模式</a> 2021年3月24日</h3><p>难度中等406收藏分享切换为英文接收动态反馈</p><p>给你一个整数数组 <code>nums</code> ，数组中共有 <code>n</code> 个整数。<strong>132 模式的子序列</strong> 由三个整数 <code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> 组成，并同时满足：<code>i &lt; j &lt; k</code> 和 <code>nums[i] &lt; nums[k] &lt; nums[j]</code> 。</p><p>如果 <code>nums</code> 中存在 <strong>132 模式的子序列</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>进阶：</strong>很容易想到时间复杂度为 <code>O(n^2)</code> 的解决方案，你可以设计一个时间复杂度为 <code>O(n logn)</code> 或 <code>O(n)</code> 的解决方案吗？</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：false</span><br><span class="line">解释：序列中不存在 132 模式的子序列。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,1,4,2]</span><br><span class="line">输出：true</span><br><span class="line">解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums = [-1,3,2,0]</span><br><span class="line">输出：true</span><br><span class="line">解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li></ul><h4 id="Java-循环方式"><a href="#Java-循环方式" class="headerlink" title="Java 循环方式"></a>Java 循环方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find132pattern</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        Integer temp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = nums.length - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[i]) &#123;</span><br><span class="line">                <span class="comment">//存在第一个</span></span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    temp = nums[j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums[j] &gt; temp) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = Math.min(temp, nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        循环每一个数i,再从最后开始向i查找,找到2个比num[i]大的数字 切第二个找到的数字比第一个找到的数字大就说明对.就是数i,j,k 先找i然后找k然后最后找到j成立.</p><h4 id="Java-栈的实现"><a href="#Java-栈的实现" class="headerlink" title="Java 栈的实现"></a>Java 栈的实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find132pattern</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1,3,2</span></span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (max &gt; nums[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt; nums[i])&#123;</span><br><span class="line">            max = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stack.push(nums[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        时间复杂度更低,从尾节点找起,一个栈 数字只能递减 这样的话 记录下最大的出栈的数字 因为出栈 最大的数字肯定为除栈底的那个数第二大的数字,然后继续循环 直到找到一个数比出栈的第二大的数字小的数就说明成立.关键点max = stack.pop(); 因为数字是主键递减的 所有最后出栈的数字肯定是最大的 所以 不需要加 max = Math.max(stack.pop(),max);利用了栈的结构 巧妙的取第二大的数字 一次遍历完成.今天的算法题思路还是挺好的,学习到了.</p><h3 id="82-删除排序链表中的重复元素-II-2021年3月25日"><a href="#82-删除排序链表中的重复元素-II-2021年3月25日" class="headerlink" title="82. 删除排序链表中的重复元素 II 2021年3月25日"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/" target="_blank" rel="noopener">82. 删除排序链表中的重复元素 II</a> 2021年3月25日</h3><p>难度中等526收藏分享切换为英文接收动态反馈</p><p>存在一个按升序排列的链表，给你这个链表的头节点 <code>head</code> ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 <strong>没有重复出现</strong> 的数字。</p><p>返回同样按升序排列的结果链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,3,4,4,5]</span><br><span class="line">输出：[1,2,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head = [1,1,1,2,3]</span><br><span class="line">输出：[2,3]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[0, 300]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>题目数据保证链表已经按升序排列</li></ul><h4 id="Java-3"><a href="#Java-3" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    ListNode result = <span class="keyword">null</span>;</span><br><span class="line">    ListNode temp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = head.val;</span><br><span class="line">        head = head.next;</span><br><span class="line">        <span class="keyword">if</span> (v != head.val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    result = <span class="keyword">new</span> ListNode(v);</span><br><span class="line">                    temp = result;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp.next = <span class="keyword">new</span> ListNode(v);</span><br><span class="line">                    temp = temp.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    result = <span class="keyword">new</span> ListNode(head.val);</span><br><span class="line">                    temp = result;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp.next = <span class="keyword">new</span> ListNode(head.val);</span><br><span class="line">                    temp = temp.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        循环变量,找到每个节点,查询和下一个节点比较如果不一致,修改辨识符,就是连续遍历过程中连续遍历不一样2次的保存到新的节点上,第一次多了几次判断去首节点为空判断.哆嗦了很多.看了别人的解题思路,学习了链表的通用解法.</p><h4 id="Java-优化"><a href="#Java-优化" class="headerlink" title="Java 优化"></a>Java 优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode result = <span class="keyword">new</span> ListNode();</span><br><span class="line">    ListNode temp = result;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span> || head.val != head.next.val) &#123;</span><br><span class="line">            temp.next = <span class="keyword">new</span> ListNode(head.val);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head.next != <span class="keyword">null</span> &amp;&amp; head.val == head.next.val) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        新建一个空节点,后续去返回这个节点之后的数据 判断当前值和后一节点值一直的情况下去向后移动坐标,以做到过滤的作用.</p><blockquote><p>注意 整体要考虑最后一个节点的问题 还有节点个数小于等于1的情况</p></blockquote><h3 id="83-删除排序链表中的重复元素-2021年3月26日"><a href="#83-删除排序链表中的重复元素-2021年3月26日" class="headerlink" title="83. 删除排序链表中的重复元素 2021年3月26日"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83. 删除排序链表中的重复元素</a> 2021年3月26日</h3><p>难度简单515收藏分享切换为英文接收动态反馈</p><p>存在一个按升序排列的链表，给你这个链表的头节点 <code>head</code> ，请你删除所有重复的元素，使每个元素 <strong>只出现一次</strong> 。</p><p>返回同样按升序排列的结果链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/list1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head = [1,1,2]</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head = [1,1,2,3,3]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围 <code>[0, 300]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li>题目数据保证链表已经按升序排列</li></ul><h4 id="Java-4"><a href="#Java-4" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode result = <span class="keyword">new</span> ListNode(-<span class="number">101</span>);</span><br><span class="line">    ListNode temp = result;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.val != head.val) &#123;</span><br><span class="line">            temp.next = <span class="keyword">new</span> ListNode(head.val);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        根据昨天做的删除元素2,遍历整个链表 判断只有值不一样的情况下再去新建节点 最后返回首节点的next 要注意为空和只有一个元素的特殊情况.</p><h3 id="剑指-Offer-24-反转链表-2021年3月26日"><a href="#剑指-Offer-24-反转链表-2021年3月26日" class="headerlink" title="剑指 Offer 24. 反转链表 2021年3月26日"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/" target="_blank" rel="noopener">剑指 Offer 24. 反转链表</a> 2021年3月26日</h3><p>难度简单198收藏分享切换为英文接收动态反馈</p><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &lt;= 节点个数 &lt;= 5000</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：本题与主站 206 题相同：<a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/</a></p><h4 id="Java解法1"><a href="#Java解法1" class="headerlink" title="Java解法1"></a>Java解法1</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 反转单向链表</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>)&#123;</span><br><span class="line">        stack.add(head.val);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ListNode result = <span class="keyword">new</span> ListNode();</span><br><span class="line">    ListNode temp = result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">        temp.next = <span class="keyword">new</span> ListNode(stack.pop());</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        利用栈结构,先进后出,先遍历出所有的节点,再正向生成反转后的列表,相当于遍历2次返回列表.</p><h4 id="Java解法2"><a href="#Java解法2" class="headerlink" title="Java解法2"></a>Java解法2</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    ListNode result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//temp = new ListNode(head.val,temp);</span></span><br><span class="line">        result = addParent(head.val,result);</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addParent</span><span class="params">(<span class="keyword">int</span> val,ListNode node)</span></span>&#123;</span><br><span class="line">    ListNode t = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">    t.next = node;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        链表1-&gt;2-&gt;3-&gt;4-&gt;null 要转换为4-&gt;3-&gt;2-&gt;1-&gt;null 但是遍历是正向遍历的,就是链表是反向生成的从最开始的1-&gt;null开始生成.用新建的节点变为上个节点的next 做到一次循环完成链表的反转.</p><h4 id="Java递归"><a href="#Java递归" class="headerlink" title="Java递归"></a>Java递归</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode newHead = reverseList(head.next);</span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h4><p><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/solution/fan-zhuan-lian-biao-by-leetcode-solution-jvs5/</a></p><p>关键点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head.next.next = head;</span><br></pre></td></tr></table></figure><p>目前反转的k位置节点为head 他下一个k+1节点 head.next 应该指向k所以上面那句话的意思就是这个</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">head.next = null;</span><br></pre></td></tr></table></figure><p>同时暂时将下个节点赋值为null 否则会产生环 最终  null是头节点的下一个节点</p><h3 id="61-旋转链表-2021年3月28日"><a href="#61-旋转链表-2021年3月28日" class="headerlink" title="61. 旋转链表 2021年3月28日"></a><a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">61. 旋转链表</a> 2021年3月28日</h3><blockquote><p>昨天的每日一题 昨天想好了思路 今天写了出来 周末出去玩了2天 没时间写这个.</p></blockquote><p>难度中等530收藏分享切换为英文接收动态反馈</p><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], k = 2</span><br><span class="line">输出：[4,5,1,2,3]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg" alt="img"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：head = [0,1,2], k = 4</span><br><span class="line">输出：[2,0,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 500]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>0 &lt;= k &lt;= 2 * 109</code></li></ul><h4 id="Java-5"><a href="#Java-5" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode first = head;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    head.next = first;</span><br><span class="line">    count++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = (count - k % count)-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode result = first.next;</span><br><span class="line">    first.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        这个K次 其实是判断链表在哪个关节处切开 分成2份重新合并的意思,我理解的是这样的,所以先记录下首节点,然后进行一次遍历 算出个数 同时将链表首尾相连变成一个环,然后取模运算找到要被切开的点,最小循环切开返回.</p><h3 id="1006-笨阶乘-2021年4月1日"><a href="#1006-笨阶乘-2021年4月1日" class="headerlink" title="1006. 笨阶乘 2021年4月1日"></a><a href="https://leetcode-cn.com/problems/clumsy-factorial/" target="_blank" rel="noopener">1006. 笨阶乘</a> 2021年4月1日</h3><p>难度中等119收藏分享切换为英文接收动态反馈</p><p>通常，正整数 <code>n</code> 的阶乘是所有小于或等于 <code>n</code> 的正整数的乘积。例如，<code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>。</p><p>相反，我们设计了一个笨阶乘 <code>clumsy</code>：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。</p><p>例如，<code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。</p><p>另外，我们使用的除法是地板除法（<em>floor division</em>），所以 <code>10 * 9 / 8</code> 等于 <code>11</code>。这保证结果是一个整数。</p><p>实现上面定义的笨函数：给定一个整数 <code>N</code>，它返回 <code>N</code> 的笨阶乘。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：4</span><br><span class="line">输出：7</span><br><span class="line">解释：7 = 4 * 3 / 2 + 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：10</span><br><span class="line">输出：12</span><br><span class="line">解释：12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>1 &lt;= N &lt;= 10000</code></li><li><code>-2^31 &lt;= answer &lt;= 2^31 - 1</code> （答案保证符合 32 位整数。）</li></ol><blockquote><p>停了好多天了 希望今天开始继续搞起来了</p></blockquote><h4 id="Java-6"><a href="#Java-6" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">clumsy</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(N);</span><br><span class="line">    N--;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</span><br><span class="line">            stack.push(stack.pop()*N);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">            stack.push(stack.pop()/N);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)&#123;</span><br><span class="line">            stack.push(N);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>)&#123;</span><br><span class="line">            stack.push(-N);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">4</span>)&#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        N--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.empty())&#123;</span><br><span class="line">        result += stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        2天没做,思路有点下降了,没有想出来 我想了4分割 然后分别计算 然后求和,问题是约等于会出错,还是考虑不周,学习了栈思路,用加减顺序不重要的特性 先计算*/保存结果在栈中 最后累加. 还是分段式处理.还有另一种解法 数学方法 有点变态要分析 略</p><h3 id="面试题-17-21-直方图的水量-2021年4月2日"><a href="#面试题-17-21-直方图的水量-2021年4月2日" class="headerlink" title="面试题 17.21. 直方图的水量 2021年4月2日"></a><a href="https://leetcode-cn.com/problems/volume-of-histogram-lcci/" target="_blank" rel="noopener">面试题 17.21. 直方图的水量</a> 2021年4月2日</h3><p>难度困难158收藏分享切换为英文接收动态反馈</p><p>给定一个直方图(也称柱状图)，假设有人从上面源源不断地倒水，最后直方图能存多少水量?直方图的宽度为 1。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="img"></p><p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的直方图，在这种情况下，可以接 6 个单位的水（蓝色部分表示水）。 <strong>感谢 Marcos</strong> 贡献此图。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出: 6</span><br></pre></td></tr></table></figure><h4 id="Java-7"><a href="#Java-7" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j : height) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; j) &#123;</span><br><span class="line">            max = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = max * height.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; height[i] != max; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; height[i]) &#123;</span><br><span class="line">            index = height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        result = result - max + index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = height.length - <span class="number">1</span>; height[i] != max; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; height[i]) &#123;</span><br><span class="line">            index = height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        result = result - max + index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j : height) &#123;</span><br><span class="line">        result -= j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h4><p>​        刚开始正向的想法很难,要记录太多的变量了,后来当作整个图来判断,用完整的方格去减去 溢出的部分,再减去原来存在的部分就是可以容量的部门.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习手写RPC框架</title>
      <link href="/35693/"/>
      <url>/35693/</url>
      
        <content type="html"><![CDATA[<h2 id="学习手写RPC框架"><a href="#学习手写RPC框架" class="headerlink" title="学习手写RPC框架"></a>学习手写RPC框架</h2><p>最近学习了dubbo 想自己试着写一个简单的rpc的框架 </p><ul><li>使用socket做数据传输层</li><li>使用JDK默认的序列化</li><li>使用JDK默认的代理类</li></ul><h3 id="新建项目-maven-项目"><a href="#新建项目-maven-项目" class="headerlink" title="新建项目 maven 项目"></a>新建项目 maven 项目</h3><p><img src="http://img.yzy.ink/image-20210317105002704.png" alt="image-20210317105002704"></p><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><p>注册中心主要有2个功能</p><ul><li><p>服务注册</p><p>能提供服务的服务器要去服务器注册,并把自己的访问地址和注册的接口发送给注册中心让它知道。</p></li><li><p>获取服务器</p><p>调用方向注册中心获取对应接口的调用的服务地址和端口</p></li></ul><p>RpcRegistrySocket.java 开启一个socket监听服务器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcRegistrySocket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ExecutorService executorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>, r -&gt; <span class="keyword">new</span> Thread(r, <span class="string">"mThread"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">                executorService.execute(<span class="keyword">new</span> RpcRegistryHandle(socket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的逻辑代码放到了 RpcRegistryHandle 里面处理客户端的每个请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcRegistryHandle</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcRegistryHandle</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取客户端发来的消息</span></span><br><span class="line">        ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">            outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">            SocketRpcRegistryEntity reg = (SocketRpcRegistryEntity) StreamUtils.getObject(inputStream);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (reg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"发送信息体有问题"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (reg.getType() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 注册</span></span><br><span class="line">                RegistryHandle.add(reg);</span><br><span class="line">                StreamUtils.putObject(outputStream, reg.getHost() + <span class="string">":"</span> + reg.getPort() + <span class="string">"服务器注册成功"</span>);</span><br><span class="line">                System.out.println(reg.getHost() + <span class="string">":"</span> + reg.getPort() + <span class="string">"服务器注册成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg.getType() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取服务器</span></span><br><span class="line">                SocketRpcServerEntity entity = RegistryHandle.get(reg.getServiceClassName());</span><br><span class="line">                StreamUtils.putObject(outputStream, entity);</span><br><span class="line">                System.out.println(<span class="string">"获取服务器成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            StreamUtils.close(inputStream);</span><br><span class="line">            StreamUtils.close(outputStream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SocketRpcRegistryEntity 是封装的消息对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketRpcRegistryEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型 0 注册 1获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求服务器的服务名字(接口名字)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceClassName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册的服务名字(接口名字)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] classNames;</span><br><span class="line">    ... get set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RegistryHandle.java 是服务器保存接口和请求服务器信息的地方</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentMap&lt;String, SocketRpcServerEntity&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(SocketRpcRegistryEntity reg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String className : reg.getClassNames()) &#123;</span><br><span class="line">            map.put(className,<span class="keyword">new</span> SocketRpcServerEntity(className,reg.getHost(),reg.getPort()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SocketRpcServerEntity <span class="title">get</span><span class="params">(String className)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(className))&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(className);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Registry</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册服务器端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> regPort = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"注册中心启动成功"</span>);</span><br><span class="line">        <span class="keyword">new</span> RpcRegistrySocket().start(regPort);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210317134813435.png" alt="image-20210317134813435"></p><h3 id="服务提供方"><a href="#服务提供方" class="headerlink" title="服务提供方"></a>服务提供方</h3><p>服务提供方要做2件事</p><ul><li>向注册中心注册对应的接口调用</li><li>等待客户端的发送的请求来执行对应的逻辑</li></ul><p>RpcServerSocket.java 开启一个socket服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcServerSocket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ExecutorService executorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>, r -&gt; <span class="keyword">new</span> Thread(r, <span class="string">"mThread"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port 监听端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// bio 阻塞获取数据</span></span><br><span class="line">                <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">                <span class="comment">// 放到线程里处理</span></span><br><span class="line">                executorService.execute(<span class="keyword">new</span> RpcServerHandle(socket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是接受调用方的请求逻辑在RpcServerHandle.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcServerHandle</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcServerHandle</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 主要这里处理逻辑</span></span><br><span class="line"></span><br><span class="line">        ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">            outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">            <span class="comment">// 1.获取客户端发送来的请求</span></span><br><span class="line">            SocketRpcRequestEntity rpcRequest = (SocketRpcRequestEntity) StreamUtils.getObject(inputStream);</span><br><span class="line">            <span class="keyword">if</span> (rpcRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请求参数有问题"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2.通过类名获取本地实现类</span></span><br><span class="line">            Class clazz = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (ClassHandle.map.containsKey(rpcRequest.getClassName())) &#123;</span><br><span class="line">                clazz = ClassHandle.map.get(rpcRequest.getClassName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有找到对应的实现类"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3.执行获得返回值</span></span><br><span class="line">            Method method = clazz.getMethod(rpcRequest.getMethodName(), rpcRequest.getTypes());</span><br><span class="line">            Object obj = method.invoke(clazz.newInstance(), rpcRequest.getArgs());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.重新发送给客户端</span></span><br><span class="line">            StreamUtils.putObject(outputStream, obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            StreamUtils.close(inputStream);</span><br><span class="line">            StreamUtils.close(outputStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClassHandle是存储本地接口名字和实现类的关系的类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassHandle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ConcurrentMap&lt;String,Class&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务</p><ol><li>去服务中心注册.</li><li>本地接口实现类映射的关系注册</li><li>开启服务监听</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册服务器地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String regHost = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册服务器端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> regPort = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地服务端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String localHost = <span class="string">"localhost"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地服务端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> localPort = <span class="number">888</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向服务器注册</span></span><br><span class="line">        SocketRpcRegistryEntity reg = <span class="keyword">new</span> SocketRpcRegistryEntity();</span><br><span class="line">        reg.setClassNames(<span class="keyword">new</span> String[]&#123;<span class="string">"cn.com.yangzhenyu.service.UserService"</span>&#125;);</span><br><span class="line">        reg.setHost(localHost);</span><br><span class="line">        reg.setPort(localPort);</span><br><span class="line">        reg.setType(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(regHost, regPort);</span><br><span class="line">            outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">            inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">            StreamUtils.putObject(outputStream, reg);</span><br><span class="line"></span><br><span class="line">            String msg = (String) StreamUtils.getObject(inputStream);</span><br><span class="line">            System.out.println(msg);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            StreamUtils.close(outputStream);</span><br><span class="line">            StreamUtils.close(outputStream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地注册映射关系</span></span><br><span class="line">        ClassHandle.map.put(<span class="string">"cn.com.yangzhenyu.service.UserService"</span>, UserServiceImpl.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动本地服务监听</span></span><br><span class="line">        System.out.println(<span class="string">"启动成功"</span>);</span><br><span class="line">        <span class="keyword">new</span> RpcServerSocket().start(localPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户通过ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserEntity <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserEntity(id, <span class="string">"yzy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端请求的封装SocketRpcRequestEntity.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送RPC请求的消息封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketRpcRequestEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] args;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法参数类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class[] types;</span><br><span class="line">    ... get set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动</p><p><img src="http://img.yzy.ink/image-20210317135815053.png" alt="image-20210317135815053"></p><h3 id="程序调用方"><a href="#程序调用方" class="headerlink" title="程序调用方"></a>程序调用方</h3><p>调用方(客户端)要做的事?</p><ol><li>要使用一个代理类去实现接口的实现</li><li>代理类要去注册中心根据接口名字获取对应服务的地址</li><li>访问对应的服务地址把参数序列化封装传过去</li><li>等待服务端返回序列化后的数据</li><li>把对应的数据反序列化回来</li></ol><p>主程序Main</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        RpcProxy rpcProxy = <span class="keyword">new</span> RpcProxy();</span><br><span class="line"></span><br><span class="line">        UserService userService = (UserService) rpcProxy.call(UserService.class, <span class="string">"localhost"</span>, <span class="number">999</span>);</span><br><span class="line">        UserEntity user = userService.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        System.out.println(<span class="string">"时间:"</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类RpcProxy.java</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author yzy</span><br><span class="line"> */</span><br><span class="line">public class RpcProxy&lt;T&gt; &#123;</span><br><span class="line">    public T call(Class&lt;T&gt; clazz, String host, int port) &#123;</span><br><span class="line">        return (T) Proxy.newProxyInstance(clazz.getClassLoader(), new Class[]&#123;clazz&#125;, new RpcHandler(clazz.getName(), host, port));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的JDK的动态代理 只能针对接口 具体的处理逻辑转移到了 RpcHandler上</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yzy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; RpcHandler(String className, String host, <span class="keyword">int</span> port) &#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从注册中心获取请求服务器</span></span><br><span class="line">        SocketRpcRegistryEntity reg = <span class="keyword">new</span> SocketRpcRegistryEntity();</span><br><span class="line">        reg.setType(<span class="number">1</span>);</span><br><span class="line">        reg.setServiceClassName(className);</span><br><span class="line"></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream rpcOutputStream = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream rpcInputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            outputStream = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line">            StreamUtils.putObject(outputStream, reg);</span><br><span class="line"></span><br><span class="line">            inputStream = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">            SocketRpcServerEntity rpcServer = (SocketRpcServerEntity) StreamUtils.getObject(inputStream);</span><br><span class="line">            <span class="keyword">if</span> (rpcServer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有获取到对应服务器"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 远程调用服务区</span></span><br><span class="line">            Socket socketRpc = <span class="keyword">new</span> Socket(rpcServer.getHost(), rpcServer.getPort());</span><br><span class="line">            rpcOutputStream = <span class="keyword">new</span> ObjectOutputStream(socketRpc.getOutputStream());</span><br><span class="line">            SocketRpcRequestEntity entity = <span class="keyword">new</span> SocketRpcRequestEntity();</span><br><span class="line">            entity.setArgs(args);</span><br><span class="line">            entity.setClassName(className);</span><br><span class="line">            entity.setMethodName(method.getName());</span><br><span class="line">            entity.setTypes(method.getParameterTypes());</span><br><span class="line"></span><br><span class="line">            StreamUtils.putObject(rpcOutputStream, entity);</span><br><span class="line"></span><br><span class="line">            rpcInputStream = <span class="keyword">new</span> ObjectInputStream(socketRpc.getInputStream());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> StreamUtils.getObject(rpcInputStream);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            StreamUtils.close(inputStream);</span><br><span class="line">            StreamUtils.close(outputStream);</span><br><span class="line">            StreamUtils.close(rpcInputStream);</span><br><span class="line">            StreamUtils.close(rpcOutputStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用socket连接发送数据接收数据</p><p>运行效果</p><p><img src="http://img.yzy.ink/image-20210317140519039.png" alt="image-20210317140519039"></p><p><img src="http://img.yzy.ink/image-20210317140431418.png" alt="image-20210317140431418"></p><blockquote><p>简单的rpc框架就这么实现了.</p></blockquote><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p><a href="https://github.com/yttrium2016/yzy-rpc" target="_blank" rel="noopener">https://github.com/yttrium2016/yzy-rpc</a></p>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> RPC </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ环境搭建</title>
      <link href="/46089/"/>
      <url>/46089/</url>
      
        <content type="html"><![CDATA[<h2 id="RocketMQ环境搭建"><a href="#RocketMQ环境搭建" class="headerlink" title="RocketMQ环境搭建"></a>RocketMQ环境搭建</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">http://rocketmq.apache.org/</a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="1-消息模型（Message-Model）"><a href="#1-消息模型（Message-Model）" class="headerlink" title="1 消息模型（Message Model）"></a>1 消息模型（Message Model）</h4><p>RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。</p><h4 id="2-消息生产者（Producer）"><a href="#2-消息生产者（Producer）" class="headerlink" title="2 消息生产者（Producer）"></a>2 消息生产者（Producer）</h4><p> 负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</p><h4 id="3-消息消费者（Consumer）"><a href="#3-消息消费者（Consumer）" class="headerlink" title="3 消息消费者（Consumer）"></a>3 消息消费者（Consumer）</h4><p> 负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。</p><h4 id="4-主题（Topic）"><a href="#4-主题（Topic）" class="headerlink" title="4 主题（Topic）"></a>4 主题（Topic）</h4><p>  表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。</p><h4 id="5-代理服务器（Broker-Server）"><a href="#5-代理服务器（Broker-Server）" class="headerlink" title="5 代理服务器（Broker Server）"></a>5 代理服务器（Broker Server）</h4><p>消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</p><h4 id="6-名字服务（Name-Server）"><a href="#6-名字服务（Name-Server）" class="headerlink" title="6 名字服务（Name Server）"></a>6 名字服务（Name Server）</h4><p> 名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。</p><h4 id="7-拉取式消费（Pull-Consumer）"><a href="#7-拉取式消费（Pull-Consumer）" class="headerlink" title="7 拉取式消费（Pull Consumer）"></a>7 拉取式消费（Pull Consumer）</h4><p>  Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。</p><h4 id="8-推动式消费（Push-Consumer）"><a href="#8-推动式消费（Push-Consumer）" class="headerlink" title="8 推动式消费（Push Consumer）"></a>8 推动式消费（Push Consumer）</h4><p> Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。</p><h4 id="9-生产者组（Producer-Group）"><a href="#9-生产者组（Producer-Group）" class="headerlink" title="9 生产者组（Producer Group）"></a>9 生产者组（Producer Group）</h4><p>  同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</p><h4 id="10-消费者组（Consumer-Group）"><a href="#10-消费者组（Consumer-Group）" class="headerlink" title="10 消费者组（Consumer Group）"></a>10 消费者组（Consumer Group）</h4><p>  同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。</p><h4 id="11-集群消费（Clustering）"><a href="#11-集群消费（Clustering）" class="headerlink" title="11 集群消费（Clustering）"></a>11 集群消费（Clustering）</h4><p>集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。</p><h4 id="12-广播消费（Broadcasting）"><a href="#12-广播消费（Broadcasting）" class="headerlink" title="12 广播消费（Broadcasting）"></a>12 广播消费（Broadcasting）</h4><p>广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。</p><h4 id="13-普通顺序消息（Normal-Ordered-Message）"><a href="#13-普通顺序消息（Normal-Ordered-Message）" class="headerlink" title="13 普通顺序消息（Normal Ordered Message）"></a>13 普通顺序消息（Normal Ordered Message）</h4><p>普通顺序消费模式下，消费者通过同一个消费队列收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。</p><h4 id="14-严格顺序消息（Strictly-Ordered-Message）"><a href="#14-严格顺序消息（Strictly-Ordered-Message）" class="headerlink" title="14 严格顺序消息（Strictly Ordered Message）"></a>14 严格顺序消息（Strictly Ordered Message）</h4><p>严格顺序消息模式下，消费者收到的所有消息均是有顺序的。</p><h4 id="15-消息（Message）"><a href="#15-消息（Message）" class="headerlink" title="15 消息（Message）"></a>15 消息（Message）</h4><p>消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。</p><h4 id="16-标签（Tag）"><a href="#16-标签（Tag）" class="headerlink" title="16 标签（Tag）"></a>16 标签（Tag）</h4><p> 为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p><a href="http://rocketmq.apache.org/dowloading/releases/" target="_blank" rel="noopener">下载地址</a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://downloads.apache.org/rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip rocketmq-all-4.8.0-bin-release.zip</span><br></pre></td></tr></table></figure><h5 id="安装JDK环境"><a href="#安装JDK环境" class="headerlink" title="安装JDK环境"></a>安装JDK环境</h5><p>Java8的环境 <a href="https://www.yangzhenyu.com.cn/605/#linux%E7%89%88%E6%9C%AC">安装指南</a></p><h5 id="MQ配置环境变量"><a href="#MQ配置环境变量" class="headerlink" title="MQ配置环境变量"></a>MQ配置环境变量</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入环境变量</span></span><br><span class="line"><span class="built_in">export</span> ROCKETMQ_HOME=/opt/rocketmq-all-4.8.0-bin-release</span><br><span class="line"><span class="comment"># 下面这个不是必须要的</span></span><br><span class="line"><span class="built_in">export</span> NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ROCKETMQ_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存</span></span><br><span class="line">:wq -&gt; enter</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h5 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入bin目录</span></span><br><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line"><span class="comment"># 修改 启动server的脚本</span></span><br><span class="line">vim runserver.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改这一行</span></span><br><span class="line">JAVA_OPT=<span class="string">"<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是2G 做测试的时候不需要这么大</span></span><br><span class="line"><span class="comment"># 修改为512M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存</span></span><br><span class="line">:wq -&gt; enter</span><br><span class="line"></span><br><span class="line">vim runbroker.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改这一行</span></span><br><span class="line">JAVA_OPT=<span class="string">"<span class="variable">$&#123;JAVA_OPT&#125;</span> -server -Xms512m -Xmx512m -Xmn256m"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是4G 做测试的时候不需要这么大</span></span><br><span class="line"><span class="comment"># 修改为512M</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存</span></span><br><span class="line">:wq -&gt; enter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改broker配置文件</span></span><br><span class="line">vim /conf/broker.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在末尾加上一行</span></span><br><span class="line"><span class="comment"># 允许自己创建Topic 方便测试</span></span><br><span class="line">autoCreateTopicEnable = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台启动nameserver</span></span><br><span class="line">nohup mqnamesrv &amp; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">cat nohup.out</span><br><span class="line"><span class="comment"># The Name Server boot success. serializeType=JSON</span></span><br><span class="line"><span class="comment"># 出现这行说明启动成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台启动nameserver</span></span><br><span class="line">nohup mqbroker -c ../conf/broker.conf &amp; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">cat nohup.out</span><br><span class="line"><span class="comment"># The broker[broker-a, 10.10.10.154:10911] boot success. serializeType=JSON and name server is localhost:9876</span></span><br><span class="line"><span class="comment"># 出现这行说明启动成功</span></span><br></pre></td></tr></table></figure><blockquote><p>单机运行启动成功</p></blockquote><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><p><a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.8.0/rocketmq-all-4.8.0-bin-release.zip" target="_blank" rel="noopener">下载地址</a></p><p>解压到一个目录</p><h5 id="安装JDK环境-1"><a href="#安装JDK环境-1" class="headerlink" title="安装JDK环境"></a>安装JDK环境</h5><p>Java8的环境 <a href="https://www.yangzhenyu.com.cn/605/#windows%E7%89%88%E6%9C%AC">安装指南</a></p><h5 id="MQ配置环境变量-1"><a href="#MQ配置环境变量-1" class="headerlink" title="MQ配置环境变量"></a>MQ配置环境变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">计算机→属性→高级系统设置→高级→环境变量</span><br><span class="line">系统变量→新建 ROCKETMQ_HOME 变量 。</span><br><span class="line">变量值填写jdk的安装目录（C:\Development\rocketmq-all-4.8.0-bin-release)</span><br></pre></td></tr></table></figure><h5 id="配置修改-1"><a href="#配置修改-1" class="headerlink" title="配置修改"></a>配置修改</h5><p>修改文件夹bin里的runbroker.cmd</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改默认大小</span><br><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms512m -Xmx512m -Xmn256m&quot;</span><br><span class="line"># 在%CLASSPATH% 左右各加一个引号 不然启动broker会显示找不到主方法</span><br><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -cp &quot;%CLASSPATH%&quot;&quot;</span><br></pre></td></tr></table></figure><p>修改文件夹bin里的runserver.cmd</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 修改默认大小</span><br><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line"># 在%CLASSPATH% 左右各加一个引号 不然启动broker会显示找不到主方法</span><br><span class="line">set &quot;JAVA_OPT=%JAVA_OPT% -cp &quot;%CLASSPATH%&quot;&quot;</span><br></pre></td></tr></table></figure><p>修改文件夹conf里的broker.conf</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 增加一行broker.conf</span><br><span class="line">autoCreateTopicEnable = true</span><br></pre></td></tr></table></figure><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><p>双击bin目录下mqnamesrv.cmd</p><p><img src="http://img.yzy.ink/image-20210308153845449.png" alt="image-20210308153845449"></p><p>启动完成</p><p>双击bin目录下mqbroker.cmd</p><p><img src="http://img.yzy.ink/image-20210308153934452.png" alt="image-20210308153934452"></p><p>启动完成</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用bin目录下的tools</p><h5 id="提供者-会发送1000条消息到broker"><a href="#提供者-会发送1000条消息到broker" class="headerlink" title="提供者 会发送1000条消息到broker"></a>提供者 会发送1000条消息到broker</h5><p>windows</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">.\bin\tools.cmd  org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure><p>linux</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin/tools org.apache.rocketmq.example.quickstart.Producer</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210308154533798.png" alt="image-20210308154533798"></p><h5 id="消费者-会接受1000条消息"><a href="#消费者-会接受1000条消息" class="headerlink" title="消费者 会接受1000条消息"></a>消费者 会接受1000条消息</h5><p>windows</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\bin\tools.cmd org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure><p>linux</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin/tools org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210308154549175.png" alt="image-20210308154549175"></p><blockquote><p>测试完成</p></blockquote><h3 id="可视化服务"><a href="#可视化服务" class="headerlink" title="可视化服务"></a>可视化服务</h3><h4 id="仓库地址"><a href="#仓库地址" class="headerlink" title="仓库地址"></a><a href="https://github.com/apache/rocketmq-externals" target="_blank" rel="noopener">仓库地址</a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 拉取仓库</span><br><span class="line">git clone https://github.com/apache/rocketmq-externals</span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>mavne编译 <a href="https://github.com/apache/rocketmq-externals/tree/master/rocketmq-console" target="_blank" rel="noopener">rocketmq-console</a> 项目</p><h4 id="启动-2"><a href="#启动-2" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-2.0.0.jar</span><br></pre></td></tr></table></figure><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p><img src="http://img.yzy.ink/image-20210308155955930.png" alt="image-20210308155955930"></p><p>web端页面</p><p><img src="http://img.yzy.ink/image-20210308160027768.png" alt="image-20210308160027768"></p>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> mq </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从模式</title>
      <link href="/54854/"/>
      <url>/54854/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql主从模式"><a href="#Mysql主从模式" class="headerlink" title="Mysql主从模式"></a>Mysql主从模式</h2><p>本案例 使用docker建立主从数据库</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里我使用的是自己的服务器unraid里docker管理工具有mysql模版 我直接使用模版创建了</p><p><img src="http://img.yzy.ink/image-20210311152115771.png" alt="image-20210311152115771"></p><p><img src="http://img.yzy.ink/image-20210311152210446.png" alt="image-20210311152210446"></p><h4 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像并运行</span></span><br><span class="line">docker run -d --name=<span class="string">'mysql-master'</span> --net=<span class="string">'bridge'</span> -e TZ=<span class="string">"Asia/Shanghai"</span> -e HOST_OS=<span class="string">"Unraid"</span> -e <span class="string">'MYSQL_ROOT_PASSWORD'</span>=<span class="string">'1q2w3e1122!'</span> -e <span class="string">'MYSQL_DATABASE'</span>=<span class="string">'m_test'</span> -e <span class="string">'MYSQL_USER'</span>=<span class="string">'m_test'</span> -e <span class="string">'MYSQL_PASSWORD'</span>=<span class="string">'m_test'</span> -p <span class="string">'3307:3306/tcp'</span> -v <span class="string">'/mnt/user/appdata/mysql-master'</span>:<span class="string">'/var/lib/mysql'</span>:<span class="string">'rw'</span> <span class="string">'mysql'</span></span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>为了以后更容易的修改配置我把配置文件映射到了虚拟机上</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看运行中的容器</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210311154247660.png" alt="image-20210311154247660"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it e0f16400a8af /bin/bash</span><br><span class="line"><span class="comment"># 复制原来的配置到本地文件目录</span></span><br><span class="line">cp -rf mysql/ /var/lib/mysql/conf/</span><br><span class="line"><span class="comment"># 退出容器</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210311154701724.png" alt="image-20210311154701724"></p><h4 id="重新运行容器"><a href="#重新运行容器" class="headerlink" title="重新运行容器"></a>重新运行容器</h4><p>编辑修改docker容器</p><p><img src="http://img.yzy.ink/image-20210311154926033.png" alt="image-20210311154926033"></p><p><img src="http://img.yzy.ink/image-20210311155017686.png" alt="image-20210311155017686"></p><h4 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=<span class="string">'mysql-master'</span> --net=<span class="string">'bridge'</span> -e TZ=<span class="string">"Asia/Shanghai"</span> -e HOST_OS=<span class="string">"Unraid"</span> -e <span class="string">'MYSQL_ROOT_PASSWORD'</span>=<span class="string">'1q2w3e1122!'</span> -e <span class="string">'MYSQL_DATABASE'</span>=<span class="string">'m_test'</span> -e <span class="string">'MYSQL_USER'</span>=<span class="string">'m_test'</span> -e <span class="string">'MYSQL_PASSWORD'</span>=<span class="string">'m_test'</span> -p <span class="string">'3307:3306/tcp'</span> -v <span class="string">'/mnt/user/appdata/mysql-master'</span>:<span class="string">'/var/lib/mysql'</span>:<span class="string">'rw'</span> -v <span class="string">'/mnt/user/appdata/mysql-master/conf/mysql/'</span>:<span class="string">'/etc/mysql'</span>:<span class="string">'rw'</span> <span class="string">'mysql'</span></span><br></pre></td></tr></table></figure><h4 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h4><p><img src="http://img.yzy.ink/image-20210311155748032.png" alt="image-20210311155748032"></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">log-bin</span>=mysql-bin #开启二进制日志</span><br><span class="line"><span class="attr">server-id</span>=<span class="number">1</span> #设置server-id</span><br></pre></td></tr></table></figure><h4 id="master节点设置"><a href="#master节点设置" class="headerlink" title="master节点设置"></a>master节点设置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入节点 docker ps 查看id</span></span><br><span class="line">docker <span class="built_in">exec</span> -it xxxxxx /bin/bash</span><br><span class="line"><span class="comment"># 进入mysql</span></span><br><span class="line">mysql -uroot -p1q2w3e1122!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置用户号权限</span></span><br><span class="line">GRANT REPLICATION SLAVE ON *.* to <span class="string">'yzy'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'woaini'</span>;</span><br><span class="line"><span class="comment"># 报错</span></span><br><span class="line">ERROR 1064 (42000): You have an error <span class="keyword">in</span> your SQL syntax; check the manual that corresponds to your MySQL server version <span class="keyword">for</span> the right syntax to use near <span class="string">'identified by '</span>woaini<span class="string">''</span> at line 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改为3句命令</span></span><br><span class="line"><span class="comment"># 创建账户</span></span><br><span class="line">CREATE USER <span class="string">'yzy'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'woaini'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予权限</span></span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO  <span class="string">'yzy'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210311161917039.png" alt="image-20210311161917039"></p><h5 id="查看日志位置"><a href="#查看日志位置" class="headerlink" title="查看日志位置"></a>查看日志位置</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210311164105232.png" alt="image-20210311164105232"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">记住以下2个</span><br><span class="line">mysql-bin.000001 </span><br><span class="line">854</span><br></pre></td></tr></table></figure><h4 id="slave节点设置"><a href="#slave节点设置" class="headerlink" title="slave节点设置"></a>slave节点设置</h4><p><img src="C:\Users\yzy\Documents\文章\20210202Mysql主从模式.assets\image-20210311163156257.png" alt="image-20210311163156257"></p><h5 id="slave命令"><a href="#slave命令" class="headerlink" title="slave命令"></a>slave命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name=<span class="string">'mysql-slave'</span> --net=<span class="string">'bridge'</span> -e TZ=<span class="string">"Asia/Shanghai"</span> -e HOST_OS=<span class="string">"Unraid"</span> -e <span class="string">'MYSQL_ROOT_PASSWORD'</span>=<span class="string">'1q2w3e1122!'</span> -e <span class="string">'MYSQL_DATABASE'</span>=<span class="string">'m_test'</span> -e <span class="string">'MYSQL_USER'</span>=<span class="string">'m_test'</span> -e <span class="string">'MYSQL_PASSWORD'</span>=<span class="string">'m_test'</span> -p <span class="string">'3308:3306/tcp'</span> -v <span class="string">'/mnt/user/appdata/mysql-slave'</span>:<span class="string">'/var/lib/mysql'</span>:<span class="string">'rw'</span> -v <span class="string">'/mnt/user/appdata/mysql-slave/conf/mysql/'</span>:<span class="string">'/etc/mysql'</span>:<span class="string">'rw'</span> <span class="string">'mysql'</span></span><br></pre></td></tr></table></figure><h5 id="mysqld设置"><a href="#mysqld设置" class="headerlink" title="mysqld设置"></a>mysqld设置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server-id=2 <span class="comment">#设置server-id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置哪些同步</span></span><br><span class="line"><span class="comment"># 不同步哪些数据库  </span></span><br><span class="line">binlog-ignore-db = mysql  </span><br><span class="line">binlog-ignore-db = sys  </span><br><span class="line">binlog-ignore-db = information_schema  </span><br><span class="line">binlog-ignore-db = performance_schema  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 只同步哪些数据库，除此之外，其他不同步  </span></span><br><span class="line">binlog-do-db = m_test</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&apos;10.10.10.228&apos;, MASTER_USER=&apos;m_test&apos;, MASTER_PASSWORD=&apos;m_test&apos;, MASTER_LOG_FILE=&apos;mysql-bin.000001&apos;,MASTER_PORT=3307, MASTER_LOG_POS=2348;</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210311164727226.png" alt="image-20210311164727226"></p><h5 id="启动从节点"><a href="#启动从节点" class="headerlink" title="启动从节点"></a>启动从节点</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…."></a>未完待续….</h3>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo整合SpringBoot</title>
      <link href="/57357/"/>
      <url>/57357/</url>
      
        <content type="html"><![CDATA[<h2 id="Dubbo整合SpringBoot"><a href="#Dubbo整合SpringBoot" class="headerlink" title="Dubbo整合SpringBoot"></a>Dubbo整合SpringBoot</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="http://dubbo.io/" target="_blank" rel="noopener">Dubbo</a> （开源分布式服务框架）</p><p>Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个高性能优秀的<a href="https://baike.baidu.com/item/服务框架" target="_blank" rel="noopener">服务框架</a>，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 [1] <a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架无缝集成。</p><p>Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><h3 id="开启zookeeper"><a href="#开启zookeeper" class="headerlink" title="开启zookeeper"></a>开启zookeeper</h3><p>启动开启zookeeper做注册中心 (记住IP和端口)</p><ol><li><a href="https://www.yangzhenyu.com.cn/1/">linux</a></li><li><a href="https://www.yangzhenyu.com.cn/10442/#zookeeper-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">windows</a></li></ol><h3 id="创建一个根项目"><a href="#创建一个根项目" class="headerlink" title="创建一个根项目"></a>创建一个根项目</h3><h4 id="创建一个maven项目作为根项目"><a href="#创建一个maven项目作为根项目" class="headerlink" title="创建一个maven项目作为根项目"></a>创建一个maven项目作为根项目</h4><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.com.yangzhenyu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建module-dubbo-api"><a href="#创建module-dubbo-api" class="headerlink" title="创建module (dubbo-api)"></a>创建module (dubbo-api)</h4><p>dubbo 放着实体类和对应的接口是公共的类</p><h5 id="UserVo-java"><a href="#UserVo-java" class="headerlink" title="UserVo.java"></a>UserVo.java</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.yangzhenyu.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一定要实现 Serializable 接口 序列化</p></blockquote><h5 id="IUserService"><a href="#IUserService" class="headerlink" title="IUserService"></a>IUserService</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">UserVo <span class="title">findUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建module-dubbo-provider-接口提供者"><a href="#创建module-dubbo-provider-接口提供者" class="headerlink" title="创建module (dubbo-provider) 接口提供者"></a>创建module (dubbo-provider) 接口提供者</h4><p>基于SpringBoot 2.4.3版本和Dubbo2.7.8实现</p><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.com.yangzhenyu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Dubbo Provider project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- dubbo的依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- zookeeper 需要的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.com.yangzhenyu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line"></span><br><span class="line">#当前服务/应用的名字</span><br><span class="line">dubbo.application.name=dubbo-provider</span><br><span class="line"></span><br><span class="line">#通信规则（通信协议和接口）</span><br><span class="line">dubbo.protocol.name=dubbo</span><br><span class="line">dubbo.protocol.port=100</span><br><span class="line"></span><br><span class="line">#连接监控中心</span><br><span class="line">dubbo.monitor.protocol=registry</span><br></pre></td></tr></table></figure><h5 id="DubboProviderApplication"><a href="#DubboProviderApplication" class="headerlink" title="DubboProviderApplication"></a>DubboProviderApplication</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启包扫描</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@DubboService</span><br><span class="line">public class UserServiceImpl implements IUserService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public UserVo findUser() &#123;</span><br><span class="line">        UserVo userVo = new UserVo();</span><br><span class="line">        userVo.setId(1);</span><br><span class="line">        userVo.setAddress(&quot;shanghai&quot;);</span><br><span class="line">        userVo.setName(&quot;yzy&quot;);</span><br><span class="line">        return userVo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>旧版本中 DubboService 注解是Service //com.alibaba.dubbo.config.annotatio</p></blockquote><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>直接启动SpringBoot项目 出现以下图 说明启动成功</p><p><img src="http://img.yzy.ink/image-20210304164431566.png" alt="image-20210304164431566"></p><h4 id="创建module-dubbo-consumer-接口消费者"><a href="#创建module-dubbo-consumer-接口消费者" class="headerlink" title="创建module (dubbo-consumer) 接口消费者"></a>创建module (dubbo-consumer) 接口消费者</h4><p>基于SpringBoot 2.4.3版本和Dubbo2.7.8实现</p><h5 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.com.yangzhenyu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Dubbo Consumer project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.com.yangzhenyu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="application-properties-1"><a href="#application-properties-1" class="headerlink" title="application.properties"></a>application.properties</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port=9999</span><br><span class="line"></span><br><span class="line">dubbo.application.name=dubbo-consumer</span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br><span class="line">dubbo.monitor.protocol=registry</span><br></pre></td></tr></table></figure><h5 id="DubboConsumerApplication"><a href="#DubboConsumerApplication" class="headerlink" title="DubboConsumerApplication"></a>DubboConsumerApplication</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开启包扫描</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DubboConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TestController"><a href="#TestController" class="headerlink" title="TestController"></a>TestController</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DubboReference</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserVo <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DubboReference注解在旧的版本里面是Reference //com.alibaba.dubbo.config.annotatio</p></blockquote><h5 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h5><p><img src="http://img.yzy.ink/image-20210304165112405.png" alt="image-20210304165112405"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问 <a href="http://localhost:9999/test" target="_blank" rel="noopener">http://localhost:9999/test</a></p><p><img src="http://img.yzy.ink/image-20210304165152474.png" alt="image-20210304165152474"></p><blockquote><p>成功远程调用接口成功</p></blockquote><p>程序源码: <a href="https://github.com/yttrium2016/dubbo-boot" target="_blank" rel="noopener">https://github.com/yttrium2016/dubbo-boot</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><h4 id="官方管理-https-github-com-apache-dubbo-admin"><a href="#官方管理-https-github-com-apache-dubbo-admin" class="headerlink" title="官方管理 : https://github.com/apache/dubbo-admin"></a>官方管理 : <a href="https://github.com/apache/dubbo-admin" target="_blank" rel="noopener">https://github.com/apache/dubbo-admin</a></h4></li><li><h4 id="官方的例子-https-github-com-apache-dubbo-spring-boot-project"><a href="#官方的例子-https-github-com-apache-dubbo-spring-boot-project" class="headerlink" title="官方的例子 : https://github.com/apache/dubbo-spring-boot-project"></a>官方的例子 : <a href="https://github.com/apache/dubbo-spring-boot-project" target="_blank" rel="noopener">https://github.com/apache/dubbo-spring-boot-project</a></h4></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Zookeeper的分布式锁</title>
      <link href="/10442/"/>
      <url>/10442/</url>
      
        <content type="html"><![CDATA[<h2 id="基于Zookeeper的分布式锁"><a href="#基于Zookeeper的分布式锁" class="headerlink" title="基于Zookeeper的分布式锁"></a>基于Zookeeper的分布式锁</h2><p>基于 SpringBoot 项目 实现锁的操作</p><h3 id="zookeeper-环境搭建"><a href="#zookeeper-环境搭建" class="headerlink" title="zookeeper 环境搭建"></a>zookeeper 环境搭建</h3><ol><li><a href="https://www.yangzhenyu.com.cn/1/">linux安装教程</a></li><li>Windwos安装教程<ol><li><a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">下载</a></li><li>解压</li><li>进入conf目录 zoo_sample.cfg 复制为 zoo.cfg</li><li>修改配置</li><li>进入bin目录</li><li>双击 zkServer.cmd</li></ol></li></ol><h3 id="引入Jar包依赖"><a href="#引入Jar包依赖" class="headerlink" title="引入Jar包依赖"></a>引入Jar包依赖</h3><p>在SpringBoot 2.4.3上加入Jar包出现了一个小插曲</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在SpringBoot项目 只加入以上jar包 运行项目</p><p><img src="http://img.yzy.ink/image-20210304143226020.png" alt="image-20210304143226020"></p><blockquote><p>出现了 LoggerFactory is not a Logback LoggerContext but Logback is on the classpath 的错误</p><p>slf4j jar包冲突</p></blockquote><p>最后找到了一个idea的jar包冲突管理神器插件</p><p><img src="http://img.yzy.ink/image-20210304143823163.png" alt="image-20210304143823163"></p><p>使用方法</p><ol><li><p>在idea插件里面安装</p></li><li><p>打开pom.xml的文件 左下角选择Dependency Analyzer</p><p><img src="http://img.yzy.ink/image-20210304144449647.png" alt="image-20210304144449647"></p></li><li><p>右键 exclusion 去除 最终的引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Config类"><a href="#Config类" class="headerlink" title="Config类"></a>Config类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;zookeeper.address&#125;"</span>) <span class="comment">// 127.0.0.1:2181</span></span><br><span class="line">    <span class="keyword">private</span> String connectString;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;zookeeper.timeout&#125;"</span>) <span class="comment">// 60000</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"zooKeeper"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZooKeeper <span class="title">zooKeeper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ZooKeeper zooKeeper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//连接成功后，会回调watcher监听，此连接操作是异步的，执行完new语句后，直接调用后续代码</span></span><br><span class="line">            <span class="comment">//  可指定多台服务地址 127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183</span></span><br><span class="line">            zooKeeper = <span class="keyword">new</span> ZooKeeper(connectString, timeout, event -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"MyWatcher.process(接收到的事件：)"</span> + event);</span><br><span class="line">                <span class="keyword">if</span> (Watcher.Event.KeeperState.SyncConnected == event.getState()) &#123;</span><br><span class="line">                    <span class="comment">//如果收到了服务端的响应事件,连接成功</span></span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                    System.out.println(<span class="string">"OK"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> zooKeeper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AbsLock类"><a href="#AbsLock类" class="headerlink" title="AbsLock类"></a>AbsLock类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String lockName = <span class="string">"/myLock"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了让他重试 获取锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryLock()) &#123;</span><br><span class="line">            waitLock();</span><br><span class="line">            lock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">waitLock</span><span class="params">()</span></span>; <span class="comment">// 阻塞</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>; <span class="comment">// 真的加锁逻辑</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">()</span></span>; <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SimpleZkLock类"><a href="#SimpleZkLock类" class="headerlink" title="SimpleZkLock类"></a>SimpleZkLock类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleZkLock</span> <span class="keyword">extends</span> <span class="title">AbsLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch waitLatch = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleZkLock</span><span class="params">(ZooKeeper zooKeeper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zooKeeper = zooKeeper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            waitLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            Stat stat = zooKeeper.exists(lockName, event -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (event.getType() == Watcher.Event.EventType.NodeDeleted &amp;&amp; event.getPath().equals(lockName)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"删除了:"</span>+lockName);</span><br><span class="line">                    waitLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">                waitLatch.await();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zooKeeper.create(lockName, lockName.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zooKeeper.delete(lockName, -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"get2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            SimpleZkLock zookeeperLock = <span class="keyword">new</span> SimpleZkLock(zooKeeper);</span><br><span class="line">            zookeeperLock.lock();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            zookeeperLock.unLock();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"结果:"</span> + sum + <span class="string">",时间:"</span> + (System.currentTimeMillis() - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210304150901669.png" alt="image-20210304150901669"></p><blockquote><p>简单的实现了锁的逻辑 原理是通过创建一个临时节点,因为节点的唯一性,只有一个线程可以新建成功,保证了唯一性,其他线程通过监听节点状态来阻塞,删除后再去争夺这把锁</p><p>缺点: 羊群效应 所有其他节点都监听一个节点 切无先后顺序,性能在并发量非常大的时候会造成流量堆积</p></blockquote><h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String root = <span class="string">"/lockRoot"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ZooKeeper zooKeeper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nodeKey = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZookeeperLock</span><span class="params">(ZooKeeper zooKeeper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zooKeeper = zooKeeper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Stat stat = zooKeeper.exists(root, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (stat == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 如果没有节点 创建根节点</span></span><br><span class="line">                <span class="comment">// 根节点如果是临时节点 无法创建子节点的</span></span><br><span class="line">                zooKeeper.create(root, <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建子节点</span></span><br><span class="line">            String lockTemp = root + <span class="string">"/temp"</span>;</span><br><span class="line">            String myLockName = zooKeeper.create(lockTemp, <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line">            nodeKey = myLockName;</span><br><span class="line">            myLockName = myLockName.substring(root.length() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            List&lt;String&gt; list = zooKeeper.getChildren(root, <span class="keyword">false</span>);</span><br><span class="line">            Collections.sort(list);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = list.indexOf(myLockName);</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">                Stat stat1 = zooKeeper.exists(root + <span class="string">"/"</span> + list.get(i - <span class="number">1</span>), event -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (event.getType().equals(Watcher.Event.EventType.NodeDeleted) &amp;&amp; event.getPath().equals(root + <span class="string">"/"</span> + list.get(i - <span class="number">1</span>))) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"删除了:"</span> + root + <span class="string">"/"</span> + list.get(i - <span class="number">1</span>));</span><br><span class="line">                        countDownLatch.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">if</span> (stat1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    countDownLatch.await();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zooKeeper.delete(nodeKey, -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"get"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            ZookeeperLock zookeeperLock = <span class="keyword">new</span> ZookeeperLock(zooKeeper);</span><br><span class="line">            zookeeperLock.lock();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            zookeeperLock.unLock();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"结果:"</span> + sum + <span class="string">",时间:"</span> + (System.currentTimeMillis() - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210304151947676.png" alt="image-20210304151947676"></p><blockquote><p>在一个目录下面每次都创建一个有序节点,去监听它前一个节点,每次获取Lock去判断是否是最小的节点,是的话就放过.其他线程阻塞监听另一个节点</p></blockquote><p>项目源码: <a href="https://github.com/yttrium2016/zookeeper-boot" target="_blank" rel="noopener">https://github.com/yttrium2016/zookeeper-boot</a></p>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本概念整理</title>
      <link href="/37784/"/>
      <url>/37784/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础整理"><a href="#Java基础整理" class="headerlink" title="Java基础整理"></a>Java基础整理</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="final-自己老是不太懂"><a href="#final-自己老是不太懂" class="headerlink" title="final (自己老是不太懂)"></a><strong>final</strong> (自己老是不太懂)</h3><ol><li>用在变量上,变量会变成常量 不可被修改<blockquote><p>对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p></blockquote></li><li>用在方法上,方法变成最终方法 不可被复写</li><li>用在类上,类变成最终类 不可被继承<blockquote><p>String 就是一个最终类</p></blockquote></li></ol><h3 id="static-静态"><a href="#static-静态" class="headerlink" title="static 静态"></a><strong>static</strong> 静态</h3><ol><li><p>类方法</p><blockquote><p>又称静态方法,用其只执行一次的特点，使用静态方法实现单例模式，生成单一对象，该对象可以被公共使用，减少内存操作，优化性能.</p></blockquote><blockquote><p>多个线程调用静态方法，是否会出现并发问题取决于，静态方法内部是否需要引用共享区内的静态变量。当线程调用静态方法时，都会创建一套临时变量，可见性是在这个线程内部，所以当多个线程调用静态方法时，并且这个静态方法没有引用外部静态变量的。不会有线程并发的问题。</p></blockquote><blockquote><p>工具类的特点是没有属性或属性是不会改变的</p></blockquote></li><li><p>类属性</p><blockquote><p>共享数据,可以在其他类直接访问类属性</p></blockquote></li><li><p>静态代码块</p><blockquote><p>静态块先于初始化块执行，而且只执行一次（同样适用于静态方法，静态属性。因为不论类被调用几次，类装载器只执行一次）,可用于初始化静态属性（如读取配置文件，只需初始化一次即可）</p></blockquote></li></ol><p>例子:</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String address;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">"a"</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        address = <span class="string">"b"</span>;</span><br><span class="line">        System.out.println(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Demo()&#123;</span><br><span class="line">        name = <span class="string">"c"</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo d = <span class="keyword">new</span> Demo();</span><br><span class="line">        Demo d2 = <span class="keyword">new</span> Demo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结论 输出结果</span></span><br><span class="line"><span class="comment">// b a c a c</span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>Java通过定义变量申请空间，并通过变量名改变存储的值</p></blockquote><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ol><li>又叫成员变量 </li><li>作用域是整个类</li><li>可以不用默认赋值,系统会自动默认赋值,默认为null(Object)或者0(int…)</li></ol><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ol><li>方法内</li><li>作用域是定义位置到方法结束</li><li>不能不默认赋值,系统不会默认赋值</li></ol><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ol><li>(全局)定义的时候必须赋值(final),不然系统会默认赋值还无法改变</li><li>(局部)定义发时候可以不赋值,但是使用的时候必须赋值</li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul><li>+    加法 - 相加运算符两侧的值    A + B 等于 30</li><li>-    减法 - 左操作数减去右操作数    A – B 等于 -10</li><li>*    乘法 - 相乘操作符两侧的值    A * B等于200</li><li>/    除法 - 左操作数除以右操作数    B / A等于2</li><li>％    取余 - 左操作数除以右操作数的余数    B%A等于0</li><li>++    自增: 操作数的值增加1    B++ 或 ++B 等于 21（区别详见下文）</li><li>–    自减: 操作数的值减少1</li></ul><blockquote><p>注意 ++i 和 i++ 的关系,主要是 System.out.println(i++); 先输出 再+1,–i同理.</p></blockquote><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li>==    检查如果两个操作数的值是否相等，如果相等则条件为真。    （A == B）为假。</li><li>!=    检查如果两个操作数的值是否相等，如果值不相等则条件为真。    (A != B) 为真。</li><li>>     检查左操作数的值是否大于右操作数的值，如果是那么条件为真。    （A&gt; B）为假。</li><li>&lt;     检查左操作数的值是否小于右操作数的值，如果是那么条件为真。    （A &lt;B）为真。<br>-&gt;=    检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。    （A&gt; = B）为假。</li><li>&lt;=    检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。    （A &lt;= B）为真。</li></ul><blockquote><p>字符串的比较是对象的值比较要用 .equals()方法;直接 == 是比较内存里的地址</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="number">14</span>;</span><br><span class="line">Integer b = Integer.valueOf(<span class="number">14</span>);</span><br><span class="line">System.out.println(a == b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Integer c = <span class="number">1400</span>;</span><br><span class="line">Integer d = Integer.valueOf(<span class="number">1400</span>);</span><br><span class="line">System.out.println(c == d); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>在java.lang.Integer 是有缓存的 Integer.valueOf不会创建新的对象很有意思 而是直接返回 缓存中的对象</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</span></span><br><span class="line"><span class="comment"> * required, this method should generally be used in preference to</span></span><br><span class="line"><span class="comment"> * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</span></span><br><span class="line"><span class="comment"> * to yield significantly better space and time performance by</span></span><br><span class="line"><span class="comment"> * caching frequently requested values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method will always cache values in the range -128 to 127,</span></span><br><span class="line"><span class="comment"> * inclusive, and may cache other values outside of this range.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li>＆    如果相对应位都是1，则结果为1，否则为0    （A＆B），得到12，即0000 1100<br>|    如果相对应位都是 0，则结果为 0，否则为 1    （A | B）得到61，即 0011 1101</li><li>^    如果相对应位值相同，则结果为0，否则为1    （A ^ B）得到49，即 0011 0001</li><li>〜    按位取反运算符翻转操作数的每一位，即0变成1，1变成0。    （〜A）得到-61，即1100 0011</li><li>&lt;&lt;     按位左移运算符。左操作数按位左移右操作数指定的位数。    A &lt;&lt; 2得到240，即 1111 0000</li><li>>>     按位右移运算符。左操作数按位右移右操作数指定的位数。    A &gt;&gt; 2得到15即 1111</li><li>>>>     按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。    A&gt;&gt;&gt;2得到15即0000 1111</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span> </span><br><span class="line"><span class="keyword">int</span> b = <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">System.out.println(<span class="string">"a &amp; b = "</span> + c );</span><br><span class="line"></span><br><span class="line">c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">System.out.println(<span class="string">"a | b = "</span> + c );</span><br><span class="line"></span><br><span class="line">c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">System.out.println(<span class="string">"a ^ b = "</span> + c );</span><br><span class="line"></span><br><span class="line">c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></span><br><span class="line">System.out.println(<span class="string">"~a = "</span> + c );</span><br><span class="line"></span><br><span class="line">c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">System.out.println(<span class="string">"a &lt;&lt; 2 = "</span> + c );</span><br><span class="line"></span><br><span class="line">c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 1111 */</span></span><br><span class="line">System.out.println(<span class="string">"a &gt;&gt; 2  = "</span> + c );</span><br><span class="line"></span><br><span class="line">c = a &gt;&gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">System.out.println(<span class="string">"a &gt;&gt;&gt; 2 = "</span> + c );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出如下:</span></span><br><span class="line"><span class="comment">// a &amp; b = 12</span></span><br><span class="line"><span class="comment">// a | b = 61</span></span><br><span class="line"><span class="comment">// a ^ b = 49</span></span><br><span class="line"><span class="comment">// ~a = -61</span></span><br><span class="line"><span class="comment">// a &lt;&lt; 2 = 240</span></span><br><span class="line"><span class="comment">// a &gt;&gt; 2  = 15</span></span><br><span class="line"><span class="comment">// a &gt;&gt;&gt; 2 = 15</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>&amp;&amp;    称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。    （A &amp;&amp; B）为假。</li><li>| |    称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。    （A | | B）为真。</li><li><p>！    称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。    ！（A &amp;&amp; B）为真。</p></li><li><p>三元判断 i = t &gt; 0 ? 1 : 0   (t&gt;0时i=1，否则i=0) </p></li></ul><blockquote><p>从右向左运算，如a?b:c?d:e将按a?b:（c?d:e）执行（ac为返回true或false的表达式）</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="8大基本数据类型"><a href="#8大基本数据类型" class="headerlink" title="8大基本数据类型"></a>8大基本数据类型</h3><ul><li>byte 1字节 8bit 00000001</li><li>short 2字节</li><li>int 4字节</li><li><p>long 8字节</p></li><li><p>float 4字节 </p></li><li><p>double 8字节</p></li><li><p>char 2字节</p></li><li>boolean</li></ul><blockquote><p>boolean 由虚拟机决定 实际上只需要1bit 一位就能定义,在虚拟机里面是4字节来表示的(int) 主流32位的处理器（CPU）来说，一次处理数据是32位</p></blockquote><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><blockquote><p>对象-万物皆对象</p></blockquote><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><blockquote><p>类是对现实生活中一类具有共同特征的事物的抽象。Java就是有相同属性和相同方法的的对象的抽象 </p></blockquote><ol><li>类的属性(全局变量)</li></ol><blockquote><p>由基本类型(还有字符串)和其他引用对象类型(其他的类或者接口)组成</p></blockquote><ol start="2"><li>类的方法</li></ol><blockquote><p>描述对象的行为</p></blockquote><ol start="3"><li><p>类之间的关系</p><ul><li><p>关联 (组合,聚合)</p></li><li><p>泛化 (继承)</p></li><li><p>依赖 (接口,实现)</p></li></ul></li></ol><blockquote><p>依赖：类B作为参数被类A在某个method方法中,A依赖B</p></blockquote><blockquote><p>关联：被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量</p></blockquote><blockquote><p>聚合：整体与部分是可分的，代码层面，和关联关系是一致的，只能从语义级别来区分</p></blockquote><blockquote><p>组合：整体与部分之间是不可分的，代码层面，和关联关系是一致的，只能从语义级别来区分</p></blockquote><ol start="4"><li>类图</li></ol><blockquote><p> <a href="https://www.jianshu.com/p/57620b762160" target="_blank" rel="noopener">https://www.jianshu.com/p/57620b762160</a></p></blockquote><h4 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h4><h5 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h5><p>忽略一个主题中与当前目标无关的东西，专注的注意与当前目标有关的方面。(就是把现实世界中的某一类东西，提取出来，用程序代码表示，抽象出来的一般叫做类或者接口)。抽象并不打算了解全部问题，而是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一个数据抽象，而是过程抽象。</p><blockquote><p>数据抽象 –&gt;表示世界中一类事物的特征，就是对象的属性。比如鸟有翅膀，羽毛等(类的属性)</p></blockquote><blockquote><p>过程抽象 –&gt;表示世界中一类事物的行为，就是对象的行为。比如鸟会飞，会叫(类的方法)</p></blockquote><ul><li>具有相同属性和方法可以进行抽象</li><li>对象抽象到类，子类抽象到父类</li></ul><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><p>封装是面向对象的特征之一，是对象和类概念的主要特性。封装就是把过程和数据包围起来，对数据的访问只能通过已定义的界面。如私有变量，用set，get方法获取。</p><p>封装保证了模块具有较好的独立性，使得程序维护修改较为容易。对应用程序的修改仅限于类的内部，因而可以将应用程序修改带来的影响减少到最低限度。</p><blockquote><p>将对象的属性,和实现方式进行隐藏 实现封装：属性私有化，提供两个公有方法getter setter操作属性</p></blockquote><p>好处</p><ul><li>提高数据的安全性 对于不想改的数据只提供get方法不提供set方法,对于修改有限制的可以写在set方法内</li><li>允许类创建者修改内部结构而不影响类使用者的使用。</li><li>类的使用者就不能接触和改变类的实现细节，所以原创者就不用担心自己的作品会收到非法篡改，可确保他们不会对其他人造成影响。</li></ul><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>一种联结类的层次模型，并且允许和鼓励类的重用，提供一种明确表达共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类(子类)，原始类称为新类的基类(父类)。派生类可以从它的父类哪里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。因此可以说，继承为了重用父类代码，同时为实现多态性作准备。</p><ul><li>子类可以抽象父类的方法</li><li>子类有且仅有一个父类,如果没有指定默认是Object,Object是所有类的父类</li><li><p>子类继承父类中所有的public和protected类型的属性和成员方法（除了父类的构造函数，子类无法直接使用这个函数，即使它为public）</p><ol><li>子类不能继承父类的私有属性，但是如果子类中公有的方法影响到了父类私有属性，那么私有属性是能够被子类使用的。</li><li>如果父子类在同一包中，子类也继承父类default的属性和方法，否则不能</li><li>private: Java语言中对访问权限限制的最窄的修饰符，一般称之为“私有的”。被其修饰的属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。<br>default：同包类访问，当前包下的子包中的类，也不可访问；<br>protected: 也是同包类可访问，当前包下的子包中的类，也不可访问;但子类（不论是否同包）都可访问；<br>public： Java语言中访问限制最宽的修饰符，一般称之为“公共的”。被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包访问。</li><li>子类继承父类之后，子类所有的构造方法（无论无参有参）都会默认调用父类中的无参构造方法（除非使用super(参数)，这个会调用父类对应的有参构造函数）<blockquote><p>方案1:子类也写一个参数相同的构造方法，并在构造方法内写super(参数)这行代码<br>方案2:子类不写带super(参数)的构造函数（可以写带setter()的有参构造函数），父类再写一个无参的构造函数</p></blockquote></li><li>super关键字（this代表自己，super代表父类）</li></ol><blockquote><p>当父子类具有相同的方法时，会采用就近原则调用（全局/局部变量也适用，这也是为什么要在类中使用this的原因），若想在子类中调用父类的方法，使用super.method()（即子类重写父类方法的时候（重写才会有相同的方法）才有可能用到super）</p></blockquote><blockquote><p>子类不能直接调用父类有参构造方法（默认调用无参的），若想调用父类有参的构造函数要在子类有参构造函数里使用super(参数)，<strong>调用语句必须是第一句</strong></p><ol start="6"><li>初始化顺序：先静态后非静态，先父类后子类</li><li>java只支持单一继承，多重继承要利用接口来实现。(多扩展通过接口)</li></ol></blockquote></li></ul><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h5><p>多态是指允许不同类的对象对同一消息做出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活/抽象/行为共享/代码共享的优势，很好的解决了应用程序函数同名问题。总的来说，方法的重写，重载与动态链接构成多态性。Java引入多态的概念原因之一就是弥补类的单继承带来的功能不足。</p><blockquote><p>同一对象/属性/方法的不同表现形式</p></blockquote><blockquote><p>动态链接 –&gt;对于父类中定义的方法，如果子类中重写了该方法，那么父类类型的引用将调用子类中的这个方法，这就是动态链接。</p></blockquote><ol><li>编译时候 同一个方法 传入参数不同=不同方法</li><li>运行时候 定义父类 实现由子类(不同)实现</li></ol><blockquote><p>在父子类中，子类重写父类的方法，并在外面调用该方法时（但不知道哪个子类调用,传入参数不同则调用不同），可以使用多态优化。其他情况还是要用instanceof人工判断</p></blockquote><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><p>声明方式</p><p>确定情况下: int[] arr = new int[]{1,2,3}; // 不能填10</p><p>不确定情况下: int[] arr = new int[10]; // 10不能为不填</p></li><li><p>数组在堆中被分配的是连续的空间（栈中只存数组第一个内存空间的地址）</p></li></ul><blockquote><p>int[10],直接开10个空间给你</p></blockquote><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><blockquote><p>集合是用来存储数据的<strong>容器</strong>，其API包含在java.util包中</p></blockquote><h5 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h5><blockquote><p>特殊的的LinkedList 即实现了List接口也实现了Queue 所有有双重功能而ArrayList 只实现了List的接口</p></blockquote><h6 id="List"><a href="#List" class="headerlink" title="List"></a>List</h6><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20201214164734.png" alt=""></p><ul><li><p>Vector （顺序线性存储结构）</p><ol><li>顺序线性存储结构</li><li>动态数组安全</li><li>线程安全</li><li>查询,增加,删除都很慢</li><li>默认扩充为当前容量的2倍</li></ol></li></ul><blockquote><p>动态数组并不是真正意义上的动态的内存，而是一块连续的内存，当添加新的元素时，容量已经等于当前的大小的时候(存不下了)，执行下面3步：</p></blockquote><p>1.重新开辟一块大小为当前容量两倍的数组</p><p>2.把原数据拷贝过去</p><p>3.释放掉旧的数组</p><ul><li>ArrayList （顺序线性存储结构）</li></ul><blockquote><p>ArrayList的出现替代了Vector，同样顺序线性存储结构，动态数组实现，但线程不安全，查询效率高，增删效率低，默认扩充为原先的1.5倍</p></blockquote><ul><li>LinkedList （链式线性存储结构）</li></ul><blockquote><p>链式线性存储结构，双向链表实现，线程不安全，增删效率高，查询效率低</p></blockquote><h6 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h6><ul><li><p>HashSet （无序不可重复）</p></li><li><p>TreeSet（有序(大小顺序,不是下标顺序)</p></li></ul><blockquote><p>不可重复的数据：因为重写了SortedSet接口）。所以若存入不能按大小排序的对象(如Dog类的实例)将会报错，则此时需要使用排序器（内部/外部）使其能够排序</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;A&gt; s = <span class="keyword">new</span> TreeSet&lt;&gt;((o1, o2) -&gt; o2.getIndex() - o1.getIndex());</span><br><span class="line"></span><br><span class="line">s.add(<span class="keyword">new</span> A(<span class="number">1</span>,<span class="string">"a1"</span>));</span><br><span class="line">s.add(<span class="keyword">new</span> A(<span class="number">6</span>,<span class="string">"a2"</span>));</span><br><span class="line">s.add(<span class="keyword">new</span> A(<span class="number">3</span>,<span class="string">"a3"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (A a:s) &#123;</span><br><span class="line">    System.out.println(a.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer index;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a2 a3 a1</span></span><br></pre></td></tr></table></figure><p>遍历方式</p><ul><li><p>List for循环 Iterator迭代器 foreach循环</p></li><li><p>Set Iterator迭代器 foreach循环</p></li></ul><h5 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h5><blockquote><p>基于键值对映射,key不可以重复,value可以重复。插入相同的key会进行覆盖而不是抛弃</p></blockquote><blockquote><p>优点:便于查询 缺点:遍历较慢</p></blockquote><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><blockquote><p>Key特性和HashSet一样无序</p></blockquote><ul><li><p>JDK1.7时代</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI2NjA3NTc4Ng==&amp;mid=2652079746&amp;idx=1&amp;sn=fecda0bc2514750f6c933689c60e4603&amp;chksm=f1748d67c60304713e398424a679a998d948f5f909da2c7087396da87aad086fdb4d1e05be5b&amp;scene=21" target="_blank" rel="noopener">底层原理</a></p><p>总结:</p></li></ul><ol><li><p>底层实现:数组和链表</p></li><li><p>Hash算法：index = HashCode(Key) &amp; (Length - 1)</p></li></ol><blockquote><p>不用取模运算的原因是取模运算虽然简单但是效率很低，所以使用了位运算的方式。</p></blockquote><ol start="3"><li>默认长度16: 长度默认为2的幂</li></ol><blockquote><p>每次自动扩容或手动初始化时，长度必须是2的幂(原因就是由上述Hash算法决定的，只有Length等于2的幂上述Hash算法才能均匀分布)。16(Length)-1 = 15 二进制为 1111, 32(Length)-1 = 31 二进制为 11111;</p></blockquote><ol start="4"><li>HashMap.Size(HashMap的当前长度)   &gt;=  Capacity(HashMap的当前容量) * LoadFactor(负载因子，默认为0.75f)</li></ol><blockquote><p>Resize包含扩容和ReHash两个步骤，扩容就是新建一个大小为原先两倍的数组，Rehash就是调用transfer方法将原数组元素按照新的数组大小重新计算索引并迁移过去。</p></blockquote><p>  遇到的问题</p><ol><li>数据覆盖</li></ol><blockquote><p>数据覆盖问题：并发执行put操作时可能发生数据覆盖，假设两个线程A、B都在进行put操作，虽然值不一样但是hash函数计算出的插入下标是相同的，当线程A执行完hash计算后由于时间片耗尽导致被挂起，而线程B得到时间片完成了正常的插入，然后线程A获得时间片，由于之前已经进行了hash碰撞的判断，所以此时不会再进行判断，而是直接进行插入，这就导致了线程B插入的数据被线程A覆盖了。</p></blockquote><ol start="2"><li>死循环</li></ol><blockquote><p>Resize导致死循环(和数据丢失?)的问题：在调用transfer方法迁移的过程中使用了头插法导致了链表被翻转，这可能和之前被挂起的线程的指针指向出现形成链表环的可能。当形成链表环后，如果调用get查找一个不存在的key，而这个key的Hash结果恰好是存在链表环的那个，程序将会进入死循环；(并且一旦形成链表环，该链表环之后的元素没办法被迁移也就丢失了?)。<a href="https://mp.weixin.qq.com/s?__biz=MzI2NjA3NTc4Ng==&amp;mid=2652079766&amp;idx=1&amp;sn=879783e0b0ebf11bf1a5767933d4e61f&amp;chksm=f1748d73c6030465fe6b9b3fa7fc816d4704c91bfe46cb287aefccee459153d3287172d91d23&amp;scene=21" target="_blank" rel="noopener">链接</a></p></blockquote><ul><li>JDK1.8优化</li></ul><p>总结:</p><ol><li>底层实现</li></ol><blockquote><p>JDK1.7是数组+ 单链表的数据结构。JDK1.8是数组+链表/红黑树的数据结构，当数组容量未达到64时，和JDK1.7一样以2倍进行扩容，超过64之后再次插入元素时若对应的链表元素数量大于8就将该链表转换为红黑树(利用红黑树的特性，可以使get/put的操作时间复杂度最差为O(log n),提高了效率)，但如果红黑树中的元素个数小于6就会重新还原为链表</p></blockquote><ol start="2"><li>扩容 (直接计算)</li></ol><blockquote><p>JDK1.7扩容时仍采用HashCode（Key） &amp;  （Length - 1）的方法计算扩容后的位置，而JDK1.8则是通过判断Hash值的新增参与位是0还是1直接计算出扩容后的位置。</p></blockquote><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20201214172422.png" alt=""></p><ol start="3"><li>优化 (多线程数据覆盖依然存在)</li></ol><blockquote><p>JDK1.7用的是头插法，而JDK1.8及之后使用的都是尾插法，避免Resize时因为链表翻转出现链表环导致死循环的问题，解决了Resize导致死循环(和数据丢失?)的问题：移除了transfer方法，直接在resize函数中完成了数据迁移，并且是采用尾插法迁移元素保证链表顺序，杜绝了链表环形成的可能。</p></blockquote><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><blockquote><p>Key特性同TreeSet一样 自动按大小排序</p></blockquote><h5 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h5><ol><li><p>HashMap线程不安全，Hashtable线程安全;</p></li><li><p>HashMap效率高于Hashtable(因为为了保证线程安全Hashtable的实现方法里面都添加了synchronized关键字)</p></li><li><p>HashMap的key和value允许null值，但只能有一个key为null<br>Hashtable的key和value不允许为null值</p></li><li><p>HashMap把Hashtable的contains方法去掉了，只保留containsvalue和containsKey</p></li><li><p>哈希值的使用不同：<br>Hashtable直接使用对象的hashCode<br>HashMap重新计算hash值。</p></li></ol><h5 id="线程安全的使用HashMap"><a href="#线程安全的使用HashMap" class="headerlink" title="线程安全的使用HashMap"></a>线程安全的使用HashMap</h5><ol><li><p>Hashtable: 使用synchronized来锁住整个table来保证线程安全，所有线程竞争同一把锁，效率低</p></li><li><p>Collectionis的内部类Synchronized Map,也是通过对读写进行加锁操作来保证线程的安全,效率也是硬伤</p></li><li><p>ConcurrentHashMap (用这个吧)</p></li></ol><blockquote><p>JDK8之前，使用segment即锁分段技术(首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问)来保证线程安全，降低了锁的粒度，除非两个线程同时操作一个segement才会争抢锁。</p></blockquote><blockquote><p>JDK8后，摒弃了Segment，利用CAS+Synchronized来保证并发安全，将锁的粒度进一步细化，每一个Node对象作为了一个锁，除非两个线程同时操作一个Node,(注意是一个Node而不是一个Node链表)那么才会争抢同一把锁。支持的并发更多，性能更高。</p></blockquote><blockquote><blockquote><p>内存模型中，栈存放基本类型数据和引用类型数据的地址，堆存放引用类型数据</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中Reids事例</title>
      <link href="/4969/"/>
      <url>/4969/</url>
      
        <content type="html"><![CDATA[<h2 id="Java中Reids事例"><a href="#Java中Reids事例" class="headerlink" title="Java中Reids事例"></a>Java中Reids事例</h2><h3 id="Jedis-调用"><a href="#Jedis-调用" class="headerlink" title="Jedis 调用"></a>Jedis 调用</h3><h4 id="引入maven依赖"><a href="#引入maven依赖" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Main-java-代码调用"><a href="#Main-java-代码调用" class="headerlink" title="Main.java 代码调用"></a>Main.java 代码调用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        //连接本地的 Redis 服务</span><br><span class="line">        Jedis jedis = new Jedis(&quot;localhost&quot;);</span><br><span class="line">        System.out.println(&quot;连接成功&quot;);</span><br><span class="line"> </span><br><span class="line">        // 获取数据并输出</span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(&quot;*&quot;); </span><br><span class="line">        Iterator&lt;String&gt; it=keys.iterator() ;   </span><br><span class="line">        while(it.hasNext())&#123;   </span><br><span class="line">            String key = it.next();   </span><br><span class="line">            System.out.println(key);   </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>jedis 所有的API和redis的API一模一样 同理</p></blockquote><h4 id="hutool-工具调用"><a href="#hutool-工具调用" class="headerlink" title="hutool 工具调用"></a>hutool 工具调用</h4><p><a href="https://www.hutool.cn/" target="_blank" rel="noopener">官网</a>  <a href="https://www.hutool.cn/docs/#/db/NoSQL/Redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B0%81%E8%A3%85-RedisDS?id=%e6%9e%84%e5%bb%ba" target="_blank" rel="noopener">Redis工具类调用教程</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = RedisDS.create().getJedis();</span><br></pre></td></tr></table></figure><h3 id="SpringBoot-调用"><a href="#SpringBoot-调用" class="headerlink" title="SpringBoot 调用"></a>SpringBoot 调用</h3><h4 id="引入maven依赖-1"><a href="#引入maven依赖-1" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置地址"><a href="#配置地址" class="headerlink" title="配置地址"></a>配置地址</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.228</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    password:</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">6000</span><span class="string">ms</span></span><br></pre></td></tr></table></figure><h4 id="配置RedisConfig-java"><a href="#配置RedisConfig-java" class="headerlink" title="配置RedisConfig.java"></a>配置RedisConfig.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        StringRedisSerializer serializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        redisTemplate.setKeySerializer(serializer);</span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(serializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(serializer);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ValueOperations&lt;String,String&gt; <span class="title">valueOperations</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashOperations&lt;String,String,Object&gt; <span class="title">hashOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListOperations&lt;String,Object&gt; <span class="title">listOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SetOperations&lt;String,Object&gt; <span class="title">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ZSetOperations&lt;String,Object&gt; <span class="title">zSetOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br></pre></td></tr></table></figure><h3 id="自己实现的Redis分布式锁"><a href="#自己实现的Redis分布式锁" class="headerlink" title="自己实现的Redis分布式锁"></a>自己实现的Redis分布式锁</h3><h4 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/buy"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String key = <span class="string">"redisLuck"</span>;</span><br><span class="line">        String value = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        Boolean flag = redisTemplate.opsForValue().setIfAbsent(key, value, <span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="keyword">null</span> || !flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"抢购失败,请稍后再试."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            orderService.buy();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"抢购成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(redisTemplate.opsForValue().get(key), value)) &#123;</span><br><span class="line">                redisTemplate.delete(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用 SETNX 当锁,通过同一个Key去执行 通过设置超时防止死锁,通过UUID的value来防止多个抢购解除非自己加的锁</p><p>问题: 如果逻辑操作非常复杂 超过30S的话还是会出现(超卖)问题.因为redis是单线程的 没有非常非常高的并发性能</p></blockquote><h4 id="优化-Redisson"><a href="#优化-Redisson" class="headerlink" title="优化 (Redisson)"></a>优化 (Redisson)</h4><p>思路: 加锁的时候开另一个线程去检测 程序是否正常在运行,在的话 延迟锁的时间.</p><p>方法: 使用Redisson库</p><p>Redisson是架设在<a href="https://baike.baidu.com/item/Redis/6549233" target="_blank" rel="noopener">Redis</a>基础上的一个<a href="https://baike.baidu.com/item/Java/85979" target="_blank" rel="noopener">Java</a>驻内存数据<a href="https://baike.baidu.com/item/网格/265734" target="_blank" rel="noopener">网格</a>（In-Memory Data Grid）。【Redis官方推荐】</p><p>Redisson在基于NIO的<a href="https://baike.baidu.com/item/Netty/10061624" target="_blank" rel="noopener">Netty</a>框架上，充分的利用了Redis键值数据库提供的一系列优势，在Java实用工具包中常用接口的基础上，为使用者提供了一系列具有分布式特性的常用工具类。使得原本作为协调单机多线程并发程序的工具包获得了协调分布式多机多<a href="https://baike.baidu.com/item/线程/103101" target="_blank" rel="noopener">线程</a>并发系统的能力，大大降低了设计和研发大规模分布式系统的难度。同时结合各富特色的分布式服务，更进一步简化了分布式环境中程序相互之间的协作。</p><h4 id="例子优化"><a href="#例子优化" class="headerlink" title="例子优化"></a>例子优化</h4><h5 id="引入maven依赖-2"><a href="#引入maven依赖-2" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置Config-java-SpringBoot的配置"><a href="#配置Config-java-SpringBoot的配置" class="headerlink" title="配置Config.java (SpringBoot的配置)"></a>配置Config.java (SpringBoot的配置)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        String address = <span class="string">"redis://"</span>+host+<span class="string">":"</span>+port;</span><br><span class="line">        config.useSingleServer().setAddress(address);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="抢购优化代码"><a href="#抢购优化代码" class="headerlink" title="抢购优化代码"></a>抢购优化代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/buy"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String key = <span class="string">"redisLuck"</span>;</span><br><span class="line">    RLock lock = redissonClient.getLock(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock(<span class="number">30</span>,TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"抢购成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>lock.lock(30,TimeUnit.SECONDS); 会开个子线程 每10秒(默认设置时间的1/3)去检测是否正常运行 重新把超时时间改为30秒过期</p><p>注意:如果一次性很高的并发量请求过来的时候,后续的请求会被阻塞容易造成大量请求的堆积</p></blockquote><h4 id="注解优化"><a href="#注解优化" class="headerlink" title="注解优化"></a>注解优化</h4><p>通过spring aop 改造</p><h5 id="注解-RedisLuck"><a href="#注解-RedisLuck" class="headerlink" title="注解 RedisLuck"></a>注解 RedisLuck</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">public @interface RedisLuck &#123;</span><br><span class="line">    String name() default &quot;redis_luck&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="增加代码-RedisLuckAop-java"><a href="#增加代码-RedisLuckAop-java" class="headerlink" title="增加代码 RedisLuckAop.java"></a>增加代码 RedisLuckAop.java</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLuckAop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"@annotation(cn.com.yangzhenyu.redisboot.annotation.RedisLuck)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aopRedisson</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</span><br><span class="line">        RedisLuck redisLuck = signature.getMethod().getAnnotation(RedisLuck.class);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == redisLuck) &#123;</span><br><span class="line">            <span class="keyword">return</span> point.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RLock lock = redissonClient.getLock(redisLuck.value());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock(<span class="number">30</span>,TimeUnit.SECONDS);</span><br><span class="line">            result = point.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><p>在需要使用的加锁的方法上加上注解 @RedisLuck(“…”)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">@RedisLuck(&quot;luck&quot;)</span><br><span class="line">public void buy() &#123;</span><br><span class="line">// ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子: <a href="https://github.com/yttrium2016/reids-boot" target="_blank" rel="noopener">https://github.com/yttrium2016/reids-boot</a></p><h3 id="Redisson-实现布隆过滤器"><a href="#Redisson-实现布隆过滤器" class="headerlink" title="Redisson 实现布隆过滤器"></a>Redisson 实现布隆过滤器</h3><p>解决缓存穿透 </p><blockquote><p>缺点 : 但是布隆过滤器的缺点和优点一样明显。误算率是其中之一。随着存入的元素数量增加，误算率随之增加。常见的补救办法是建立一个小的白名单，存储那些可能被误判的元素。但是如果元素数量太少，则使用散列表足矣。</p><p>另外，一般情况下不能从布隆过滤器中删除元素。我们很容易想到把位列阵变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。然而要保证安全的删除元素并非如此简单。首先我们必须保证删除的元素的确在布隆过滤器里面. 这一点单凭这个过滤器是无法保证的。另外计数器回绕也会造成问题。</p><p>在降低误算率方面，有不少工作，使得出现了很多布隆过滤器的变种。</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">RBloomFilter&lt;Object&gt; filter = redissonClient.getBloomFilter(<span class="string">"blFilter"</span>);</span><br><span class="line"><span class="comment">// length 数据大致长度 v 误差率(越低,存储消耗越大)</span></span><br><span class="line">filter.tryInit(length, v);</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">filter.add(xx);</span><br><span class="line"><span class="comment">//检测是否存储</span></span><br><span class="line">filter.contains(xx); <span class="comment">//true | false</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.cnblogs.com/cpselvis/p/6265825.html" target="_blank" rel="noopener">布隆过滤器原理</a></p></blockquote><h3 id="SpringBoot整合Reids做Session共享"><a href="#SpringBoot整合Reids做Session共享" class="headerlink" title="SpringBoot整合Reids做Session共享"></a>SpringBoot整合Reids做Session共享</h3><p>集群环境中,在session保存登录人的信息的时候,如果2次请求在2台服务器上,拿不到前一次的登录信息,所以引入Redis做全局的统一的session保存登录信息</p><h4 id="创建一个基础的SpringBoot项目"><a href="#创建一个基础的SpringBoot项目" class="headerlink" title="创建一个基础的SpringBoot项目"></a>创建一个基础的SpringBoot项目</h4><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.com.yangzhenyu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-session<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>redis-session<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Redis Session project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="RedisController-java"><a href="#RedisController-java" class="headerlink" title="RedisController.java"></a>RedisController.java</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpSession httpSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置Session</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"set"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setSession</span><span class="params">(@RequestParam(required = <span class="keyword">false</span>)</span> String key, String value) </span>&#123;</span><br><span class="line">        HostInfo hostInfo = SystemUtil.getHostInfo();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(key)) &#123;</span><br><span class="line">            key = <span class="string">"key"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        httpSession.setAttribute(key, value);</span><br><span class="line">        <span class="keyword">return</span> port + <span class="string">":"</span> + <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取Session</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSession</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        HostInfo hostInfo = SystemUtil.getHostInfo();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(key)) &#123;</span><br><span class="line">            key = <span class="string">"key"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> port + <span class="string">":"</span> + httpSession.getAttribute(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line">spring.redis.port=6379</span><br></pre></td></tr></table></figure><h5 id="RedisSessionConfig-java"><a href="#RedisSessionConfig-java" class="headerlink" title="RedisSessionConfig.java"></a>RedisSessionConfig.java</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 开启RedisHttpSession</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSessionConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>已经完成了多个服务器共享Redis Session了</p></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p><img src="http://img.yzy.ink/image-20210305145133565.png" alt="image-20210305145133565"></p><blockquote><p>启动2个不同端口的项目</p></blockquote><p>使用nginx简单的负载均衡</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream appserver &#123;</span><br><span class="line">    server 127.0.0.1:8081;</span><br><span class="line">    server 127.0.0.1:8082;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 9000;</span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://appserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:[appserver] 不能有[_]下划线 不然TOMCAT高版本会报错</p></blockquote><p><img src="http://img.yzy.ink/image-20210305145446021.png" alt="image-20210305145446021"></p><h5 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h5><h6 id="设置值"><a href="#设置值" class="headerlink" title="设置值"></a>设置值</h6><p><img src="http://img.yzy.ink/image-20210305145553658.png" alt="image-20210305145553658"></p><h6 id="测试请求"><a href="#测试请求" class="headerlink" title="测试请求"></a>测试请求</h6><p><img src="http://img.yzy.ink/image-20210305145633190.png" alt="image-20210305145633190"></p><p><img src="http://img.yzy.ink/image-20210305145652905.png" alt="image-20210305145652905"></p><blockquote><p>2台机器访问都能拿到统一的数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本指令操作</title>
      <link href="/41316/"/>
      <url>/41316/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis基本指令操作"><a href="#Redis基本指令操作" class="headerlink" title="Redis基本指令操作"></a>Redis基本指令操作</h2><blockquote><p>来源于网上 自己编写 做为记录 方便自己查看</p></blockquote><h3 id="key-操作"><a href="#key-操作" class="headerlink" title="key 操作"></a>key 操作</h3><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">del key1 key2 ... Keyn</span><br><span class="line">作用: 删除1个或多个键</span><br><span class="line">返回值: 不存在的key忽略掉,返回真正删除的key的数量</span><br></pre></td></tr></table></figure><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename key newkey</span><br><span class="line">作用: 给key赋一个新的key名</span><br><span class="line">注:如果newkey已存在,则newkey的原值被覆盖</span><br></pre></td></tr></table></figure><h4 id="renamenx"><a href="#renamenx" class="headerlink" title="renamenx"></a>renamenx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">renamenx key newkey  </span><br><span class="line">作用: 把key改名为newkey</span><br><span class="line">返回: 发生修改返回1,未发生修改返回0</span><br><span class="line">注: nx--&gt; not exists, 即, newkey不存在时,作改名动作</span><br></pre></td></tr></table></figure><h4 id="move"><a href="#move" class="headerlink" title="move"></a>move</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">move key db </span><br><span class="line">作用: 移动key到库db</span><br><span class="line">例子:</span><br><span class="line">redis 127.0.0.1:6379[1]&gt; select 2</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379[2]&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">redis 127.0.0.1:6379[2]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;cc&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;b&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; move cc 2</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; select 2</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379[2]&gt; keys *</span><br><span class="line">1) &quot;cc&quot;</span><br><span class="line">redis 127.0.0.1:6379[2]&gt; get cc</span><br><span class="line">&quot;3&quot;</span><br></pre></td></tr></table></figure><blockquote><p>(注意: 一个redis进程,打开了不止一个数据库, 默认打开16个数据库,从0到15编号,<br>如果想打开更多数据库,可以从配置文件修改)</p></blockquote><h4 id="keys-pattern"><a href="#keys-pattern" class="headerlink" title="keys pattern"></a>keys pattern</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询相应的key</span><br><span class="line">在redis里,允许模糊查询key</span><br><span class="line">有3个通配符 *, ? ,[]</span><br><span class="line">*: 通配任意多个字符</span><br><span class="line">?: 通配单个字符</span><br><span class="line">[]: 通配括号内的某1个字符</span><br><span class="line">例子:</span><br><span class="line">redis 127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">redis 127.0.0.1:6379&gt; mset one 1 two 2 three 3 four 4</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; keys o*</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; key *o</span><br><span class="line">(error) ERR unknown command &apos;key&apos;</span><br><span class="line">redis 127.0.0.1:6379&gt; keys *o</span><br><span class="line">1) &quot;two&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; keys ???</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;two&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; keys on?</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; set ons yes</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; keys on[e]</span><br><span class="line">1)&quot;one&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; keys [o]??</span><br><span class="line">1) &quot;one&quot;</span><br></pre></td></tr></table></figure><h4 id="randomkey"><a href="#randomkey" class="headerlink" title="randomkey"></a>randomkey</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">随机返回一个key</span><br><span class="line">redis 127.0.0.1:6379&gt; randomkey</span><br><span class="line">&quot;one&quot;</span><br></pre></td></tr></table></figure><h4 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exists key</span><br><span class="line">判断key是否存在,返回1/0</span><br><span class="line">redis 127.0.0.1:6379&gt; exists one</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type key</span><br><span class="line">返回key存储的值的类型</span><br><span class="line">有string,link,set,order set, hash</span><br></pre></td></tr></table></figure><h4 id="ttl"><a href="#ttl" class="headerlink" title="ttl"></a>ttl</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ttl key</span><br><span class="line">作用: 查询key的生命周期</span><br><span class="line">返回: 秒数</span><br><span class="line"></span><br><span class="line">注:对于不存在的key或已过期的key/不过期的key,都返回-1</span><br><span class="line">Redis2.8以后的中,对于不存在的key,返回-2</span><br></pre></td></tr></table></figure><h4 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expire key 整型值</span><br><span class="line">作用: 设置key的生命周期,以秒为单位</span><br></pre></td></tr></table></figure><blockquote><p>同理: pexpire key 秒, 设置生命周期 ,pttl  key, 以毫秒返回生命周期</p></blockquote><h4 id="persist"><a href="#persist" class="headerlink" title="persist"></a>persist</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">persist key</span><br><span class="line">作用: 把指定key置为永久有效</span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>字符串</p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set key value [ex 秒数] / [px 毫秒数]  [nx] /[xx]</span><br><span class="line"></span><br><span class="line">如: set a 1 ex 10 , 10秒有效 a=1</span><br><span class="line">Set a 1 px 9000  , 9秒有效 a=1</span><br><span class="line">注: 如果ex,px同时写,以后面的有效期为准</span><br><span class="line">如 set a 1 ex 100 px 9000, 实际有效期是9000毫秒 a=1</span><br><span class="line"></span><br><span class="line">nx: 表示key不存在时,执行操作</span><br><span class="line">xx: 表示key存在时,执行操作</span><br></pre></td></tr></table></figure><h4 id="mset"><a href="#mset" class="headerlink" title="mset"></a>mset</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mset  multi set , 一次性设置多个键值</span><br><span class="line">例: mset key1 v1 key2 v2 ....</span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get key </span><br><span class="line">作用:获取key的值</span><br></pre></td></tr></table></figure><h4 id="mget"><a href="#mget" class="headerlink" title="mget"></a>mget</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mget key1 key2 ..keyn</span><br><span class="line">作用:获取多个key的值</span><br></pre></td></tr></table></figure><h4 id="setrange"><a href="#setrange" class="headerlink" title="setrange"></a>setrange</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setrange key offset value</span><br><span class="line">作用:把字符串的offset偏移字节,改成value</span><br><span class="line">redis 127.0.0.1:6379&gt; set greet hello</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; setrange greet 2 x</span><br><span class="line">(integer) 5</span><br><span class="line">redis 127.0.0.1:6379&gt; get greet</span><br><span class="line">&quot;hexlo&quot;</span><br><span class="line"></span><br><span class="line">注意: 如果偏移量&gt;字符长度, 该字符自动补0x00</span><br><span class="line">127.0.0.1:6379&gt; set k1 12345</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setrange k1 8 6</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;12345\x00\x00\x006&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">append key value</span><br><span class="line">作用: 把value追加到key的原值上</span><br></pre></td></tr></table></figure><h4 id="getrange"><a href="#getrange" class="headerlink" title="getrange"></a>getrange</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getrange key start stop</span><br><span class="line">作用: 是获取字符串中 [start, stop]范围的值</span><br><span class="line">注意: 对于字符串的下标,左数从0开始,右数从-1开始</span><br><span class="line">redis 127.0.0.1:6379&gt; set title &apos;chinese&apos;</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; getrange title 0 3</span><br><span class="line">&quot;chin&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; getrange title 1 -2</span><br><span class="line">&quot;hines&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意: </p><p>1: start&gt;=length, 则返回空字符串</p><p>2: stop&gt;=length,则截取至字符结尾</p><p>3: 如果start 所处位置在stop右边, 返回空字符串</p></blockquote><h4 id="getset"><a href="#getset" class="headerlink" title="getset"></a>getset</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getset key newvalue</span><br><span class="line">作用: 获取并返回旧值,设置新值</span><br><span class="line">redis 127.0.0.1:6379&gt; set cnt 0</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; getset cnt 1</span><br><span class="line">&quot;0&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; getset cnt 2</span><br><span class="line">&quot;1&quot;</span><br></pre></td></tr></table></figure><h4 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">incr key</span><br><span class="line">作用: 指定的key的值加1,并返回加1后的值</span><br></pre></td></tr></table></figure><blockquote><p>注意:<br>1:不存在的key当成0,再incr操作<br>2: 范围为64有符号</p></blockquote><h4 id="incrby"><a href="#incrby" class="headerlink" title="incrby"></a>incrby</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">incrby key number</span><br><span class="line">作用: 指定的key的值加number,并返回加number后的值</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set v 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incrby v 100</span><br><span class="line">(integer) 102</span><br></pre></td></tr></table></figure><h4 id="incrbyfloat"><a href="#incrbyfloat" class="headerlink" title="incrbyfloat"></a>incrbyfloat</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">incrbyfloat key floatnumber</span><br><span class="line">作用: 指定的key的值加floatnumber,并返回加floatnumber后的值</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; incrbyfloat v 3.5</span><br><span class="line">&quot;105.5&quot;</span><br></pre></td></tr></table></figure><h4 id="decr"><a href="#decr" class="headerlink" title="decr"></a>decr</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decr key</span><br><span class="line">作用: 指定的key的值减1,并返回减1后的值</span><br></pre></td></tr></table></figure><h4 id="decrby"><a href="#decrby" class="headerlink" title="decrby"></a>decrby</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decrby key number</span><br><span class="line">作用: 指定的key的值减number,并返回减number后的值</span><br></pre></td></tr></table></figure><h4 id="getbit"><a href="#getbit" class="headerlink" title="getbit"></a>getbit</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getbit key offset</span><br><span class="line">作用:获取值的二进制表示,对应位上的值(从左,从0编号)</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; set char A</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; getbit char 1</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; getbit char 2</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; getbit char 7</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h4 id="setbit"><a href="#setbit" class="headerlink" title="setbit"></a>setbit</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setbit  key offset value</span><br><span class="line">设置offset对应二进制位上的值</span><br><span class="line">返回: 该位上的旧值</span><br></pre></td></tr></table></figure><blockquote><p>注意:<br>1:如果offset过大,则会在中间填充0,<br>2: offset最大大到多少<br>3:offset最大2^32-1,可推出最大的的字符串为512M</p></blockquote><h4 id="bitop"><a href="#bitop" class="headerlink" title="bitop"></a>bitop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitop operation destkey key1 [key2 ...]</span><br><span class="line">对key1,key2..keyN作operation,并将结果保存到 destkey 上。</span><br><span class="line">operation 可以是 AND 、 OR 、 NOT 、 XOR</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; setbit lower 7 0</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; setbit lower 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">redis 127.0.0.1:6379&gt; get lower</span><br><span class="line">&quot; &quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; set char Q</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; get char</span><br><span class="line">&quot;Q&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; bitop or char char lower</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; get char</span><br><span class="line">&quot;q&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注意: 对于NOT操作, key不能多个</p></blockquote><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><h4 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lpush key value </span><br><span class="line">作用: 把值插入到链接头部</span><br></pre></td></tr></table></figure><h4 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpop key</span><br><span class="line">作用: 返回并删除链表头元素</span><br></pre></td></tr></table></figure><h4 id="rpush"><a href="#rpush" class="headerlink" title="rpush"></a>rpush</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lpush key value </span><br><span class="line">作用: 把值插入到链接尾部</span><br></pre></td></tr></table></figure><h4 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpop key</span><br><span class="line">作用: 返回并删除链表尾元素</span><br></pre></td></tr></table></figure><h4 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrange key start stop</span><br><span class="line">作用: 返回链表中[start ,stop]中的元素</span><br><span class="line">规律: 左数从0开始,右数从-1开始</span><br></pre></td></tr></table></figure><h4 id="lrem"><a href="#lrem" class="headerlink" title="lrem"></a>lrem</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrem key count value</span><br><span class="line">作用: 从key链表中删除 value值</span><br><span class="line">注: 删除count的绝对值个value后结束</span><br><span class="line">Count&gt;0 从表头删除</span><br><span class="line">Count&lt;0 从表尾删除</span><br></pre></td></tr></table></figure><h4 id="ltrim"><a href="#ltrim" class="headerlink" title="ltrim"></a>ltrim</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ltrim key start stop</span><br><span class="line">作用: 剪切key对应的链接,切[start,stop]一段,并把该段重新赋给key</span><br></pre></td></tr></table></figure><h4 id="lindex"><a href="#lindex" class="headerlink" title="lindex"></a>lindex</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lindex key index</span><br><span class="line">作用: 返回index索引上的值,</span><br><span class="line">如  lindex key 2</span><br></pre></td></tr></table></figure><h4 id="llen"><a href="#llen" class="headerlink" title="llen"></a>llen</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">llen key</span><br><span class="line">作用:计算链接表的元素个数</span><br><span class="line">redis 127.0.0.1:6379&gt; llen v</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h4 id="linsert"><a href="#linsert" class="headerlink" title="linsert"></a>linsert</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linsert  key after|before search value</span><br><span class="line">作用: 在key链表中寻找’search’,并在search值之前|之后,.插入value</span><br><span class="line">注: 一旦找到一个search后,命令就结束了,因此不会插入多个value</span><br></pre></td></tr></table></figure><h4 id="rpoplpush"><a href="#rpoplpush" class="headerlink" title="rpoplpush"></a>rpoplpush</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpoplpush source dest</span><br><span class="line">作用: 把source的尾部拿出,放在dest的头部,</span><br><span class="line">并返回 该单元值</span><br></pre></td></tr></table></figure><h4 id="blpop"><a href="#blpop" class="headerlink" title="blpop"></a>blpop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blpop key timeout</span><br><span class="line">作用:等待弹出key的头元素, </span><br><span class="line">Timeout为等待超时时间</span><br><span class="line">如果timeout为0,则一直等待</span><br></pre></td></tr></table></figure><h4 id="brpop"><a href="#brpop" class="headerlink" title="brpop"></a>brpop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brpop key timeout</span><br><span class="line">作用:等待弹出key的头元素, </span><br><span class="line">Timeout为等待超时时间</span><br><span class="line">如果timeout为0,则一直等待</span><br></pre></td></tr></table></figure><blockquote><p>长轮询Ajax,在线聊天时,能够用到 </p></blockquote><h3 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h3><p>集合的性质: 唯一性,无序性,确定性</p><p>注: 在string和list的命令中,可以通过range 来访问string中的某几个字符或某几个元素</p><p>但,因为集合的无序性,无法通过下标或范围来访问部分元素.</p><p>因此想看元素,要么随机先一个,要么全选</p><h4 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd key value1 value2</span><br><span class="line">作用: 往集合key中增加元素</span><br></pre></td></tr></table></figure><h4 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srem value1 value2</span><br><span class="line">作用: 删除集合中集为 value1 value2的元素</span><br><span class="line">返回值: 忽略不存在的元素后,真正删除掉的元素的个数</span><br></pre></td></tr></table></figure><h4 id="spop"><a href="#spop" class="headerlink" title="spop"></a>spop</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spop key</span><br><span class="line">作用: 返回并删除集合中key中1个随机元素</span><br></pre></td></tr></table></figure><h4 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srandmember key</span><br><span class="line">作用: 返回集合key中,随机的1个元素.</span><br></pre></td></tr></table></figure><h4 id="sismember"><a href="#sismember" class="headerlink" title="sismember"></a>sismember</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sismember key  value</span><br><span class="line">作用: 判断value是否在key集合中</span><br><span class="line">是返回1,否返回0</span><br></pre></td></tr></table></figure><h4 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smembers key</span><br><span class="line">作用: 返回集中中所有的元素</span><br></pre></td></tr></table></figure><h4 id="scard"><a href="#scard" class="headerlink" title="scard"></a>scard</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scard key</span><br><span class="line">作用: 返回集合中元素的个数</span><br></pre></td></tr></table></figure><h4 id="smove"><a href="#smove" class="headerlink" title="smove"></a>smove</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smove source dest value</span><br><span class="line">作用:把source中的value删除,并添加到dest集合中</span><br></pre></td></tr></table></figure><h4 id="sinter"><a href="#sinter" class="headerlink" title="sinter"></a>sinter</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sinter  key1 key2 key3</span><br><span class="line">作用: 求出key1 key2 key3 三个集合中的交集,并返回</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; sadd s1 0 2 4 6</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd s2 1 2 3 4</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; sadd s3 4 8 9 12</span><br><span class="line">(integer) 4</span><br><span class="line">redis 127.0.0.1:6379&gt; sinter s1 s2 s3</span><br><span class="line">1) &quot;4&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; sinter s3 s1 s2</span><br><span class="line">1)&quot;4&quot;</span><br></pre></td></tr></table></figure><h4 id="sinterstore"><a href="#sinterstore" class="headerlink" title="sinterstore"></a>sinterstore</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sinterstore dest key1 key2 key3</span><br><span class="line">作用: 求出key1 key2 key3 三个集合中的交集,并赋给dest</span><br></pre></td></tr></table></figure><h4 id="suion"><a href="#suion" class="headerlink" title="suion"></a>suion</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">suion key1 key2.. Keyn</span><br><span class="line">作用: 求出key1 key2 keyn的并集,并返回</span><br></pre></td></tr></table></figure><h4 id="sdiff"><a href="#sdiff" class="headerlink" title="sdiff"></a>sdiff</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sdiff key1 key2 key3 </span><br><span class="line">作用: 求出key1与key2 key3的差集</span><br><span class="line">即 key1 - key2 - key3</span><br><span class="line">即 key1 - (key2 + key3)</span><br></pre></td></tr></table></figure><h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>有序集合</p><h4 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd key score1 value1 score2 value2 ..</span><br><span class="line">添加元素</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; zadd stu 18 lily 19 hmm 20 lilei 21 lilei</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure><h4 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrem key value1 value2 ..</span><br><span class="line">作用: 删除集合中的元素</span><br></pre></td></tr></table></figure><h4 id="zremrangebyscore"><a href="#zremrangebyscore" class="headerlink" title="zremrangebyscore"></a>zremrangebyscore</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zremrangebyscore key min max</span><br><span class="line">作用: 按照socre来删除元素,删除score在[min,max]之间的</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; zremrangebyscore stu 4 10</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; zrange stu 0 -1</span><br><span class="line">1) &quot;f&quot;</span><br></pre></td></tr></table></figure><h4 id="zremrangebyrank"><a href="#zremrangebyrank" class="headerlink" title="zremrangebyrank"></a>zremrangebyrank</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zremrangebyrank key start end</span><br><span class="line">作用: 按排名删除元素,删除名次在[start,end]之间的</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; zremrangebyrank stu 0 1</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; zrange stu 0 -1</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;e&quot;</span><br><span class="line">3) &quot;f&quot;</span><br><span class="line">4) &quot;g&quot;</span><br></pre></td></tr></table></figure><h4 id="zrank"><a href="#zrank" class="headerlink" title="zrank"></a>zrank</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrank key member</span><br><span class="line">查询member的排名(升续 0名开始)</span><br></pre></td></tr></table></figure><h4 id="zrevrank"><a href="#zrevrank" class="headerlink" title="zrevrank"></a>zrevrank</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrevrank key memeber</span><br><span class="line">查询 member的排名(降续 0名开始)</span><br></pre></td></tr></table></figure><h4 id="zrange"><a href="#zrange" class="headerlink" title="zrange"></a>zrange</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrange key start stop [WITHSCORES]</span><br><span class="line">把集合排序后,返回名次[start,stop]的元素</span><br><span class="line">默认是升续排列 </span><br><span class="line">Withscores 是把score也打印出来</span><br></pre></td></tr></table></figure><h4 id="zrevrange"><a href="#zrevrange" class="headerlink" title="zrevrange"></a>zrevrange</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrevrange key start stop</span><br><span class="line">作用:把集合降序排列,取名字[start,stop]之间的元素</span><br></pre></td></tr></table></figure><h4 id="zrangebyscore"><a href="#zrangebyscore" class="headerlink" title="zrangebyscore"></a>zrangebyscore</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrangebyscore  key min max [withscores] limit offset N</span><br><span class="line">作用: 集合(升续)排序后,取score在[min,max]内的元素,</span><br><span class="line">并跳过 offset个, 取出N个</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; zadd stu 1 a 3 b 4 c 9 e 12 f 15 g</span><br><span class="line">(integer) 6</span><br><span class="line">redis 127.0.0.1:6379&gt; zrangebyscore stu 3 12 limit 1 2 withscores</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;e&quot;</span><br><span class="line">4) &quot;9&quot;</span><br></pre></td></tr></table></figure><h4 id="zcard"><a href="#zcard" class="headerlink" title="zcard"></a>zcard</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zcard key</span><br><span class="line">返回元素个数</span><br></pre></td></tr></table></figure><h4 id="zcount"><a href="#zcount" class="headerlink" title="zcount"></a>zcount</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zcount key min max</span><br><span class="line">返回[min,max] 区间内元素的数量</span><br></pre></td></tr></table></figure><h4 id="zinterstore"><a href="#zinterstore" class="headerlink" title="zinterstore"></a>zinterstore</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zinterstore destination numkeys key1 [key2 ...]  [WEIGHTS weight [weight ...]]  [AGGREGATE SUM|MIN|MAX]</span><br><span class="line"></span><br><span class="line">求key1,key2的交集,key1,key2的权重分别是 weight1,weight2</span><br><span class="line">聚合方法用: sum |min|max</span><br><span class="line">聚合的结果,保存在dest集合内</span><br><span class="line"></span><br><span class="line">注意: weights ,aggregate如何理解?</span><br><span class="line">答: 如果有交集, 交集元素又有socre,score怎么处理?</span><br><span class="line">Aggregate sum-&gt;score相加   , min 求最小score, max 最大score</span><br><span class="line"></span><br><span class="line">另: 可以通过weigth设置不同key的权重, 交集时,socre * weights</span><br><span class="line"></span><br><span class="line">例子:</span><br><span class="line">详见下例</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd z1 2 a 3 b 4 c</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; zadd z2 2.5 a 1 b 8 d</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; zinterstore tmp 2 z1 z2</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1 withscores</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;4.5&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; zinterstore tmp 2 z1 z2 aggregate sum</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1 withscores</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;4.5&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; zinterstore tmp 2 z1 z2 aggregate min</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1 withscores</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; zinterstore tmp 2 z1 z2 weights 1 2</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; zrange tmp 0 -1 withscores</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">4) &quot;7&quot;</span><br></pre></td></tr></table></figure><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>哈希数据</p><h4 id="hset"><a href="#hset" class="headerlink" title="hset"></a>hset</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hset key field value</span><br><span class="line">作用: 把key中 filed域的值设为value</span><br><span class="line">注:如果没有field域,直接添加,如果有,则覆盖原field域的值</span><br></pre></td></tr></table></figure><h4 id="hmset"><a href="#hmset" class="headerlink" title="hmset"></a>hmset</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hmset key field1 value1 [field2 value2 field3 value3 ......fieldn valuen]</span><br><span class="line">作用: 设置field1-&gt;N 个域, 对应的值是value1-&gt;N</span><br></pre></td></tr></table></figure><h4 id="hget"><a href="#hget" class="headerlink" title="hget"></a>hget</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hget key field</span><br><span class="line">作用: 返回key中field域的值</span><br></pre></td></tr></table></figure><h4 id="hmget"><a href="#hmget" class="headerlink" title="hmget"></a>hmget</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hmget key field1 field2 fieldN</span><br><span class="line">作用: 返回key中field1 field2 fieldN域的值</span><br></pre></td></tr></table></figure><h4 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hgetall key</span><br><span class="line">作用:返回key中,所有域与其值</span><br></pre></td></tr></table></figure><h4 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hdel key field</span><br><span class="line">作用: 删除key中 field域</span><br></pre></td></tr></table></figure><h4 id="hlen"><a href="#hlen" class="headerlink" title="hlen"></a>hlen</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hlen key</span><br><span class="line">作用: 返回key中元素的数量</span><br></pre></td></tr></table></figure><h4 id="hexists"><a href="#hexists" class="headerlink" title="hexists"></a>hexists</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexists key field</span><br><span class="line">作用: 判断key中有没有field域</span><br></pre></td></tr></table></figure><h4 id="hinrby"><a href="#hinrby" class="headerlink" title="hinrby"></a>hinrby</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hinrby key field value</span><br><span class="line">作用: 是把key中的field域的值增长整型值value</span><br></pre></td></tr></table></figure><h4 id="hinrby-1"><a href="#hinrby-1" class="headerlink" title="hinrby"></a>hinrby</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hinrby float  key field value</span><br><span class="line">作用: 是把key中的field域的值增长浮点值value</span><br></pre></td></tr></table></figure><h4 id="hkeys"><a href="#hkeys" class="headerlink" title="hkeys"></a>hkeys</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hkeys key</span><br><span class="line">作用: 返回key中所有的field</span><br></pre></td></tr></table></figure><h4 id="kvals"><a href="#kvals" class="headerlink" title="kvals"></a>kvals</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kvals key</span><br><span class="line">作用: 返回key中所有的value</span><br></pre></td></tr></table></figure><h3 id="其他重要"><a href="#其他重要" class="headerlink" title="其他重要"></a>其他重要</h3><h4 id="rpoplpush-场景-task-bak-双链表完成安全队列"><a href="#rpoplpush-场景-task-bak-双链表完成安全队列" class="headerlink" title="rpoplpush 场景: task + bak 双链表完成安全队列"></a>rpoplpush 场景: task + bak 双链表完成安全队列</h4><p>Task列表               </p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>a</td><td>b</td><td>c</td></tr></tbody></table><p>bak列表</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>业务逻辑:</p><ol><li><p>Rpoplpush task bak</p></li><li><p>接收返回值,并做业务处理</p></li><li><p>如果成功,rpop bak 清除任务. 如不成功,下次从bak表里取任务</p></li></ol><h4 id="Redis中的事务"><a href="#Redis中的事务" class="headerlink" title="Redis中的事务"></a>Redis中的事务</h4><p>Redis支持简单的事务</p><p><strong>Redis与 mysql事务的对比</strong></p><table><thead><tr><th></th><th>Mysql</th><th>Redis</th></tr></thead><tbody><tr><td>开启</td><td>start transaction</td><td>muitl</td></tr><tr><td>语句</td><td>普通sql</td><td>普通命令</td></tr><tr><td>失败</td><td>rollback 回滚</td><td>discard 取消</td></tr><tr><td>成功</td><td>commit</td><td>exec</td></tr></tbody></table><blockquote><p>注: rollback与discard 的区别</p><p>如果已经成功执行了2条语句, 第3条语句出错.</p><p>Rollback后,前2条的语句影响消失.</p><p>Discard只是结束本次事务,前2条语句造成的影响仍然还在</p></blockquote><p><strong>例子:</strong></p><p>我正在买票</p><p>Ticket -1 , money -100</p><p>而票只有1张, 如果在我multi之后,和exec之前, 票被别人买了—即ticket变成0了.</p><p>我该如何观察这种情景,并不再提交</p><p>悲观的想法: </p><p>世界充满危险,肯定有人和我抢, 给 ticket上锁, 只有我能操作. [悲观锁]</p><p>乐观的想法:</p><p>没有那么人和我抢,因此,我只需要注意,</p><p>–有没有人更改ticket的值就可以了 [乐观锁]</p><p><strong>Redis的事务中,启用的是乐观锁,只负责监测key没有被改动.</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">具体的命令</span><br><span class="line"></span><br><span class="line">watch</span><br><span class="line">watch key1 key2  ... keyN</span><br><span class="line">作用:监听key1 key2..keyN有没有变化,如果有变, 则事务取消</span><br><span class="line"></span><br><span class="line">unwatch</span><br><span class="line">unwatch key</span><br><span class="line">作用: 取消所有watch监听</span><br><span class="line"></span><br><span class="line">例: </span><br><span class="line">redis 127.0.0.1:6379&gt; watch ticket</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">redis 127.0.0.1:6379&gt; decr ticket</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:6379&gt; decrby money 100</span><br><span class="line">QUEUED</span><br><span class="line">redis 127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)   // 返回nil,说明监视的ticket已经改变了,事务就取消了.</span><br><span class="line">redis 127.0.0.1:6379&gt; get ticket</span><br><span class="line">&quot;0&quot;</span><br><span class="line">redis 127.0.0.1:6379&gt; get money</span><br><span class="line">&quot;200&quot;</span><br></pre></td></tr></table></figure><h4 id="Redis消息订阅"><a href="#Redis消息订阅" class="headerlink" title="Redis消息订阅"></a>Redis消息订阅</h4><p>使用办法:</p><p>订阅端: Subscribe 频道名称</p><p>发布端: publish 频道名称 发布内容</p><p><strong>例子</strong></p><p>客户端</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; subscribe news</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;news&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;news&quot;</span><br><span class="line">3) &quot;good good study&quot;</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;news&quot;</span><br><span class="line">3) &quot;day day up&quot;</span><br></pre></td></tr></table></figure><p>服务器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; publish news &apos;good good study&apos;</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; publish news &apos;day day up&apos;</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><blockquote><p>订阅后只发一次 不能保证网络波动导致的信息丢失 别用了 了解就好</p></blockquote><h4 id="Redis服务器端命令"><a href="#Redis服务器端命令" class="headerlink" title="Redis服务器端命令"></a>Redis服务器端命令</h4><h5 id="time"><a href="#time" class="headerlink" title="time"></a>time</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">显示服务器时间 , 时间戳(秒), 微秒数</span><br><span class="line">127.0.0.1:6379&gt; time</span><br><span class="line">1) &quot;1614238268&quot;</span><br><span class="line">2) &quot;900549&quot;</span><br></pre></td></tr></table></figure><h5 id="dbsize"><a href="#dbsize" class="headerlink" title="dbsize"></a>dbsize</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前数据库的key的数量</span><br><span class="line">127.0.0.1:6379&gt; dbsize</span><br><span class="line">(integer) 9</span><br><span class="line">127.0.0.1:6379&gt; select 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; dbsize</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><h5 id="BGREWRITEAOF"><a href="#BGREWRITEAOF" class="headerlink" title="BGREWRITEAOF"></a>BGREWRITEAOF</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后台进程重写AOF</span><br></pre></td></tr></table></figure><h5 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">后台保存rdb快照</span><br></pre></td></tr></table></figure><h5 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">保存rdb快照</span><br></pre></td></tr></table></figure><h5 id="LASTSAVE"><a href="#LASTSAVE" class="headerlink" title="LASTSAVE"></a>LASTSAVE</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上次保存时间</span><br></pre></td></tr></table></figure><h5 id="Slaveof-master-Host-port"><a href="#Slaveof-master-Host-port" class="headerlink" title="Slaveof master-Host port"></a>Slaveof master-Host port</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把当前实例设为master的slave</span><br></pre></td></tr></table></figure><h5 id="Flushall"><a href="#Flushall" class="headerlink" title="Flushall"></a>Flushall</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">清空所有库所有键</span><br></pre></td></tr></table></figure><h5 id="Flushdb"><a href="#Flushdb" class="headerlink" title="Flushdb"></a>Flushdb</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">清空当前库所有键</span><br></pre></td></tr></table></figure><h5 id="Showdown"><a href="#Showdown" class="headerlink" title="Showdown"></a>Showdown</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Showdown [save/nosave]</span><br><span class="line"></span><br><span class="line">注: 如果不小心运行了flushall, 立即 shutdown nosave ,关闭服务器</span><br><span class="line">然后 手工编辑aof文件, 去掉文件中的 “flushall ”相关行, 然后开启服务器,就可以导入回原来数据.</span><br><span class="line">如果,flushall之后,系统恰好bgrewriteaof了,那么aof就清空了,数据丢失.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搭建Reids环境</title>
      <link href="/11214/"/>
      <url>/11214/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux搭建Reids环境"><a href="#Linux搭建Reids环境" class="headerlink" title="Linux搭建Reids环境"></a>Linux搭建Reids环境</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C语言" target="_blank" rel="noopener">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由<a href="https://baike.baidu.com/item/Pivotal" target="_blank" rel="noopener">Pivotal</a>赞助。</p><p><a href="https://redis.io/" target="_blank" rel="noopener">官方网址</a> <a href="https://redis.io/download" target="_blank" rel="noopener">下载地址</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>使用ssh连接上linux服务器</p><p>在指定目录下载 Redis<a href="https://redis.io/download" target="_blank" rel="noopener">下载地址</a></p><p>我在linux的/opt目录下载安装的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">mkdir redis</span><br><span class="line"><span class="built_in">cd</span> redis</span><br><span class="line">wget https://download.redis.io/releases/redis-6.2.0.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf redis-6.2.0.tar.gz</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210225102905681.png" alt="image-20210225102905681"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入redis-6.2.0目录</span></span><br><span class="line"><span class="built_in">cd</span> redis-6.2.0</span><br><span class="line"><span class="comment"># 进行make</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 如果没有gcc 或者其他依赖自己安装</span></span><br><span class="line">yum install xxx -y</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210225103627015.png" alt="image-20210225103627015"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入 根目录的src目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="comment"># 显示可执行文件</span></span><br><span class="line">ls -F|grep <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line">[root@localhost src]<span class="comment"># ls -F|grep "*"</span></span><br><span class="line">mkreleasehdr.sh*</span><br><span class="line">redis-benchmark* <span class="comment">#性能测试工具</span></span><br><span class="line">redis-check-aof* <span class="comment">#日志文件检测工(比如断电造成日志损坏,可以检测并修复)</span></span><br><span class="line">redis-check-rdb* <span class="comment">#快照文件检测工具,效果类上</span></span><br><span class="line">redis-cli*       <span class="comment">#客户端</span></span><br><span class="line">redis-sentinel* </span><br><span class="line">redis-server*    <span class="comment">#服务端</span></span><br><span class="line">redis-trib.rb*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./redis-server</span><br><span class="line"></span><br><span class="line">[root@localhost src]<span class="comment"># ./redis-server </span></span><br><span class="line">31406:C 24 Feb 2021 21:43:49.408 <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">31406:C 24 Feb 2021 21:43:49.408 <span class="comment"># Redis version=6.2.0, bits=64, commit=00000000, modified=0, pid=31406, just started</span></span><br><span class="line">31406:C 24 Feb 2021 21:43:49.408 <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use ./redis-server /path/to/redis.conf</span></span><br><span class="line">31406:M 24 Feb 2021 21:43:49.408 * Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line">31406:M 24 Feb 2021 21:43:49.408 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ <span class="string">''</span>-._                                             </span><br><span class="line">      _.-``    `.  `_.  <span class="string">''</span>-._           Redis 6.2.0 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ <span class="string">''</span>-._                                   </span><br><span class="line"> (    <span class="string">'      ,       .-`  | `,    )     Running in standalone mode</span></span><br><span class="line"><span class="string"> |`-._`-...-` __...-.``-._|'</span>` _.-<span class="string">'|     Port: 6379</span></span><br><span class="line"><span class="string"> |    `-._   `._    /     _.-'</span>    |     PID: 31406</span><br><span class="line">  `-._    `-._  `-./  _.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |           http://redis.io        </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line"> |`-._`-._    `-.__.-<span class="string">'    _.-'</span>_.-<span class="string">'|                                  </span></span><br><span class="line"><span class="string"> |    `-._`-._        _.-'</span>_.-<span class="string">'    |                                  </span></span><br><span class="line"><span class="string">  `-._    `-._`-.__.-'</span>_.-<span class="string">'    _.-'</span>                                   </span><br><span class="line">      `-._    `-.__.-<span class="string">'    _.-'</span>                                       </span><br><span class="line">          `-._        _.-<span class="string">'                                           </span></span><br><span class="line"><span class="string">              `-.__.-'</span>                                               </span><br><span class="line"></span><br><span class="line">31406:M 24 Feb 2021 21:43:49.409 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">31406:M 24 Feb 2021 21:43:49.409 <span class="comment"># Server initialized</span></span><br><span class="line">31406:M 24 Feb 2021 21:43:49.409 <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.</span></span><br><span class="line">31406:M 24 Feb 2021 21:43:49.409 * Loading RDB produced by version 6.2.0</span><br><span class="line">31406:M 24 Feb 2021 21:43:49.409 * RDB age 42 seconds</span><br><span class="line">31406:M 24 Feb 2021 21:43:49.409 * RDB memory usage when created 0.77 Mb</span><br><span class="line">31406:M 24 Feb 2021 21:43:49.409 * DB loaded from disk: 0.000 seconds</span><br><span class="line">31406:M 24 Feb 2021 21:43:49.409 * Ready to accept connections</span><br></pre></td></tr></table></figure><h3 id="开启自启"><a href="#开启自启" class="headerlink" title="开启自启"></a>开启自启</h3><h4 id="新建启动脚本"><a href="#新建启动脚本" class="headerlink" title="新建启动脚本"></a>新建启动脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/init.d/redis</span><br></pre></td></tr></table></figure><h4 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis文件</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#chkconfig:   2345 90 10</span></span><br><span class="line"><span class="comment">#description:  Redis is a persistent key-value database</span></span><br><span class="line">PATH=/opt/redis/redis-6.2.0/src:/sbin:/usr/bin:/bin</span><br><span class="line"></span><br><span class="line">REDISPORT=6379</span><br><span class="line">EXEC=/opt/redis/redis-6.2.0/src/redis-server</span><br><span class="line">REDIS_CLI=/opt/redis/redis-6.2.0/src/redis-cli</span><br><span class="line">PIDFILE=/var/run/redis_6379.pid</span><br><span class="line"><span class="comment"># 默认配置</span></span><br><span class="line">CONF=/opt/redis/redis-6.2.0/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span>  </span><br><span class="line">    start)  </span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="variable">$PIDFILE</span> ]  </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> exists, process is already running or crashed"</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Starting Redis server..."</span>  </span><br><span class="line">                <span class="variable">$EXEC</span> <span class="variable">$CONF</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"$?"</span>=<span class="string">"0"</span> ]   </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">              <span class="built_in">echo</span> <span class="string">"Redis is running..."</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        ;;  </span><br><span class="line">    stop)  </span><br><span class="line">        <span class="keyword">if</span> [ ! -f <span class="variable">$PIDFILE</span> ]  </span><br><span class="line">        <span class="keyword">then</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"<span class="variable">$PIDFILE</span> does not exist, process is not running"</span>  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">                PID=$(cat <span class="variable">$PIDFILE</span>)  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Stopping ..."</span>  </span><br><span class="line">                <span class="variable">$REDIS_CLI</span> -p <span class="variable">$REDISPORT</span> SHUTDOWN  </span><br><span class="line">                <span class="keyword">while</span> [ -x <span class="variable">$&#123;PIDFILE&#125;</span> ]  </span><br><span class="line">               <span class="keyword">do</span>  </span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">"Waiting for Redis to shutdown ..."</span>  </span><br><span class="line">                    sleep 1  </span><br><span class="line">                <span class="keyword">done</span>  </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Redis stopped"</span>  </span><br><span class="line">        <span class="keyword">fi</span>  </span><br><span class="line">        ;;  </span><br><span class="line">   restart|force-reload)  </span><br><span class="line">        <span class="variable">$&#123;0&#125;</span> stop  </span><br><span class="line">        <span class="variable">$&#123;0&#125;</span> start  </span><br><span class="line">        ;;  </span><br><span class="line">  *)  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/redis &#123;start|stop|restart|force-reload&#125;"</span> &gt;&amp;2  </span><br><span class="line">        <span class="built_in">exit</span> 1  </span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 755 /etc/init.d/redis</span><br></pre></td></tr></table></figure><h4 id="修改redis支持后台启动"><a href="#修改redis支持后台启动" class="headerlink" title="修改redis支持后台启动"></a>修改redis支持后台启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/redis/redis-6.2.0/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到设置</span></span><br><span class="line">/daemonize</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改为yes</span></span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210225105836964.png" alt="image-20210225105836964"></p><h4 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/redis start</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210225110558764.png" alt="image-20210225110558764"></p><h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chkconfig --add /etc/init.d/redis</span><br><span class="line">chkconfig redis on</span><br></pre></td></tr></table></figure><h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接</span></span><br><span class="line">./redis-cli [-h localhost -p 6379 ]</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210225111148351.png" alt="image-20210225111148351"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis 配置文件示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当你需要为某个配置项指定内存大小的时候，必须要带上单位，</span></span><br><span class="line"><span class="comment"># 通常的格式就是 1k 5gb 4m 等酱紫：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k  =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m  =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g  =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 单位是不区分大小写的，你写 1K 5GB 4M 也行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## INCLUDES ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假如说你有一个可用于所有的 redis server 的标准配置模板，</span></span><br><span class="line"><span class="comment"># 但针对某些 server 又需要一些个性化的设置，</span></span><br><span class="line"><span class="comment"># 你可以使用 include 来包含一些其他的配置文件，这对你来说是非常有用的。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 但是要注意哦，include 是不能被 config rewrite 命令改写的</span></span><br><span class="line"><span class="comment"># 由于 redis 总是以最后的加工线作为一个配置指令值，所以你最好是把 include 放在这个文件的最前面，</span></span><br><span class="line"><span class="comment"># 以避免在运行时覆盖配置的改变，相反，你就把它放在后面（外国人真啰嗦）。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################ 常用 #####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes。</span></span><br><span class="line"><span class="comment"># 当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面。</span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/run/redis.pid 文件里面，</span></span><br><span class="line"><span class="comment"># 但是你可以在这里自己制定它的文件位置。</span></span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听端口号，默认为 6379，如果你设为 0 ，redis 将不在 socket 上监听任何客户端连接。</span></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP 监听的最大容纳数量</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 在高并发的环境下，你需要把这个值调高以避免客户端连接缓慢的问题。</span></span><br><span class="line"><span class="comment"># Linux 内核会一声不响的把这个值缩小成 /proc/sys/net/core/somaxconn 对应的值，</span></span><br><span class="line"><span class="comment"># 所以你要修改这两个值才能达到你的预期。</span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，redis 在 server 上所有有效的网络接口上监听客户端连接。</span></span><br><span class="line"><span class="comment"># 你如果只想让它在一个网络接口上监听，那你就绑定一个IP或者多个IP。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 示例，多个IP用空格隔开:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 unix socket 的路径。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># unixsocket /tmp/redis.sock</span></span><br><span class="line"><span class="comment"># unixsocketperm 755</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定在一个 client 空闲多少秒之后关闭连接（0 就是不管它）</span></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp 心跳包。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果设置为非零，则在与客户端缺乏通讯的时候使用 SO_KEEPALIVE 发送 tcp acks 给客户端。</span></span><br><span class="line"><span class="comment"># 这个之所有有用，主要由两个原因：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) 防止死的 peers</span></span><br><span class="line"><span class="comment"># 2) Take the connection alive from the point of view of network</span></span><br><span class="line"><span class="comment">#    equipment in the middle.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span></span><br><span class="line"><span class="comment"># Note that to close the connection the double of the time is needed.</span></span><br><span class="line"><span class="comment"># On other kernels the period depends on the kernel configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A reasonable value for this option is 60 seconds.</span></span><br><span class="line"><span class="comment"># 推荐一个合理的值就是60秒</span></span><br><span class="line">tcp-keepalive 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义日志级别。</span></span><br><span class="line"><span class="comment"># 可以是下面的这些值：</span></span><br><span class="line"><span class="comment"># debug (适用于开发或测试阶段)</span></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="comment"># notice (适用于生产环境)</span></span><br><span class="line"><span class="comment"># warning (仅仅一些重要的消息被记录)</span></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件的位置</span></span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要想把日志记录到系统日志，就把它改成 yes，</span></span><br><span class="line"><span class="comment"># 也可以可选择性的更新其他的syslog 参数以达到你的要求</span></span><br><span class="line"><span class="comment"># syslog-enabled no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 syslog 的 identity。</span></span><br><span class="line"><span class="comment"># syslog-ident redis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 syslog 的 facility，必须是 USER 或者是 LOCAL0-LOCAL7 之间的值。</span></span><br><span class="line"><span class="comment"># syslog-facility local0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库的数目。</span></span><br><span class="line"><span class="comment"># 默认数据库是 DB 0，你可以在每个连接上使用 select &lt;dbid&gt; 命令选择一个不同的数据库，</span></span><br><span class="line"><span class="comment"># 但是 dbid 必须是一个介于 0 到 databasees - 1 之间的值</span></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ 快照 ################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 存 DB 到磁盘：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   格式：save &lt;间隔时间（秒）&gt; &lt;写入次数&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   根据给定的时间间隔和写入次数将数据保存到磁盘</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   下面的例子的意思是：</span></span><br><span class="line"><span class="comment">#   900 秒内如果至少有 1 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#   300 秒内如果至少有 10 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#   60 秒内如果至少有 10000 个 key 的值变化，则保存</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   注意：你可以注释掉所有的 save 行来停用保存功能。</span></span><br><span class="line"><span class="comment">#   也可以直接一个空字符串来实现停用：</span></span><br><span class="line"><span class="comment">#   save ""</span></span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，如果 redis 最后一次的后台保存失败，redis 将停止接受写操作，</span></span><br><span class="line"><span class="comment"># 这样以一种强硬的方式让用户知道数据不能正确的持久化到磁盘，</span></span><br><span class="line"><span class="comment"># 否则就会没人注意到灾难的发生。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果后台保存进程重新启动工作了，redis 也将自动的允许写操作。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 然而你要是安装了靠谱的监控，你可能不希望 redis 这样做，那你就改成 no 好了。</span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在 dump .rdb 数据库的时候使用 LZF 压缩字符串</span></span><br><span class="line"><span class="comment"># 默认都设为 yes</span></span><br><span class="line"><span class="comment"># 如果你希望保存子进程节省点 cpu ，你就设置它为 no ，</span></span><br><span class="line"><span class="comment"># 不过这个数据集可能就会比较大</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否校验rdb文件</span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 dump 的文件位置</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="comment"># 例如上面的 dbfilename 只指定了文件名，</span></span><br><span class="line"><span class="comment"># 但是它会写入到这个目录下。这个配置项一定是个目录，而不能是文件名。</span></span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"><span class="comment">################################# 主从复制 #################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主从复制。使用 slaveof 来让一个 redis 实例成为另一个reids 实例的副本。</span></span><br><span class="line"><span class="comment"># 注意这个只需要在 slave 上配置。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 master 需要密码认证，就在这里设置</span></span><br><span class="line"><span class="comment"># masterauth &lt;master-password&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当一个 slave 与 master 失去联系，或者复制正在进行的时候，</span></span><br><span class="line"><span class="comment"># slave 可能会有两种表现：</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，</span></span><br><span class="line"><span class="comment">#    或者数据可能是空的在第一次同步的时候</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，</span></span><br><span class="line"><span class="comment">#    slave 都将返回一个 "SYNC with master in progress" 的错误，</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以配置一个 slave 实体是否接受写入操作。</span></span><br><span class="line"><span class="comment"># 通过写入操作来存储一些短暂的数据对于一个 slave 实例来说可能是有用的，</span></span><br><span class="line"><span class="comment"># 因为相对从 master 重新同步数而言，据数据写入到 slave 会更容易被删除。</span></span><br><span class="line"><span class="comment"># 但是如果客户端因为一个错误的配置写入，也可能会导致一些问题。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 从 redis 2.6 版起，默认 slaves 都是只读的。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> read only slaves are not designed to be exposed to untrusted clients</span></span><br><span class="line"><span class="comment"># on the internet. It's just a protection layer against misuse of the instance.</span></span><br><span class="line"><span class="comment"># Still a read only slave exports by default all the administrative commands</span></span><br><span class="line"><span class="comment"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span></span><br><span class="line"><span class="comment"># security of read only slaves using 'rename-command' to shadow all the</span></span><br><span class="line"><span class="comment"># administrative / dangerous commands.</span></span><br><span class="line"><span class="comment"># 注意：只读的 slaves 没有被设计成在 internet 上暴露给不受信任的客户端。</span></span><br><span class="line"><span class="comment"># 它仅仅是一个针对误用实例的一个保护层。</span></span><br><span class="line">slave-read-only yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Slaves 在一个预定义的时间间隔内发送 ping 命令到 server 。</span></span><br><span class="line"><span class="comment"># 你可以改变这个时间间隔。默认为 10 秒。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># repl-ping-slave-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following option sets the replication timeout for:</span></span><br><span class="line"><span class="comment"># 设置主从复制过期时间</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) Bulk transfer I/O during SYNC, from the point of view of slave.</span></span><br><span class="line"><span class="comment"># 2) Master timeout from the point of view of slaves (data, pings).</span></span><br><span class="line"><span class="comment"># 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is important to make sure that this value is greater than the value</span></span><br><span class="line"><span class="comment"># specified for repl-ping-slave-period otherwise a timeout will be detected</span></span><br><span class="line"><span class="comment"># every time there is low traffic between the master and the slave.</span></span><br><span class="line"><span class="comment"># 这个值一定要比 repl-ping-slave-period 大</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable TCP_NODELAY on the slave socket after SYNC?</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select "yes" Redis will use a smaller number of TCP packets and</span></span><br><span class="line"><span class="comment"># less bandwidth to send data to slaves. But this can add a delay for</span></span><br><span class="line"><span class="comment"># the data to appear on the slave side, up to 40 milliseconds with</span></span><br><span class="line"><span class="comment"># Linux kernels using a default configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you select "no" the delay for data to appear on the slave side will</span></span><br><span class="line"><span class="comment"># be reduced but more bandwidth will be used for replication.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default we optimize for low latency, but in very high traffic conditions</span></span><br><span class="line"><span class="comment"># or when the master and slaves are many hops away, turning this to "yes" may</span></span><br><span class="line"><span class="comment"># be a good idea.</span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主从复制容量大小。这个 backlog 是一个用来在 slaves 被断开连接时</span></span><br><span class="line"><span class="comment"># 存放 slave 数据的 buffer，所以当一个 slave 想要重新连接，通常不希望全部重新同步，</span></span><br><span class="line"><span class="comment"># 只是部分同步就够了，仅仅传递 slave 在断开连接时丢失的这部分数据。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The biggest the replication backlog, the longer the time the slave can be</span></span><br><span class="line"><span class="comment"># disconnected and later be able to perform a partial resynchronization.</span></span><br><span class="line"><span class="comment"># 这个值越大，salve 可以断开连接的时间就越长。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The backlog is only allocated once there is at least a slave connected.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># repl-backlog-size 1mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># After a master has no longer connected slaves for some time, the backlog</span></span><br><span class="line"><span class="comment"># will be freed. The following option configures the amount of seconds that</span></span><br><span class="line"><span class="comment"># need to elapse, starting from the time the last slave disconnected, for</span></span><br><span class="line"><span class="comment"># the backlog buffer to be freed.</span></span><br><span class="line"><span class="comment"># 在某些时候，master 不再连接 slaves，backlog 将被释放。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value of 0 means to never release the backlog.</span></span><br><span class="line"><span class="comment"># 如果设置为 0 ，意味着绝不释放 backlog 。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 master 不能正常工作的时候，Redis Sentinel 会从 slaves 中选出一个新的 master，</span></span><br><span class="line"><span class="comment"># 这个值越小，就越会被优先选中，但是如果是 0 ， 那是意味着这个 slave 不可能被选中。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 默认优先级为 100。</span></span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># It is possible for a master to stop accepting writes if there are less than</span></span><br><span class="line"><span class="comment"># N slaves connected, having a lag less or equal than M seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The N slaves need to be in "online" state.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span></span><br><span class="line"><span class="comment"># the last ping received from the slave, that is usually sent every second.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option does not GUARANTEES that N replicas will accept the write, but</span></span><br><span class="line"><span class="comment"># will limit the window of exposure for lost writes in case not enough slaves</span></span><br><span class="line"><span class="comment"># are available, to the specified number of seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example to require at least 3 slaves with a lag &lt;= 10 seconds use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># min-slaves-to-write 3</span></span><br><span class="line"><span class="comment"># min-slaves-max-lag 10</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Setting one or the other to 0 disables the feature.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default min-slaves-to-write is set to 0 (feature disabled) and</span></span><br><span class="line"><span class="comment"># min-slaves-max-lag is set to 10.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## 安全 ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span></span><br><span class="line"><span class="comment"># commands.  This might be useful in environments in which you do not trust</span></span><br><span class="line"><span class="comment"># others with access to the host running redis-server.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This should stay commented out for backward compatibility and because most</span></span><br><span class="line"><span class="comment"># people do not need auth (e.g. they run their own servers).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Warning: since Redis is pretty fast an outside user can try up to</span></span><br><span class="line"><span class="comment"># 150k passwords per second against a good box. This means that you should</span></span><br><span class="line"><span class="comment"># use a very strong password otherwise it will be very easy to break.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 设置认证密码</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Command renaming.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to change the name of dangerous commands in a shared</span></span><br><span class="line"><span class="comment"># environment. For instance the CONFIG command may be renamed into something</span></span><br><span class="line"><span class="comment"># hard to guess so that it will still be available for internal-use tools</span></span><br><span class="line"><span class="comment"># but not available for general clients.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is also possible to completely kill a command by renaming it into</span></span><br><span class="line"><span class="comment"># an empty string:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rename-command CONFIG ""</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that changing the name of commands that are logged into the</span></span><br><span class="line"><span class="comment"># AOF file or transmitted to slaves may cause problems.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################### 限制 ####################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the max number of connected clients at the same time. By default</span></span><br><span class="line"><span class="comment"># this limit is set to 10000 clients, however if the Redis server is not</span></span><br><span class="line"><span class="comment"># able to configure the process file limit to allow for the specified limit</span></span><br><span class="line"><span class="comment"># the max number of allowed clients is set to the current file limit</span></span><br><span class="line"><span class="comment"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 一旦达到最大限制，redis 将关闭所有的新连接</span></span><br><span class="line"><span class="comment"># 并发送一个‘max number of clients reached’的错误。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你设置了这个值，当缓存的数据容量达到这个值， redis 将根据你选择的</span></span><br><span class="line"><span class="comment"># eviction 策略来移除一些 keys。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 如果 redis 不能根据策略移除 keys ，或者是策略被设置为 ‘noeviction’，</span></span><br><span class="line"><span class="comment"># redis 将开始响应错误给命令，如 set，lpush 等等，</span></span><br><span class="line"><span class="comment"># 并继续响应只读的命令，如 get</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This option is usually useful when using Redis as an LRU cache, or to set</span></span><br><span class="line"><span class="comment"># a hard memory limit for an instance (using the 'noeviction' policy).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING: If you have slaves attached to an instance with maxmemory on,</span></span><br><span class="line"><span class="comment"># the size of the output buffers needed to feed the slaves are subtracted</span></span><br><span class="line"><span class="comment"># from the used memory count, so that network problems / resyncs will</span></span><br><span class="line"><span class="comment"># not trigger a loop where keys are evicted, and in turn the output</span></span><br><span class="line"><span class="comment"># buffer of slaves is full with DELs of keys evicted triggering the deletion</span></span><br><span class="line"><span class="comment"># of more keys, and so forth until the database is completely emptied.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In short... if you have slaves attached it is suggested that you set a lower</span></span><br><span class="line"><span class="comment"># limit for maxmemory so that there is some free RAM on the system for slave</span></span><br><span class="line"><span class="comment"># output buffers (but this is not needed if the policy is 'noeviction').</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 最大使用内存</span></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大内存策略，你有 5 个选择。</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</span></span><br><span class="line"><span class="comment"># volatile-lru -&gt; 使用 LRU 算法移除包含过期设置的 key 。</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</span></span><br><span class="line"><span class="comment"># allkeys-lru -&gt; 根据 LRU 算法移除所有的 key 。</span></span><br><span class="line"><span class="comment"># volatile-random -&gt; remove a random key with an expire set</span></span><br><span class="line"><span class="comment"># allkeys-random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="comment"># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="comment"># noeviction -&gt; don't expire at all, just return an error on write operations</span></span><br><span class="line"><span class="comment"># noeviction -&gt; 不让任何 key 过期，只是给写入操作返回一个错误</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> with any of the above policies, Redis will return an error on write</span></span><br><span class="line"><span class="comment">#       operations, when there are not suitable keys for eviction.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       At the date of writing this commands are: set setnx setex append</span></span><br><span class="line"><span class="comment">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span><br><span class="line"><span class="comment">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span><br><span class="line"><span class="comment">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span><br><span class="line"><span class="comment">#       getset mset msetnx exec sort</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LRU and minimal TTL algorithms are not precise algorithms but approximated</span></span><br><span class="line"><span class="comment"># algorithms (in order to save memory), so you can tune it for speed or</span></span><br><span class="line"><span class="comment"># accuracy. For default Redis will check five keys and pick the one that was</span></span><br><span class="line"><span class="comment"># used less recently, you can change the sample size using the following</span></span><br><span class="line"><span class="comment"># configuration directive.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default of 5 produces good enough results. 10 Approximates very closely</span></span><br><span class="line"><span class="comment"># true LRU but costs a bit more CPU. 3 is very fast but not very accurate.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># maxmemory-samples 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################## APPEND ONLY MODE ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default Redis asynchronously dumps the dataset on disk. This mode is</span></span><br><span class="line"><span class="comment"># good enough in many applications, but an issue with the Redis process or</span></span><br><span class="line"><span class="comment"># a power outage may result into a few minutes of writes lost (depending on</span></span><br><span class="line"><span class="comment"># the configured save points).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Append Only File is an alternative persistence mode that provides</span></span><br><span class="line"><span class="comment"># much better durability. For instance using the default data fsync policy</span></span><br><span class="line"><span class="comment"># (see later in the config file) Redis can lose just one second of writes in a</span></span><br><span class="line"><span class="comment"># dramatic event like a server power outage, or a single write if something</span></span><br><span class="line"><span class="comment"># wrong with the Redis process itself happens, but the operating system is</span></span><br><span class="line"><span class="comment"># still running correctly.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># AOF and RDB persistence can be enabled at the same time without problems.</span></span><br><span class="line"><span class="comment"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span></span><br><span class="line"><span class="comment"># with the better durability guarantees.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please check http://redis.io/topics/persistence for more information.</span></span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># The name of the append only file (default: "appendonly.aof")</span></span><br><span class="line"></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The fsync() call tells the Operating System to actually write data on disk</span></span><br><span class="line"><span class="comment"># instead to wait for more data in the output buffer. Some OS will really flush</span></span><br><span class="line"><span class="comment"># data on disk, some other OS will just try to do it ASAP.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Redis supports three different modes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># no: don't fsync, just let the OS flush the data when it wants. Faster.</span></span><br><span class="line"><span class="comment"># always: fsync after every write to the append only log . Slow, Safest.</span></span><br><span class="line"><span class="comment"># everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is "everysec", as that's usually the right compromise between</span></span><br><span class="line"><span class="comment"># speed and data safety. It's up to you to understand if you can relax this to</span></span><br><span class="line"><span class="comment"># "no" that will let the operating system flush the output buffer when</span></span><br><span class="line"><span class="comment"># it wants, for better performances (but if you can live with the idea of</span></span><br><span class="line"><span class="comment"># some data loss consider the default persistence mode that's snapshotting),</span></span><br><span class="line"><span class="comment"># or on the contrary, use "always" that's very slow but a bit safer than</span></span><br><span class="line"><span class="comment"># everysec.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># More details please check the following article:</span></span><br><span class="line"><span class="comment"># http://antirez.com/post/redis-persistence-demystified.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure, use "everysec".</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When the AOF fsync policy is set to always or everysec, and a background</span></span><br><span class="line"><span class="comment"># saving process (a background save or AOF log background rewriting) is</span></span><br><span class="line"><span class="comment"># performing a lot of I/O against the disk, in some Linux configurations</span></span><br><span class="line"><span class="comment"># Redis may block too long on the fsync() call. Note that there is no fix for</span></span><br><span class="line"><span class="comment"># this currently, as even performing fsync in a different thread will block</span></span><br><span class="line"><span class="comment"># our synchronous write(2) call.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to mitigate this problem it's possible to use the following option</span></span><br><span class="line"><span class="comment"># that will prevent fsync() from being called in the main process while a</span></span><br><span class="line"><span class="comment"># BGSAVE or BGREWRITEAOF is in progress.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This means that while another child is saving, the durability of Redis is</span></span><br><span class="line"><span class="comment"># the same as "appendfsync none". In practical terms, this means that it is</span></span><br><span class="line"><span class="comment"># possible to lose up to 30 seconds of log in the worst scenario (with the</span></span><br><span class="line"><span class="comment"># default Linux settings).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you have latency problems turn this to "yes". Otherwise leave it as</span></span><br><span class="line"><span class="comment"># "no" that is the safest pick from the point of view of durability.</span></span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="comment"># Redis is able to automatically rewrite the log file implicitly calling</span></span><br><span class="line"><span class="comment"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is how it works: Redis remembers the size of the AOF file after the</span></span><br><span class="line"><span class="comment"># latest rewrite (if no rewrite has happened since the restart, the size of</span></span><br><span class="line"><span class="comment"># the AOF at startup is used).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This base size is compared to the current size. If the current size is</span></span><br><span class="line"><span class="comment"># bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="comment"># you need to specify a minimal size for the AOF file to be rewritten, this</span></span><br><span class="line"><span class="comment"># is useful to avoid rewriting the AOF file even if the percentage increase</span></span><br><span class="line"><span class="comment"># is reached but it is still pretty small.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Specify a percentage of zero in order to disable the automatic AOF</span></span><br><span class="line"><span class="comment"># rewrite feature.</span></span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ LUA SCRIPTING  ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Max execution time of a Lua script in milliseconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the maximum execution time is reached Redis will log that a script is</span></span><br><span class="line"><span class="comment"># still in execution after the maximum allowed time and will start to</span></span><br><span class="line"><span class="comment"># reply to queries with an error.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># When a long running script exceed the maximum execution time only the</span></span><br><span class="line"><span class="comment"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span></span><br><span class="line"><span class="comment"># used to stop a script that did not yet called write commands. The second</span></span><br><span class="line"><span class="comment"># is the only way to shut down the server in the case a write commands was</span></span><br><span class="line"><span class="comment"># already issue by the script but the user don't want to wait for the natural</span></span><br><span class="line"><span class="comment"># termination of the script.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line"><span class="comment">################################ REDIS 集群  ###############################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 启用或停用集群</span></span><br><span class="line"><span class="comment"># cluster-enabled yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Every cluster node has a cluster configuration file. This file is not</span></span><br><span class="line"><span class="comment"># intended to be edited by hand. It is created and updated by Redis nodes.</span></span><br><span class="line"><span class="comment"># Every Redis Cluster node requires a different cluster configuration file.</span></span><br><span class="line"><span class="comment"># Make sure that instances running in the same system does not have</span></span><br><span class="line"><span class="comment"># overlapping cluster configuration file names.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-config-file nodes-6379.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span></span><br><span class="line"><span class="comment"># for it to be considered in failure state.</span></span><br><span class="line"><span class="comment"># Most other internal time limits are multiple of the node timeout.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-node-timeout 15000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A slave of a failing master will avoid to start a failover if its data</span></span><br><span class="line"><span class="comment"># looks too old.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There is no simple way for a slave to actually have a exact measure of</span></span><br><span class="line"><span class="comment"># its "data age", so the following two checks are performed:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1) If there are multiple slaves able to failover, they exchange messages</span></span><br><span class="line"><span class="comment">#    in order to try to give an advantage to the slave with the best</span></span><br><span class="line"><span class="comment">#    replication offset (more data from the master processed).</span></span><br><span class="line"><span class="comment">#    Slaves will try to get their rank by offset, and apply to the start</span></span><br><span class="line"><span class="comment">#    of the failover a delay proportional to their rank.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2) Every single slave computes the time of the last interaction with</span></span><br><span class="line"><span class="comment">#    its master. This can be the last ping or command received (if the master</span></span><br><span class="line"><span class="comment">#    is still in the "connected" state), or the time that elapsed since the</span></span><br><span class="line"><span class="comment">#    disconnection with the master (if the replication link is currently down).</span></span><br><span class="line"><span class="comment">#    If the last interaction is too old, the slave will not try to failover</span></span><br><span class="line"><span class="comment">#    at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The point "2" can be tuned by user. Specifically a slave will not perform</span></span><br><span class="line"><span class="comment"># the failover if, since the last interaction with the master, the time</span></span><br><span class="line"><span class="comment"># elapsed is greater than:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   (node-timeout * slave-validity-factor) + repl-ping-slave-period</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># So for example if node-timeout is 30 seconds, and the slave-validity-factor</span></span><br><span class="line"><span class="comment"># is 10, and assuming a default repl-ping-slave-period of 10 seconds, the</span></span><br><span class="line"><span class="comment"># slave will not try to failover if it was not able to talk with the master</span></span><br><span class="line"><span class="comment"># for longer than 310 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A large slave-validity-factor may allow slaves with too old data to failover</span></span><br><span class="line"><span class="comment"># a master, while a too small value may prevent the cluster from being able to</span></span><br><span class="line"><span class="comment"># elect a slave at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For maximum availability, it is possible to set the slave-validity-factor</span></span><br><span class="line"><span class="comment"># to a value of 0, which means, that slaves will always try to failover the</span></span><br><span class="line"><span class="comment"># master regardless of the last time they interacted with the master.</span></span><br><span class="line"><span class="comment"># (However they'll always try to apply a delay proportional to their</span></span><br><span class="line"><span class="comment"># offset rank).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Zero is the only value able to guarantee that when all the partitions heal</span></span><br><span class="line"><span class="comment"># the cluster will always be able to continue.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-slave-validity-factor 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cluster slaves are able to migrate to orphaned masters, that are masters</span></span><br><span class="line"><span class="comment"># that are left without working slaves. This improves the cluster ability</span></span><br><span class="line"><span class="comment"># to resist to failures as otherwise an orphaned master can't be failed over</span></span><br><span class="line"><span class="comment"># in case of failure if it has no working slaves.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Slaves migrate to orphaned masters only if there are still at least a</span></span><br><span class="line"><span class="comment"># given number of other working slaves for their old master. This number</span></span><br><span class="line"><span class="comment"># is the "migration barrier". A migration barrier of 1 means that a slave</span></span><br><span class="line"><span class="comment"># will migrate only if there is at least 1 other working slave for its master</span></span><br><span class="line"><span class="comment"># and so forth. It usually reflects the number of slaves you want for every</span></span><br><span class="line"><span class="comment"># master in your cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default is 1 (slaves migrate only if their masters remain with at least</span></span><br><span class="line"><span class="comment"># one slave). To disable migration just set it to a very large value.</span></span><br><span class="line"><span class="comment"># A value of 0 can be set but is useful only for debugging and dangerous</span></span><br><span class="line"><span class="comment"># in production.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># cluster-migration-barrier 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In order to setup your cluster make sure to read the documentation</span></span><br><span class="line"><span class="comment"># available at http://redis.io web site.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################## SLOW LOG ###################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Redis Slow Log is a system to log queries that exceeded a specified</span></span><br><span class="line"><span class="comment"># execution time. The execution time does not include the I/O operations</span></span><br><span class="line"><span class="comment"># like talking with the client, sending the reply and so forth,</span></span><br><span class="line"><span class="comment"># but just the time needed to actually execute the command (this is the only</span></span><br><span class="line"><span class="comment"># stage of command execution where the thread is blocked and can not serve</span></span><br><span class="line"><span class="comment"># other requests in the meantime).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can configure the slow log with two parameters: one tells Redis</span></span><br><span class="line"><span class="comment"># what is the execution time, in microseconds, to exceed in order for the</span></span><br><span class="line"><span class="comment"># command to get logged, and the other parameter is the length of the</span></span><br><span class="line"><span class="comment"># slow log. When a new command is logged the oldest one is removed from the</span></span><br><span class="line"><span class="comment"># queue of logged commands.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following time is expressed in microseconds, so 1000000 is equivalent</span></span><br><span class="line"><span class="comment"># to one second. Note that a negative number disables the slow log, while</span></span><br><span class="line"><span class="comment"># a value of zero forces the logging of every command.</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># There is no limit to this length. Just be aware that it will consume memory.</span></span><br><span class="line"><span class="comment"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"><span class="comment">############################# Event notification ##############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis can notify Pub/Sub clients about events happening in the key space.</span></span><br><span class="line"><span class="comment"># This feature is documented at http://redis.io/topics/keyspace-events</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For instance if keyspace events notification is enabled, and a client</span></span><br><span class="line"><span class="comment"># performs a DEL operation on key "foo" stored in the Database 0, two</span></span><br><span class="line"><span class="comment"># messages will be published via Pub/Sub:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PUBLISH __keyspace@0__:foo del</span></span><br><span class="line"><span class="comment"># PUBLISH __keyevent@0__:del foo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is possible to select the events that Redis will notify among a set</span></span><br><span class="line"><span class="comment"># of classes. Every class is identified by a single character:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span></span><br><span class="line"><span class="comment">#  $     String commands</span></span><br><span class="line"><span class="comment">#  l     List commands</span></span><br><span class="line"><span class="comment">#  s     Set commands</span></span><br><span class="line"><span class="comment">#  h     Hash commands</span></span><br><span class="line"><span class="comment">#  z     Sorted set commands</span></span><br><span class="line"><span class="comment">#  x     Expired events (events generated every time a key expires)</span></span><br><span class="line"><span class="comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span></span><br><span class="line"><span class="comment">#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  The "notify-keyspace-events" takes as argument a string that is composed</span></span><br><span class="line"><span class="comment">#  by zero or multiple characters. The empty string means that notifications</span></span><br><span class="line"><span class="comment">#  are disabled at all.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example: to enable list and generic events, from the point of view of the</span></span><br><span class="line"><span class="comment">#           event name, use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Elg</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Example 2: to get the stream of the expired keys subscribing to channel</span></span><br><span class="line"><span class="comment">#             name __keyevent@0__:expired use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  notify-keyspace-events Ex</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  By default all notifications are disabled because most users don't need</span></span><br><span class="line"><span class="comment">#  this feature and the feature has some overhead. Note that if you don't</span></span><br><span class="line"><span class="comment">#  specify at least one of K or E, no events will be delivered.</span></span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################### ADVANCED CONFIG ###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hashes are encoded using a memory efficient data structure when they have a</span></span><br><span class="line"><span class="comment"># small number of entries, and the biggest entry does not exceed a given</span></span><br><span class="line"><span class="comment"># threshold. These thresholds can be configured using the following directives.</span></span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</span><br><span class="line"><span class="built_in">hash</span>-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly to hashes, small lists are also encoded in a special way in order</span></span><br><span class="line"><span class="comment"># to save a lot of space. The special representation is only used when</span></span><br><span class="line"><span class="comment"># you are under the following limits:</span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets have a special encoding in just one case: when a set is composed</span></span><br><span class="line"><span class="comment"># of just strings that happens to be integers in radix 10 in the range</span></span><br><span class="line"><span class="comment"># of 64 bit signed integers.</span></span><br><span class="line"><span class="comment"># The following configuration setting sets the limit in the size of the</span></span><br><span class="line"><span class="comment"># set in order to use this special memory saving encoding.</span></span><br><span class="line"><span class="built_in">set</span>-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"><span class="comment"># Similarly to hashes and lists, sorted sets are also specially encoded in</span></span><br><span class="line"><span class="comment"># order to save a lot of space. This encoding is only used when the length and</span></span><br><span class="line"><span class="comment"># elements of a sorted set are below the following limits:</span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="comment"># HyperLogLog sparse representation bytes limit. The limit includes the</span></span><br><span class="line"><span class="comment"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span></span><br><span class="line"><span class="comment"># this limit, it is converted into the dense representation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A value greater than 16000 is totally useless, since at that point the</span></span><br><span class="line"><span class="comment"># dense representation is more memory efficient.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The suggested value is ~ 3000 in order to have the benefits of</span></span><br><span class="line"><span class="comment"># the space efficient encoding without slowing down too much PFADD,</span></span><br><span class="line"><span class="comment"># which is O(N) with the sparse encoding. The value can be raised to</span></span><br><span class="line"><span class="comment"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span></span><br><span class="line"><span class="comment"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span><br><span class="line"><span class="comment"># order to help rehashing the main Redis hash table (the one mapping top-level</span></span><br><span class="line"><span class="comment"># keys to values). The hash table implementation Redis uses (see dict.c)</span></span><br><span class="line"><span class="comment"># performs a lazy rehashing: the more operation you run into a hash table</span></span><br><span class="line"><span class="comment"># that is rehashing, the more rehashing "steps" are performed, so if the</span></span><br><span class="line"><span class="comment"># server is idle the rehashing is never complete and some more memory is used</span></span><br><span class="line"><span class="comment"># by the hash table.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The default is to use this millisecond 10 times every second in order to</span></span><br><span class="line"><span class="comment"># active rehashing the main dictionaries, freeing memory when possible.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If unsure:</span></span><br><span class="line"><span class="comment"># use "activerehashing no" if you have hard latency requirements and it is</span></span><br><span class="line"><span class="comment"># not a good thing in your environment that Redis can reply form time to time</span></span><br><span class="line"><span class="comment"># to queries with 2 milliseconds delay.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># use "activerehashing yes" if you don't have such hard requirements but</span></span><br><span class="line"><span class="comment"># want to free memory asap when possible.</span></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># The client output buffer limits can be used to force disconnection of clients</span></span><br><span class="line"><span class="comment"># that are not reading data from the server fast enough for some reason (a</span></span><br><span class="line"><span class="comment"># common reason is that a Pub/Sub client can't consume messages as fast as the</span></span><br><span class="line"><span class="comment"># publisher can produce them).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The limit can be set differently for the three different classes of clients:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># normal -&gt; normal clients</span></span><br><span class="line"><span class="comment"># slave  -&gt; slave clients and MONITOR clients</span></span><br><span class="line"><span class="comment"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The syntax of every client-output-buffer-limit directive is the following:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A client is immediately disconnected once the hard limit is reached, or if</span></span><br><span class="line"><span class="comment"># the soft limit is reached and remains reached for the specified number of</span></span><br><span class="line"><span class="comment"># seconds (continuously).</span></span><br><span class="line"><span class="comment"># So for instance if the hard limit is 32 megabytes and the soft limit is</span></span><br><span class="line"><span class="comment"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span></span><br><span class="line"><span class="comment"># if the size of the output buffers reach 32 megabytes, but will also get</span></span><br><span class="line"><span class="comment"># disconnected if the client reaches 16 megabytes and continuously overcomes</span></span><br><span class="line"><span class="comment"># the limit for 10 seconds.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default normal clients are not limited because they don't receive data</span></span><br><span class="line"><span class="comment"># without asking (in a push way), but just after a request, so only</span></span><br><span class="line"><span class="comment"># asynchronous clients may create a scenario where data is requested faster</span></span><br><span class="line"><span class="comment"># than it can read.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Instead there is a default limit for pubsub and slave clients, since</span></span><br><span class="line"><span class="comment"># subscribers and slaves receive data in a push fashion.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Both the hard or the soft limit can be disabled by setting them to zero.</span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis calls an internal function to perform many background tasks, like</span></span><br><span class="line"><span class="comment"># closing connections of clients in timeout, purging expired keys that are</span></span><br><span class="line"><span class="comment"># never requested, and so forth.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Not all tasks are performed with the same frequency, but Redis checks for</span></span><br><span class="line"><span class="comment"># tasks to perform accordingly to the specified "hz" value.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># By default "hz" is set to 10. Raising the value will use more CPU when</span></span><br><span class="line"><span class="comment"># Redis is idle, but at the same time will make Redis more responsive when</span></span><br><span class="line"><span class="comment"># there are many keys expiring at the same time, and timeouts may be</span></span><br><span class="line"><span class="comment"># handled with more precision.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The range is between 1 and 500, however a value over 100 is usually not</span></span><br><span class="line"><span class="comment"># a good idea. Most users should use the default of 10 and raise this up to</span></span><br><span class="line"><span class="comment"># 100 only in environments where very low latency is required.</span></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># When a child rewrites the AOF file, if the following option is enabled</span></span><br><span class="line"><span class="comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span></span><br><span class="line"><span class="comment"># in order to commit the file to the disk more incrementally and avoid</span></span><br><span class="line"><span class="comment"># big latency spikes.</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux搭建zookeeper环境</title>
      <link href="/1/"/>
      <url>/1/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux搭建zookeeper环境"><a href="#Linux搭建zookeeper环境" class="headerlink" title="Linux搭建zookeeper环境"></a>Linux搭建zookeeper环境</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ZooKeeper是一个<a href="https://baike.baidu.com/item/分布式/19276232" target="_blank" rel="noopener">分布式</a>的，开放源码的<a href="https://baike.baidu.com/item/分布式应用程序/9854429" target="_blank" rel="noopener">分布式应用程序</a>协调服务，是<a href="https://baike.baidu.com/item/Google" target="_blank" rel="noopener">Google</a>的Chubby一个<a href="https://baike.baidu.com/item/开源/246339" target="_blank" rel="noopener">开源</a>的实现，是Hadoop和<a href="https://baike.baidu.com/item/Hbase/7670213" target="_blank" rel="noopener">Hbase</a>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p>ZooKeeper包含一个简单的原语集，提供Java和C的接口。</p><p>ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口，代码在$zookeeper_home\src\recipes。其中分布锁和队列有<a href="https://baike.baidu.com/item/Java/85979" target="_blank" rel="noopener">Java</a>和C两个版本，选举只有Java版本。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用ssh连接上linux服务器</p><p>在指定目录下载 zookeeper <a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">官方网址</a></p><p>我在linux的/opt目录下载安装的</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">mkdir zookeeper</span><br><span class="line"><span class="built_in">cd</span> zookeeper</span><br><span class="line">wget https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf apache-zookeeper-3.6.2-bin.tar.gz</span><br></pre></td></tr></table></figure><blockquote><p>运行zookeeper 需要Java8的环境 <a href="https://www.yangzhenyu.com.cn/605/#linux%E7%89%88%E6%9C%AC">安装指南</a></p></blockquote><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>进入解压目录的bin目录</p><p><img src="http://img.yzy.ink/image-20210224165656322.png" alt="image-20210224165656322"></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用一下命令查看帮助</span></span><br><span class="line">./zkServer.sh</span><br><span class="line"><span class="comment">#Using config: /opt/apache-zookeeper-3.6.2/bin/../conf/zoo.cfg</span></span><br><span class="line"><span class="comment">#grep: /opt/apache-zookeeper-3.6.2/bin/../conf/zoo.cfg: No such file or directory</span></span><br><span class="line"><span class="comment">#grep: /opt/apache-zookeeper-3.6.2/bin/../conf/zoo.cfg: No such file or directory</span></span><br><span class="line"><span class="comment">#mkdir: cannot create directory ‘’: No such file or directory</span></span><br><span class="line"><span class="comment">#Usage: ./zkServer.sh [--config &lt;conf-dir&gt;] &#123;start|start-#foreground|stop|version|restart|status|print-cmd&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">./zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动调试</span></span><br><span class="line">./zkServer.sh start-foreground</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">./zkServer.shrestart</span><br><span class="line"></span><br><span class="line"><span class="comment">#状态</span></span><br><span class="line">./zkServer status</span><br></pre></td></tr></table></figure><p>默认启动会报错</p><p><img src="http://img.yzy.ink/image-20210224170124632.png" alt="image-20210224170124632"></p><blockquote><p>因为没有没有的配置文件../conf/zoo.cfg: No such file or directory</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入配置文件目录 </span></span><br><span class="line"><span class="built_in">cd</span> conf</span><br><span class="line"><span class="comment">#拷贝默认配置(自行修改参数)</span></span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"><span class="comment">#重新运行</span></span><br><span class="line">./zkServer.sh start</span><br><span class="line"><span class="comment">#启动完毕 默认端口2181</span></span><br></pre></td></tr></table></figure><h3 id="Java-简单连通测试"><a href="#Java-简单连通测试" class="headerlink" title="Java 简单连通测试"></a>Java 简单连通测试</h3><p>maven配置 (最好和服务器版本一致)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java代码 简单连接</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//连接成功后，会回调watcher监听，此连接操作是异步的，执行完new语句后，直接调用后续代码</span></span><br><span class="line">        <span class="comment">//  可指定多台服务地址 127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183</span></span><br><span class="line">        ZooKeeper zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"127.0.0.1:2181"</span>, <span class="number">50000</span>, event -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (Watcher.Event.KeeperState.SyncConnected == event.getState()) &#123;</span><br><span class="line">                <span class="comment">//如果收到了服务端的响应事件,连接成功</span></span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(zooKeeper.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.yzy.ink/image-20210224171515672.png" alt="image-20210224171515672"></p><blockquote><p>输出结果: CONNECTED 说明连接成功</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activeMQ学习指南 - Java基础调用</title>
      <link href="/9471/"/>
      <url>/9471/</url>
      
        <content type="html"><![CDATA[<h1 id="activeMQ学习指南-Java基础调用"><a href="#activeMQ学习指南-Java基础调用" class="headerlink" title="activeMQ学习指南 - Java基础调用"></a>activeMQ学习指南 - Java基础调用</h1><h2 id="安装和运行"><a href="#安装和运行" class="headerlink" title="安装和运行"></a>安装和运行</h2><p><a href="https://www.yangzhenyu.com.cn/19336/">https://www.yangzhenyu.com.cn/19336/</a></p><h2 id="Java-基础例子"><a href="#Java-基础例子" class="headerlink" title="Java 基础例子"></a>Java 基础例子</h2><p>使用idea建立一个Maven项目</p><h2 id="Maven-代码"><a href="#Maven-代码" class="headerlink" title="Maven 代码"></a>Maven 代码</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用变量"><a href="#常用变量" class="headerlink" title="常用变量"></a>常用变量</h2><p>Consumer.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.yangzhenyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQ_NAME = <span class="string">"mq"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQ_PASSWORD = <span class="string">"mq_password"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MQ_BROKET_URL = <span class="string">"tcp://127.0.0.1:61616"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"yzy_queue"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><p>Producer.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.yangzhenyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接工厂</span></span><br><span class="line">        ConnectionFactory factory;</span><br><span class="line">        <span class="comment">// 连接实例</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 收发的线程实例</span></span><br><span class="line">        Session session;</span><br><span class="line">        <span class="comment">// 消息发送目标地址</span></span><br><span class="line">        Destination destination;</span><br><span class="line">        <span class="comment">// 消息创建者</span></span><br><span class="line">        MessageProducer messageProducer;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            factory = <span class="keyword">new</span> ActiveMQConnectionFactory(Constants.MQ_NAME, Constants.MQ_PASSWORD,</span><br><span class="line">                    Constants.MQ_BROKET_URL);</span><br><span class="line">            <span class="comment">// 获取连接实例</span></span><br><span class="line">            connection = factory.createConnection();</span><br><span class="line">            <span class="comment">// 启动连接</span></span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">// 创建接收或发送的线程实例（创建session的时候定义是否要启用事务，且事务类型是Auto_ACKNOWLEDGE也就是消费者成功在Listern中获得消息返回时，会话自动确定用户收到消息）</span></span><br><span class="line">            session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="comment">// 创建队列（返回一个消息目的地）</span></span><br><span class="line">            destination = session.createQueue(Constants.QUEUE_NAME);</span><br><span class="line">            <span class="comment">// 创建消息生产者</span></span><br><span class="line">            messageProducer = session.createProducer(destination);</span><br><span class="line">            <span class="comment">// 创建TextMessage消息实体</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TextMessage message = session.createTextMessage(<span class="string">"我是yzy,这是我的第"</span> + (i + <span class="number">1</span>) + <span class="string">"个消息！"</span>);</span><br><span class="line">                messageProducer.send(message);</span><br><span class="line">                session.commit();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            session.commit();</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><p>Consumer.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.com.yangzhenyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory;</span><br><span class="line">        <span class="comment">// 连接实例</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 收发的线程实例</span></span><br><span class="line">        Session session;</span><br><span class="line">        <span class="comment">// 消息发送目标地址</span></span><br><span class="line">        Destination destination;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化连接工厂</span></span><br><span class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(Constants.MQ_NAME, Constants.MQ_PASSWORD, Constants.MQ_BROKET_URL);</span><br><span class="line">            <span class="comment">// 获取连接实例</span></span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            <span class="comment">// 启动连接</span></span><br><span class="line">            connection.start();</span><br><span class="line">            <span class="comment">// 创建接收或发送的线程实例（消费者就不需要开启事务了）</span></span><br><span class="line">            session = connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">            <span class="comment">// 创建队列（返回一个消息目的地）</span></span><br><span class="line">            destination = session.createQueue(Constants.QUEUE_NAME);</span><br><span class="line">            <span class="comment">// 创建消息消费者</span></span><br><span class="line">            MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">            <span class="comment">//注册消息监听</span></span><br><span class="line">            consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> TextMessage) &#123;</span><br><span class="line">                            System.out.println(((TextMessage) message).getText());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>先运行Consumer.main();</li><li>再运行Producer.main();</li></ul><p>运行结果如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Consumer 收到消息:</span><br><span class="line"></span><br><span class="line">我是yzy,这是我的第1个消息！</span><br><span class="line">我是yzy,这是我的第2个消息！</span><br><span class="line">我是yzy,这是我的第3个消息！</span><br><span class="line">我是yzy,这是我的第4个消息！</span><br><span class="line">我是yzy,这是我的第5个消息！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activeMQ学习指南 - 入门安装和启动</title>
      <link href="/19336/"/>
      <url>/19336/</url>
      
        <content type="html"><![CDATA[<h1 id="activeMQ学习指南-入门安装和启动"><a href="#activeMQ学习指南-入门安装和启动" class="headerlink" title="activeMQ学习指南 - 入门安装和启动"></a>activeMQ学习指南 - 入门安装和启动</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ActiveMQ是一种开源的基于JMS（Java Message Servie）规范的一种消息中间件的实现，ActiveMQ的设计目标是提供标准的，面向消息的，能够跨越多语言和多系统的应用集成消息通信中间件。</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网下载</p><blockquote><p><a href="https://activemq.apache.org/components/artemis/download/" target="_blank" rel="noopener">https://activemq.apache.org/components/artemis/download/</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>解压</li><li>创建Broker</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 目录 d:\activeMQ</span><br><span class="line">PS D:\apache-artemis-2.16.0-bin\apache-artemis-2.16.0\bin&gt; .\artemis create d:\activeMQ  </span><br><span class="line">Creating ActiveMQ Artemis instance at: D:\activeMQ</span><br><span class="line"></span><br><span class="line">// 登录用户名</span><br><span class="line">--user: is a mandatory property!</span><br><span class="line">Please provide the default username:</span><br><span class="line">admin</span><br><span class="line"></span><br><span class="line">// 登录密码</span><br><span class="line">--password: is mandatory with this configuration:</span><br><span class="line">Please provide the default password:</span><br><span class="line"></span><br><span class="line">// 允许匿名</span><br><span class="line">--allow-anonymous | --require-login: is a mandatory property!</span><br><span class="line">Allow anonymous access?, valid values are Y,N,True,False</span><br><span class="line">Y</span><br><span class="line"></span><br><span class="line">Auto tuning journal ...</span><br><span class="line">done! Your system can make 0.03 writes per millisecond, your journal-buffer-timeout will be 37360000</span><br><span class="line"></span><br><span class="line">You can now start the broker by executing:</span><br><span class="line"></span><br><span class="line">   &quot;D:\activeMQ\bin\artemis&quot; run</span><br><span class="line"></span><br><span class="line">// 需要安装成windows服务</span><br><span class="line">Or you can setup the broker as Windows service and run it in the background:</span><br><span class="line"></span><br><span class="line">   &quot;D:\activeMQ\bin\artemis-service.exe&quot; install</span><br><span class="line">   &quot;D:\activeMQ\bin\artemis-service.exe&quot; start</span><br><span class="line"></span><br><span class="line">   To stop the windows service:</span><br><span class="line">      &quot;D:\activeMQ\bin\artemis-service.exe&quot; stop</span><br><span class="line"></span><br><span class="line">   To uninstall the windows service</span><br><span class="line">      &quot;D:\activeMQ\bin\artemis-service.exe&quot; uninstall</span><br></pre></td></tr></table></figure><ul><li>进入目录</li><li>启动</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PS D:\activeMQ\bin&gt; .\artemis.cmd run</span><br><span class="line">     _        _               _</span><br><span class="line">    / \  ____| |_  ___ __  __(_) _____</span><br><span class="line">   / _ \|  _ \ __|/ _ \  \/  | |/  __/</span><br><span class="line">  / ___ \ | \/ |_/  __/ |\/| | |\___ \</span><br><span class="line"> /_/   \_\|   \__\____|_|  |_|_|/___ /</span><br><span class="line"> Apache ActiveMQ Artemis 2.16.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2021-01-07 14:20:21,182 INFO  [org.apache.activemq.artemis.integration.bootstrap] AMQ101000: Starting ActiveMQ Artemis Server</span><br><span class="line">2021-01-07 14:20:22,693 INFO  [org.apache.activemq.artemis.core.server] AMQ221000: live Message Broker is starting with configuration Broker Configuration (clustered=false,journalDirectory=data/journal,bindingsDirectory=data/bindings,largeMessagesDirectory=data/large-messages,pagingDirectory=data/paging)</span><br><span class="line">2021-01-07 14:20:22,746 INFO  [org.apache.activemq.artemis.core.server] AMQ221013: Using NIO Journal</span><br><span class="line">2021-01-07 14:20:22,821 INFO  [org.apache.activemq.artemis.core.server] AMQ221057: Global Max Size is being adjusted to 1/2 of the JVM max size (-Xmx). being defined as 536,870,912</span><br><span class="line">2021-01-07 14:20:22,852 INFO  [org.apache.activemq.artemis.core.server] AMQ221043: Protocol module found: [artemis-server]. Adding protocol support for: CORE</span><br><span class="line">2021-01-07 14:20:22,854 INFO  [org.apache.activemq.artemis.core.server] AMQ221043: Protocol module found: [artemis-amqp-protocol]. Adding protocol support for: AMQP</span><br><span class="line">2021-01-07 14:20:22,855 INFO  [org.apache.activemq.artemis.core.server] AMQ221043: Protocol module found: [artemis-hornetq-protocol]. Adding protocol support for: HORNETQ</span><br><span class="line">2021-01-07 14:20:22,856 INFO  [org.apache.activemq.artemis.core.server] AMQ221043: Protocol module found: [artemis-mqtt-protocol]. Adding protocol support for: MQTT</span><br><span class="line">2021-01-07 14:20:22,857 INFO  [org.apache.activemq.artemis.core.server] AMQ221043: Protocol module found: [artemis-openwire-protocol]. Adding protocol support for: OPENWIRE</span><br><span class="line">2021-01-07 14:20:22,858 INFO  [org.apache.activemq.artemis.core.server] AMQ221043: Protocol module found: [artemis-stomp-protocol]. Adding protocol support for: STOMP</span><br><span class="line">2021-01-07 14:20:22,980 INFO  [org.apache.activemq.artemis.core.server] AMQ221034: Waiting indefinitely to obtain live lock</span><br><span class="line">2021-01-07 14:20:22,980 INFO  [org.apache.activemq.artemis.core.server] AMQ221035: Live Server Obtained live lock</span><br><span class="line">2021-01-07 14:20:23,733 INFO  [org.apache.activemq.artemis.core.server] AMQ221080: Deploying address DLQ supporting [ANYCAST]</span><br><span class="line">2021-01-07 14:20:23,825 INFO  [org.apache.activemq.artemis.core.server] AMQ221003: Deploying ANYCAST queue DLQ on address DLQ</span><br><span class="line">2021-01-07 14:20:23,932 INFO  [org.apache.activemq.artemis.core.server] AMQ221080: Deploying address ExpiryQueue supporting [ANYCAST]</span><br><span class="line">2021-01-07 14:20:23,963 INFO  [org.apache.activemq.artemis.core.server] AMQ221003: Deploying ANYCAST queue ExpiryQueue on address ExpiryQueue</span><br><span class="line">2021-01-07 14:20:25,597 INFO  [org.apache.activemq.artemis.core.server] AMQ221020: Started NIO Acceptor at 0.0.0.0:61616 for protocols [CORE,MQTT,AMQP,STOMP,HORNETQ,OPENWIRE]</span><br><span class="line">2021-01-07 14:20:25,614 INFO  [org.apache.activemq.artemis.core.server] AMQ221020: Started NIO Acceptor at 0.0.0.0:5445 for protocols [HORNETQ,STOMP]</span><br><span class="line">2021-01-07 14:20:25,625 INFO  [org.apache.activemq.artemis.core.server] AMQ221020: Started NIO Acceptor at 0.0.0.0:5672 for protocols [AMQP]</span><br><span class="line">2021-01-07 14:20:25,638 INFO  [org.apache.activemq.artemis.core.server] AMQ221020: Started NIO Acceptor at 0.0.0.0:1883 for protocols [MQTT]</span><br><span class="line">2021-01-07 14:20:25,651 INFO  [org.apache.activemq.artemis.core.server] AMQ221020: Started NIO Acceptor at 0.0.0.0:61613 for protocols [STOMP]</span><br><span class="line">2021-01-07 14:20:25,714 INFO  [org.apache.activemq.artemis.core.server] AMQ221007: Server is now live</span><br><span class="line">2021-01-07 14:20:25,714 INFO  [org.apache.activemq.artemis.core.server] AMQ221001: Apache ActiveMQ Artemis Message Broker version 2.16.0 [0.0.0.0, nodeID=6c4d3fb3-50b0-11eb-9ccb-78e40011f8fc]</span><br><span class="line">2021-01-07 14:20:26,336 INFO  [org.apache.activemq.hawtio.branding.PluginContextListener] Initialized activemq-branding plugin</span><br><span class="line">2021-01-07 14:20:26,509 INFO  [org.apache.activemq.hawtio.plugin.PluginContextListener] Initialized artemis-plugin plugin</span><br><span class="line">2021-01-07 14:20:28,249 INFO  [io.hawt.HawtioContextListener] Initialising hawtio services</span><br><span class="line">2021-01-07 14:20:28,270 INFO  [io.hawt.system.ConfigManager] Configuration will be discovered via system properties</span><br><span class="line">2021-01-07 14:20:28,274 INFO  [io.hawt.jmx.JmxTreeWatcher] Welcome to Hawtio 2.11.0</span><br><span class="line">2021-01-07 14:20:28,281 INFO  [io.hawt.web.auth.AuthenticationConfiguration] Starting hawtio authentication filter, JAAS realm: &quot;activemq&quot; authorized role(s): &quot;amq&quot; role principal classes: &quot;org.apache.activemq.artemis.spi.core.security.jaas.RolePrincipal&quot;</span><br><span class="line">2021-01-07 14:20:28,299 INFO  [io.hawt.web.proxy.ProxyServlet] Proxy servlet is disabled</span><br><span class="line">2021-01-07 14:20:28,306 INFO  [io.hawt.web.servlets.JolokiaConfiguredAgentServlet] Jolokia overridden property: [key=policyLocation, value=file:/d:/activeMQ/etc/\jolokia-access.xml]</span><br><span class="line">2021-01-07 14:20:28,991 INFO  [org.apache.activemq.artemis] AMQ241001: HTTP Server started at http://localhost:8161</span><br><span class="line">2021-01-07 14:20:28,991 INFO  [org.apache.activemq.artemis] AMQ241002: Artemis Jolokia REST API available at http://localhost:8161/console/jolokia</span><br><span class="line">2021-01-07 14:20:28,992 INFO  [org.apache.activemq.artemis] AMQ241004: Artemis Console available at http://localhost:8161/console</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>访问 <a href="http://localhost:8161/console" target="_blank" rel="noopener">http://localhost:8161/console</a></p>]]></content>
      
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v2ray Cloudflare CDN 加速访问 科学</title>
      <link href="/61662/"/>
      <url>/61662/</url>
      
        <content type="html"><![CDATA[<h2 id="v2ray-Cloudflare-CDN-加速访问-科学"><a href="#v2ray-Cloudflare-CDN-加速访问-科学" class="headerlink" title="v2ray Cloudflare CDN 加速访问 科学"></a>v2ray Cloudflare CDN 加速访问 科学</h2><p>本质原理是将v2ray伪装成web服务，然后利用CDN进行流量转发，从而隐藏真实VPS地址。</p><h3 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0.准备工作"></a>0.准备工作</h3><ol><li>自有域名，可配置解析</li><li>cloudflare帐号</li><li>vps</li></ol><h3 id="1-cloudflare-设置"><a href="#1-cloudflare-设置" class="headerlink" title="1.cloudflare 设置"></a>1.cloudflare 设置</h3><p>登录 Cloudflare 进去 添加域名 设置解析ip地址到 VPS的ip地址 </p><p>更换原DNS为Cloudflare的DNS地址</p><pre><code>christina.ns.cloudflare.comsullivan.ns.cloudflare.com</code></pre><blockquote><p>先在dns那边配置为 DNS ONLY </p></blockquote><h3 id="2-vps安装-v2ay"><a href="#2-vps安装-v2ay" class="headerlink" title="2.vps安装 v2ay"></a>2.vps安装 v2ay</h3><pre><code>bash &lt;(curl -s -L https://git.io/v2ray.sh)</code></pre><p>一键安装脚本</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>传输协议 WebSocket + TLS，要选择4</li><li>端口不能为80,443</li><li>域名写上面Cloudflare的填写的</li><li>最好伪装一下</li><li>啥环境没有安装啥</li></ol><pre><code># centos安装环境yum install unzip -yyum install curl -y</code></pre><p>安装完后v2ray常用命令</p><pre><code>v2ray url 查看 V2Ray 链接v2ray info 查看 V2Ray 配置信息v2ray config 修改 V2Ray 配置v2ray link 生成 V2Ray 配置文件链接v2ray infolink 生成 V2Ray 配置信息链接v2ray qr 生成 V2Ray 配置二维码链接v2ray ss 修改 Shadowsocks 配置v2ray ssinfo 查看 Shadowsocks 配置信息v2ray ssqr 生成 Shadowsocks 配置二维码链接v2ray status 查看 V2Ray 运行状态v2ray start 启动 V2Rayv2ray stop 停止 V2Rayv2ray restart 重启 V2Rayv2ray log 查看 V2Ray 运行日志v2ray update 更新 V2Rayv2ray update.sh 更新 V2Ray 管理脚本v2ray uninstall 卸载 V2Ray</code></pre><p>检查 v2ray url 正常 同时 caddy 正常 域名访问可以出现页面后这步OK</p><h3 id="安装BBR-Plus"><a href="#安装BBR-Plus" class="headerlink" title="安装BBR Plus"></a>安装BBR Plus</h3><pre><code># 升级内核安装wget &quot;https://github.com/cx9208/bbrplus/raw/master/ok_bbrplus_centos.sh&quot; &amp;&amp; chmod +x ok_bbrplus_centos.sh &amp;&amp; ./ok_bbrplus_centos.sh# 使用该脚本切换到bbr_plus以及配置优化wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; ./tcp.sh# 查看状态lsmod | grep bbr# 查看当前已经使用的TCP拥塞控制配置cat /proc/sys/net/ipv4/tcp_congestion_control# 查看当前配置cat /etc/sysctl.conf#如果没开启,则使用下面命令sudo modprobe tcp_bbrplus</code></pre><p>以上来自<a href="https://mrdear.cn/posts/tools-v2ray-cloudflare.html" target="_blank" rel="noopener">网络教程</a> centos7 安装</p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><pre><code># 查看防火墙状态firewall-cmd --state# 关闭防火墙systemctl stop firewalld.service# 关闭防火墙开机启动systemctl disable firewalld.service</code></pre><h3 id="设置Cloudflare开启CDN"><a href="#设置Cloudflare开启CDN" class="headerlink" title="设置Cloudflare开启CDN"></a>设置Cloudflare开启CDN</h3><p>在Cloudflare 后台 dns设置 灰色的小云点击一下 设置为已代理</p><h3 id="偷偷使用吧"><a href="#偷偷使用吧" class="headerlink" title="偷偷使用吧"></a>偷偷使用吧</h3><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梯子 </tag>
            
            <tag> google </tag>
            
            <tag> vps </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发工具之Visual Studio Code</title>
      <link href="/21078/"/>
      <url>/21078/</url>
      
        <content type="html"><![CDATA[<h2 id="Java开发工具之Visual-Studio-Code"><a href="#Java开发工具之Visual-Studio-Code" class="headerlink" title="Java开发工具之Visual Studio Code"></a>Java开发工具之Visual Studio Code</h2><blockquote><p>子曰：工欲善其事，必先利其器。</p></blockquote><blockquote><p>先聊点使用这个开发Java的背景故事,从事Java开发的程序就不得不提 伟大的开发利器IDEA了,其一就是:但是最近idea民间激活崩盘的厉害,一不小心就不能使用了,本人也是,三天两头去找激活码激活.再就是:本人开发的工作环境条件比较苛刻,不能使用任何收费软件(原因….).于是我去试用了一两周的eclipse软件开发.非常极其的痛苦,非常慢的打开速度,加写代码时候不定时的卡顿,弱鸡的代码的提示,还有莫名其妙的红色的X一直在你面前闪!码代码的体验太过糟糕了.于是在新年前最后一个周末,我尝试找新的编码工具.</p></blockquote><h3 id="1-Visual-Studio-Code"><a href="#1-Visual-Studio-Code" class="headerlink" title="1.Visual Studio Code"></a>1.Visual Studio Code</h3><p>Microsoft在2015年4月30日Build 开发者大会上正式宣布了 Visual Studio Code 项目：一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器。</p><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">下载</a> 安装 一步步 傻瓜式安装就行了</p><blockquote><p>作为Java程序员使用微软的东西.)耻辱啊!! 嗯 真香!~</p></blockquote><h3 id="2-打开Visual-Studio-Code下载对应的插件"><a href="#2-打开Visual-Studio-Code下载对应的插件" class="headerlink" title="2.打开Visual Studio Code下载对应的插件"></a>2.打开Visual Studio Code下载对应的插件</h3><p><img src="https://gitee.com/yttrium2016/img/raw/master/20200118171224769.PNG" alt=""></p><p>以下是我自己根据需求下载的插接</p><ul><li>Java Extension Pack <strong><em>Java开发环境</em></strong></li><li>Spring Boot Extension Pack <strong><em>Spring开发提示</em></strong></li><li>Maven for Java  <strong><em>Java包管理工具</em></strong></li><li>Git Project Manager <strong><em>Git管理工具</em></strong></li><li>FreeMarker <strong><em>FreeMarker代码高亮</em></strong></li><li>Lombok Annotations Support for VS Code <strong><em>Lombok 可以少写好多Java的get set 方法</em></strong></li><li>Tomcat for Java <strong><em>Tomcat工具(还是要自己下载TOMCAT)</em></strong></li><li>XML <strong><em>XML文件支持</em></strong></li><li>Checkstyle for Java <strong><em>Java语法高亮 检测</em></strong></li><li>HTML Snippets <strong><em>html代码提示</em></strong></li><li>Eclipse Keymap <strong><em>eclipse快捷键 可以选择idea快捷键</em></strong></li><li>Debugger for Java <strong><em>Java调试用的</em></strong></li></ul><h3 id="3-打开Visual-Studio-Code对应的设置"><a href="#3-打开Visual-Studio-Code对应的设置" class="headerlink" title="3.打开Visual Studio Code对应的设置"></a>3.打开Visual Studio Code对应的设置</h3><pre><code>{    &quot;editor.suggestSelection&quot;: &quot;first&quot;,    &quot;vsintellicode.modify.editor.suggestSelection&quot;: &quot;automaticallyOverrodeDefaultValue&quot;,    &quot;maven.executable.path&quot;: &quot;C:\\Development\\apache-maven-3.6.3\\bin\\mvn&quot;,    &quot;java.configuration.maven.userSettings&quot;: &quot;C:\\Development\\apache-maven-3.6.3\\conf\\settings.xml&quot;,    &quot;search.exclude&quot;: {        &quot;**/node_modules&quot;: true,        &quot;**/bower_components&quot;: true,        &quot;**/target&quot;: true,        &quot;**/logs&quot;: true    },    &quot;java.jdt.ls.vmargs&quot;: &quot;-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -javaagent:\&quot;C:\\Users\\Y-PC\\.vscode\\extensions\\gabrielbb.vscode-lombok-0.9.9/server/lombok.jar\&quot;&quot;,    &quot;emmet.triggerExpansionOnTab&quot;: true,    &quot;files.associations&quot;: {        &quot;*.js&quot;: &quot;html&quot;,        &quot;*.vue&quot;: &quot;html&quot;,        &quot;*.ftl&quot;: &quot;html&quot;    }}</code></pre><h3 id="4-Java类快速建立的配置"><a href="#4-Java类快速建立的配置" class="headerlink" title="4.Java类快速建立的配置"></a>4.Java类快速建立的配置</h3><pre><code>设置 -&gt; 用户代码块 -&gt; Java{    &quot;Java Class&quot;: {        &quot;prefix&quot;: &quot;java&quot;,        &quot;body&quot;: [            &quot;package ${1:包名};&quot;,            &quot;&quot;,            &quot;/**&quot;,            &quot;* ${2:备注}&quot;,            &quot;* Created By 杨振宇&quot;,            &quot;* Date: $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE&quot;,            &quot;* Time: $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND&quot;,            &quot;*/&quot;,            &quot;public class ${3:ClassName} {&quot;,            &quot;&quot;,            &quot;}&quot;        ],        &quot;description&quot;: &quot;Java Class&quot;    }}使用 -&gt; java文件建立后 输入java -&gt; Tab 就会出现对应的代码块了</code></pre><blockquote><p>目前就这点配置 以后待补充</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己的Linux服务器 环境搭建</title>
      <link href="/35329/"/>
      <url>/35329/</url>
      
        <content type="html"><![CDATA[<h2 id="自己的Linux服务器-环境搭建"><a href="#自己的Linux服务器-环境搭建" class="headerlink" title="自己的Linux服务器 环境搭建"></a>自己的Linux服务器 环境搭建</h2><blockquote><p>一直想做的自己服务器搭建配置环境的记录,让自己下次搭建起来更方便,正好双十二的时候百度智能云新用户 服务器打折 80元一年 旧的也正好到期了 赶快买一个先 哈哈</p></blockquote><p>备注:</p><blockquote><p>服务器版本 centos7.6版本</p></blockquote><ol><li><a href="#1-ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8">1.ssh连接服务器</a></li><li><a href="#2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8D%A2%E6%BA%90">2.服务器换源</a></li><li><a href="#3-%E5%AE%89%E8%A3%85nginx">3.安装nginx</a></li><li><a href="#4-Java%E7%8E%AF%E5%A2%83">4.Java环境</a></li><li><a href="#5-Mysql/MariaDB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%8E%AF%E5%A2%83">5.Mysql/MariaDB数据库环境</a></li></ol><h3 id="1-ssh连接服务器"><a href="#1-ssh连接服务器" class="headerlink" title="1.ssh连接服务器"></a>1.ssh连接服务器</h3><p>说到这个我搞出来了一个乌龙,买了服务器后 因为没有时间 2天后我才第一次尝试连接,熟练的打开Xshell-&gt;熟练的输入ip-&gt;开始连接-&gt;出现输入用户名root-&gt;输入密码!!! 然后没有熟悉的登录成功,再三确认密码没有错,再连 继续连不上,网页vnc连接成功,再返回更换新密码 重装系统后依然无效的情况下我提交了工单,返回来来回回沟通了N个回合,最后发现 我ip输入错了,没错 ip 结尾少了一位 复制的时候没有复制过来,白白浪费了2天时间.被自己蠢到了</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20191221230138191.PNG" alt=""></p><blockquote><p>这个图都没有出来的兄弟 先去百度怎么ssh连接 服务器吧)加油</p></blockquote><h3 id="2-服务器换源"><a href="#2-服务器换源" class="headerlink" title="2.服务器换源"></a>2.服务器换源</h3><p>毕竟在国内 软件源还是换成国内的比较好.</p><pre><code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo或者curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code></pre><h3 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3.安装nginx"></a>3.安装nginx</h3><p>nginx动态代理,默认通过代理访问各个程序</p><pre><code>yum install nginx </code></pre><p>安装过程中按y下一步 安装完后可以通过 </p><pre><code>whereis nginx</code></pre><p>查看安装后的目录:</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20191221231411016.PNG" alt=""></p><p>设置开机自启动</p><pre><code>sudo systemctl enable nginx</code></pre><p><img src="https://gitee.com/yttrium2016/img/raw/master/20191221233253832.PNG" alt=""></p><p>nginx 常用命令</p><pre><code>1.启动：nginx2.测试Nginx配置是否正确：nginx -t3.重启配置nginx -s reload4.查看nginx的进程号ps -ef |grep nginx5.nginx停止服务nginx -s stopkill -9 pid</code></pre><p>默认配置放在/etc/nginx/conf.d/位置 例:</p><pre><code>// xxx.confserver{    listen 80;    server_name xxx.yangzhenyu.com.cn;    location / {        proxy_pass http://localhost:888;        proxy_redirect off;        proxy_set_header Host $http_host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header X-Forwarded-Proto $scheme;    }    access_log off; #access_log end    error_log /dev/null; #error_log end    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   /var/www/html;    }}</code></pre><p>输入对应的服务器ip 能出现画面就说明 nginx安装成功了</p><h3 id="4-Java环境"><a href="#4-Java环境" class="headerlink" title="4.Java环境"></a>4.Java环境</h3><ul><li>安装oracle的JDK版本教程</li></ul><p>参照博客中linux版本Java环境的安装方法</p><p>地址:<a href="https://www.yangzhenyu.com.cn/605/#linux%E7%89%88%E6%9C%AC">linux版本JDK安装</a> </p><ul><li><p>安装openjdk</p><p>  yum install java-1.8.0-openjdk</p></li></ul><p>安装对应版本版本的JDK</p><pre><code>java -version</code></pre><p><img src="https://gitee.com/yttrium2016/img/raw/master/20191221235218340.PNG" alt=""></p><h3 id="5-Mysql-MariaDB数据库环境"><a href="#5-Mysql-MariaDB数据库环境" class="headerlink" title="5.Mysql/MariaDB数据库环境"></a>5.Mysql/MariaDB数据库环境</h3><blockquote><p>个人喜欢比较喜欢MariaDB 不了解的可以去了解一下 就当mysql用一模一样没有任何区别</p></blockquote><ul><li>设置下载源</li></ul><pre><code>vim /etc/yum.repos.d/mariadb.repo内容:[mariadb]name = MariaDBbaseurl = http://yum.mariadb.org/10.1/centos7-amd64gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDBgpgcheck=1</code></pre><ul><li>替换国内的地址</li></ul><pre><code>替换源地址sudo sed -i &apos;s#yum\.mariadb\.org#mirrors.ustc.edu.cn/mariadb/yum#&apos; /etc/yum.repos.d/mariadb.repo强制使用 IPv4sudo sed -i &apos;s#//mirrors.ustc.edu.cn#//ipv4.mirrors.ustc.edu.cn#g&apos; /etc/yum.repos.d/mariadb.repo</code></pre><ul><li><p>安装</p><pre><code>yum -y install MariaDB-server MariaDB-client</code></pre><p>  <img src="https://gitee.com/yttrium2016/img/raw/master/20191222001743178.PNG" alt=""></p></li><li><p>常用命令</p><pre><code>1.启动服务systemctl start mariadb2.设置开机启动systemctl enable mariadb3.重新启动systemctl restart mariadb4.停止MariaDBsystemctl stop mariadb</code></pre></li><li><p>Mysql设置</p>  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">//命令:</span><br><span class="line">mysql_secure_installation</span><br><span class="line">//首先是设置密码，会提示先输入密码(初次运行直接回车)</span><br><span class="line">Enter current password for root (enter for none):</span><br></pre></td></tr></table></figure><pre><code>//设置密码(是否设置root用户密码，输入y并回车或直接回车)Set root password? [Y/n]//设置root用户的密码New password: //再输入一次你设置的密码Re-enter new password: //是否删除匿名用户，回车Remove anonymous users? [Y/n]//是否禁止root远程登录,回车（后面授权配置）Disallow root login remotely? [Y/n]//是否删除test数据库，回车Remove test database and access to it? [Y/n]//是否重新加载权限表，回车Reload privilege tables now? [Y/n]//登录mysql -uroot -p1234//MYSQL 新建远程用户(用户名:yzy,密码:aaa1234)GRANT ALL PRIVILEGES ON *.* TO yzy@&quot;%&quot; IDENTIFIED BY &quot;aaa1234&quot;;//刷新权限FLUSH PRIVILEGES;</code></pre></li><li><p>设置字符集UTF-8</p><pre><code>//编辑/etc/my.cnf.d/server.cnfvim /etc/my.cnf.d/server.cnf在[mysqld]标签下添加下面内容init_connect=&apos;SET collation_connection = utf8_unicode_ci&apos; init_connect=&apos;SET NAMES utf8&apos; character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake//编辑/etc/my.cnf.d/client.cnfvim /etc/my.cnf.d/client.cnf//在[client]标签下添加下面内容default-character-set=utf8//编辑/etc/my.cnf.d/mysql-clients.cnfvim /etc/my.cnf.d/mysql-clients.cnf//在[mysql]标签下添加下面内容default-character-set=utf8//最后重启systemctl restart mariadb</code></pre><p>   最后就可以远程访问了<br>   <img src="https://gitee.com/yttrium2016/img/raw/master/20191222004353506.PNG" alt=""></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境变量 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发工具环境变量配置</title>
      <link href="/605/"/>
      <url>/605/</url>
      
        <content type="html"><![CDATA[<h2 id="开发工具环境变量配置"><a href="#开发工具环境变量配置" class="headerlink" title="开发工具环境变量配置"></a>开发工具环境变量配置</h2><blockquote><p>子曰：工欲善其事，必先利其器。</p></blockquote><blockquote><p>自己留作记录 方便查找 再次配置</p></blockquote><p>必备程序列表[下一步下一步就OK的无脑安装的软件,主要是我自己电脑必备的]:</p><ol><li><a href="https://winscp.net/eng/docs/lang:chs" title="WINSCP" target="_blank" rel="noopener">winSCP(ftp,linux上传下载文件)</a></li><li><a href="https://www.cr173.com/soft/2907.html" target="_blank" rel="noopener">notepad++ 很方便的文本查看软件</a></li><li><a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">Xshell 6 ssh软件(个人版本好像免费)</a></li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VC CODE (微软难得出的良心玩意)</a></li><li><a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="noopener">HBuilderX(有时候写写跨端小程序)</a></li><li><a href="https://www.baidu.com/s?wd=Navicat%20Premium%2012" title="自己的百度云" target="_blank" rel="noopener">Navicat Premium 12</a></li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree GIT可视化工具用起来非常的爽</a></li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h4 id="windows版本"><a href="#windows版本" class="headerlink" title="windows版本"></a>windows版本</h4><ul><li>JDK下载 <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" title="地址" target="_blank" rel="noopener">地址</a></li><li>一步步下一步安装 直到完毕 记录安装目录 如[C:\Program Files\Java\jdk1.8.0_231]</li><li><p>环境变量配置</p><pre><code>计算机→属性→高级系统设置→高级→环境变量系统变量→新建 JAVA_HOME 变量 。变量值填写jdk的安装目录（C:\Program Files\Java\jdk1.8.0_231)系统变量→寻找 Path 变量→编辑在变量值最后输入 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）系统变量→新建 CLASSPATH 变量变量值填写   .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一点）</code></pre></li></ul><h4 id="linux版本"><a href="#linux版本" class="headerlink" title="linux版本"></a>linux版本</h4><ul><li>JDK下载 <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" title="地址" target="_blank" rel="noopener">地址</a></li><li>使用winscp 上传到linux服务器上</li><li>使用命令 tar -zxvf jdk-8u231-linux-arm64-vfp-hflt.tar.gz 解压</li><li>使用命令 mkdir /usr/java 建立目录文件夹</li><li>使用命令 mv jdk1.8.0_231/ /usr/java 移动到Java主目录 </li><li><p>修改环境变量 vim /etc/profile</p><pre><code>export JAVA_HOME=/usr/java/jdk1.8.0_231export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATHexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/binexport PATH=$PATH:${JAVA_PATH}</code></pre></li><li><p>然后，保存并退出(按：wq!)</p></li><li>使用命令 source /etc/profile让profile 使文件立即生效</li><li>使用命令 java -version 检测</li></ul><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><ul><li>idea下载 <a href="http://www.jetbrains.com/idea/" title="idea" target="_blank" rel="noopener">地址</a></li><li>一步步下一步安装 直到完毕</li><li><del>激活:(2020年7月到期)</del> 已经失效了</li><li>新方法 <a href="http://idea.94goo.com/key" target="_blank" rel="noopener">神秘代码:666</a> <a href="http://idea.itmatu.com/key" target="_blank" rel="noopener">神秘代码:666</a></li></ul><h3 id="MarkdownPad2"><a href="#MarkdownPad2" class="headerlink" title="MarkdownPad2"></a>MarkdownPad2</h3><blockquote><p>来源于：<a href="https://blog.csdn.net/weixin_40612082/article/details/80454318" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40612082/article/details/80454318</a></p></blockquote><ul><li>下载MarkdownPad2 <a href="http://markdownpad.com/download.html" target="_blank" rel="noopener">地址</a></li><li>一步步下一步安装 直到完毕</li><li><p>激活:Enter Key</p><pre><code>Email address: Soar360@live.com License Key:GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</code></pre></li><li><p>汉化:在设置中设置简体中文就可以了</p></li><li>win10需要额外的插件<blockquote><p><a href="https://pan.baidu.com/s/1qY7LKba" target="_blank" rel="noopener">https://pan.baidu.com/s/1qY7LKba</a></p></blockquote></li></ul><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><ul><li>下载nodejs <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">地址</a></li><li>一步步下一步安装 直到完毕</li><li><p>切换源为淘宝的镜像源直接命令行的设置</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre></li><li><p>还原命令</p><pre><code>npm config set registry https://registry.npmjs.org</code></pre></li></ul><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><ul><li>下载Maven <a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">地址</a></li><li>解压到指定目录 例 C:\Development\apache-maven-3.6.3</li><li><p>环境变量配置:</p><pre><code>计算机→属性→高级系统设置→高级→环境变量系统变量→新建 MAVEN_HOME 变量 。变量值填写MAVEN的目录（C:\Development\apache-maven-3.6.3)系统变量→寻找 Path 变量→编辑在变量值最后输入 %MAVEN_HOME%\bin;（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）</code></pre></li><li><p>maven 配置:</p><pre><code>打开 maven 安装目录 \conf\setting.xml 文件加上&lt;localRepository&gt;D:\MavenRepo&lt;/localRepository&gt;配置阿里云镜像&lt;mirror&gt;　　    &lt;id&gt;alimaven&lt;/id&gt;　　    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;　　    &lt;name&gt;aliyun maven&lt;/name&gt;　　    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;&lt;/mirror&gt;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iconfont图标库 一键下载工具开发记录</title>
      <link href="/33600/"/>
      <url>/33600/</url>
      
        <content type="html"><![CDATA[<h3 id="iconfont图标库-一键下载工具开发记录"><a href="#iconfont图标库-一键下载工具开发记录" class="headerlink" title="iconfont图标库 一键下载工具开发记录"></a>iconfont图标库 一键下载工具开发记录</h3><p>Github源码地址:<a href="https://github.com/yttrium2016/iconfontTools" target="_blank" rel="noopener">https://github.com/yttrium2016/iconfontTools</a></p><p>软件下载地址:<a href="https://github.com/yttrium2016/iconfontTools/releases" target="_blank" rel="noopener">发布地址</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>最近自己想自己制作个App在收集图标 给自己开发使用。</p><p>于是找了很有名的[<strong><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">图标库</a></strong>]去找图标但是本来觉得很容易的一件事没想到困难重重,不过作为一个免费的信息提供者,阿里巴巴图标库已经做到了很好很好了.</p></blockquote><h4 id="遇到的几个问题"><a href="#遇到的几个问题" class="headerlink" title="遇到的几个问题"></a>遇到的几个问题</h4><p>我是用于App的开发,我对svg图片的使用不是很明白,所以我选择简单的下载PNG格式的图片加入自己项目中,从中发现了几个问题</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621727.png" alt=""></p><p>随便找的一个图标库,我想下载对应的所有图标</p><p>第一步,登录 (<a href="https://github.com/" target="_blank" rel="noopener">Github</a>授权,微博授权,内部员工帐号)</p><p>　程序员都有<a href="https://github.com/" target="_blank" rel="noopener">Github</a>帐号的吧登录应该不成问题。</p><p>第二步,点击每个图片下载。(放弃)</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621731.png" alt=""><br><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621733.png" alt=""></p><p>真的是太麻烦了。几十个图标要点几十次才下载完成,耗时耗力。</p><p>第三步,批量下载 (可以考虑)</p><p>我发现可以通过把喜欢的图片加入购物车来批量下载。</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621737.png" alt=""><br><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621739.png" alt=""></p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621743.png" alt=""><br><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621746.png" alt=""></p><p>本来觉得这个完美的解决了我的需求。随后发现了一个很坑爹的地方。</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621750.png" alt=""></p><p>没错,当图标个数大于20的时候就会不让下载,也就是当一个图标库里面图标个数大于20的时候你要下载图标的时候就要</p><ol><li>先用鼠标把前20个图标加入购物车</li><li>点击购物车去下载对应图标</li><li>在把购物车清空</li><li>在点接下来的20个图标加入购物车</li><li>在下载对应的图标</li><li>……</li><li>最后下载的一堆压缩包 解压复制出来。</li></ol><blockquote><p>太麻烦了,对我们来说只是想下载40-50个图标 却要在网页上反复操作很多很多次,作为一个创作型程序员来说,有需求,有问题,就让我们用程序来解决问题。</p></blockquote><h3 id="准备开发iconfont图标下载工具"><a href="#准备开发iconfont图标下载工具" class="headerlink" title="准备开发iconfont图标下载工具"></a>准备开发iconfont图标下载工具</h3><hr><p>根据上面的想法,我萌生了开发一个自己使用的小工具的想法.</p><p>功能设计:</p><ol><li>首先,输入网址(编号)自动获取所有当个库中所有图标.</li><li>使用批量下载,根据获取的图标个数 进行(num/20)次下载 下载完所有图标</li><li>解压所有下载完成后的压缩包</li><li>把所有的解压完的图标复制到统一文件夹</li><li>清除多余的无用缓存文件</li><li>最好有可以设置的下载参数的配置</li><li>其他可以优化的逻辑..</li></ol><blockquote><p>本人使用的技术栈是Java,所以用Java的代码编写了对应的这个小工具.其实主要是记录下开发的思路,有了之后用什么代码实现而已.</p></blockquote><h3 id="1-根据ID或者网页获取一个库中的所有图标"><a href="#1-根据ID或者网页获取一个库中的所有图标" class="headerlink" title="1.根据ID或者网页获取一个库中的所有图标."></a>1.根据ID或者网页获取一个库中的所有图标.</h3><hr><p>根据对网页的分析得到,对应的图标都是页面请求完成后通过JS生成的,按F12通过网页的请求分析得到</p><p>通过调用接口获取到了对应的图标列表信息</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621752.png" alt=""><br><img src="https://gitee.com/yttrium2016/img/raw/master/20190716134621756.png" alt=""><br><img src="https://gitee.com/yttrium2016/img/raw/master/20190716135624428.png" alt=""></p><p>很意外的很轻松的获取了每个图标的详细信息.</p><p>接口整理</p><p>　　URL地址:<a href="https://www.iconfont.cn/api/collection/detail.json" target="_blank" rel="noopener">https://www.iconfont.cn/api/collection/detail.json</a></p><p>　　请求必填参数:id</p><p>　　该方法不需要登录验证.</p><p>Java代码实现</p><pre><code>String url = &quot;https://www.iconfont.cn/api/collection/detail.json?id=&quot; + cid;Connection.Response response;try {    response = Jsoup.connect(url).ignoreContentType(true).execute();    String json = response.body();// 获取所有的图标信息} catch (IOException e) {    throw new RuntimeException(&quot;获取出错&quot; + e.getMessage());}</code></pre><blockquote><p>使用了<a href="https://baike.baidu.com/item/jsoup" target="_blank" rel="noopener">Jsoup</a>作 HTML解析器 使用还是很方面的,做简单的爬虫,页面获取工作还是很好的.</p></blockquote><h3 id="2-将所有的图标下载下来-难点"><a href="#2-将所有的图标下载下来-难点" class="headerlink" title="2. 将所有的图标下载下来(难点)"></a>2. 将所有的图标下载下来(难点)</h3><hr><h4 id="难点1-下载接口的参数分析"><a href="#难点1-下载接口的参数分析" class="headerlink" title="难点1 下载接口的参数分析"></a>难点1 下载接口的参数分析</h4><p>还是通过F12点击下载,查看得到下载的接口为</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716142511710.png" alt=""></p><p><strong>接口整理</strong></p><p>　　URL地址: <a href="https://www.iconfont.cn/api/icon/downloadIcon" target="_blank" rel="noopener">https://www.iconfont.cn/api/icon/downloadIcon</a></p><p>　　请求参数:</p><p>　　　　type: 下载图标类型</p><p>　　　　　　png:png图标类型</p><p>　　　　　　svg:svg图标类型</p><p>　　　　　　eps:ai图标类型</p><p>　　　　ids: 下载图标的单个ID的列表分隔符(|-1,)</p><p>　　　　color: 下载图标的颜色(好像针对单色图标)</p><p>　　　　size: 下载图标的大小</p><p>　　　　ctoken: 下面再说</p><p>分析完看完后非常兴奋,马上写了下载的的代码</p><pre><code>String url = &quot;https://www.iconfont.cn/api/icon/downloadIcon&quot;;Map&lt;String, String&gt; data = new HashMap&lt;&gt;();data.put(&quot;type&quot;, type);data.put(&quot;ids&quot;, idStr);data.put(&quot;color&quot;, color);data.put(&quot;size&quot;, size);data.put(&quot;ctoken&quot;, ctoken);Connection.Response response = Jsoup.connect(url).data(data).ignoreContentType(true).execute();FileOutputStream out = (new FileOutputStream(new File(&quot;d://temp.zip&quot;)));out.write(response.bodyAsBytes());out.close();</code></pre><p>但是没有想想的那么顺利下载下来</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716144134870.png" alt=""></p><blockquote><p>提示我没有登录权限,无法下载.</p></blockquote><h4 id="难点2-登录状态的验证"><a href="#难点2-登录状态的验证" class="headerlink" title="难点2 登录状态的验证"></a>难点2 登录状态的验证</h4><p>继续分析,我写的代码请求和网页请求的区别在哪呢</p><blockquote><p>经常测试发现,这个图标下载的网站就算你关闭了浏览器,重启电脑,下次打开的时候你还会是已经授权登录的状态,并不需要重新的进行登录授权的操作.所以得出结论登录的信息存在本地.</p></blockquote><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716145027539.png" alt="信息来源于百度"></p><p>此处用于登录的信息是保存在cookie里</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716145424303.png" alt="信息来源于百度"></p><p>每次请求的时候会把本地的cookie放到Request请求中.用于身份识别(这个是我自己的猜想的具体实现原理尚不明确)</p><p>结合上一步 代码修改为</p><pre><code>String url = &quot;https://www.iconfont.cn/api/icon/downloadIcon&quot;;Map&lt;String, String&gt; data = new HashMap&lt;&gt;();data.put(&quot;type&quot;, type);data.put(&quot;ids&quot;, idStr);data.put(&quot;color&quot;, color);data.put(&quot;size&quot;, size);data.put(&quot;ctoken&quot;, ctoken);Map&lt;String, String&gt; cookies = new HashMap&lt;&gt;();...Connection.Response response = Jsoup.connect(url).data(data).cookies(cookies).ignoreContentType(true).execute();FileOutputStream out = (new FileOutputStream(new File(&quot;d://temp.zip&quot;)));out.write(response.bodyAsBytes());out.close();</code></pre><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716150340113.png" alt=""></p><blockquote><p>成功调用接口下载到本地成功</p></blockquote><h3 id="3-7-一些简单的文件复制拷贝逻辑实现"><a href="#3-7-一些简单的文件复制拷贝逻辑实现" class="headerlink" title="3-7 一些简单的文件复制拷贝逻辑实现"></a>3-7 一些简单的文件复制拷贝逻辑实现</h3><hr><p>直接上部分源码了(PS:有些代码大部分来源于网上百度搬运所得)</p><h4 id="1-压缩包解压"><a href="#1-压缩包解压" class="headerlink" title="1.压缩包解压"></a>1.压缩包解压</h4><pre><code>/** * zip解压 * * @param srcFile     zip源文件 * @param destDirPath 解压后的目标文件夹 * @throws RuntimeException 解压失败会抛出运行时异常 */public static void unZip(File srcFile, String destDirPath) throws RuntimeException {    long start = System.currentTimeMillis();    // 判断源文件是否存在    if (!srcFile.exists()) {        throw new RuntimeException(srcFile.getPath() + &quot;所指文件不存在&quot;);    }    // 开始解压    ZipFile zipFile = null;    try {        zipFile = new ZipFile(srcFile);        Enumeration&lt;?&gt; entries = zipFile.entries();        while (entries.hasMoreElements()) {            ZipEntry entry = (ZipEntry) entries.nextElement();            System.out.println(&quot;解压&quot; + entry.getName());            // 如果是文件夹，就创建个文件夹            if (entry.isDirectory()) {                String dirPath = destDirPath + &quot;/&quot; + entry.getName();                File dir = new File(dirPath);                dir.mkdirs();            } else {                // 如果是文件，就先创建一个文件，然后用io流把内容copy过去                File targetFile = new File(destDirPath + &quot;/&quot; + entry.getName());                // 保证这个文件的父文件夹必须要存在                if (!targetFile.getParentFile().exists()) {                    targetFile.getParentFile().mkdirs();                }                targetFile.createNewFile();                // 将压缩文件内容写入到这个文件中                InputStream is = zipFile.getInputStream(entry);                FileOutputStream fos = new FileOutputStream(targetFile);                int len;                byte[] buf = new byte[BUFFER_SIZE];                while ((len = is.read(buf)) != -1) {                    fos.write(buf, 0, len);                }                // 关流顺序，先打开的后关闭                fos.close();                is.close();            }        }        long end = System.currentTimeMillis();        System.out.println(&quot;解压完成，耗时：&quot; + (end - start) + &quot; ms&quot;);    } catch (Exception e) {        throw new RuntimeException(&quot;unzip error from ZipUtils&quot;, e);    } finally {        if (zipFile != null) {            try {                zipFile.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }}</code></pre><h4 id="2-数组按指个数分割-自己写的-烂勿喷"><a href="#2-数组按指个数分割-自己写的-烂勿喷" class="headerlink" title="2.数组按指个数分割(自己写的,烂勿喷)"></a>2.数组按指个数分割(自己写的,烂勿喷)</h4><pre><code>/** * 数组按个数分割 * * @param list 源数组 * @param size 数量 * @return */public static List&lt;List&lt;Integer&gt;&gt; splitList(List&lt;Integer&gt; list, int size) {    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();    int index = 0;    for (int i = 0; i &lt; list.size(); i = i + size) {        List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();        for (int j = 0; j &lt; size; j++) {            temp.add(list.get(index++));            if (index &gt;= list.size())                break;        }        result.add(temp);    }    return result;}</code></pre><h4 id="3-文件夹复制-文件的复制"><a href="#3-文件夹复制-文件的复制" class="headerlink" title="3.文件夹复制,文件的复制"></a>3.文件夹复制,文件的复制</h4><pre><code>/** * 拷贝文件夹 * * @param oldPath * @param newPath * @throws IOException */public static void copyDir(String oldPath, String newPath) throws IOException {    File file = new File(oldPath);    //文件名称列表    String[] fileNameList = file.list();    if (!(new File(newPath)).exists()) {        (new File(newPath)).mkdir();    }    for (String fileName : fileNameList) {        if ((new File(oldPath + File.separator + fileName)).isDirectory()) {            copyDir(oldPath + File.separator + fileName, newPath + File.separator + fileName);        }        if (new File(oldPath + File.separator + fileName).isFile()) {            copyFile(oldPath + File.separator + fileName, newPath + File.separator + fileName);        }    }}/** * 文件复制 * * @param srcPath     源文件路径 * @param newFileName 复制后存放路径 * @throws Exception */public static void copyFile(String srcPath, String newFileName) {    File srcFile = new File(srcPath);    File targetFile = new File(newFileName);    FileInputStream in = null;    FileOutputStream out = null;    try {        in = new FileInputStream(srcFile);        out = new FileOutputStream(targetFile);        //从in中批量读取字节，放入到buf这个字节数组中，        // 从第0个位置开始放，最多放buf.length个 返回的是读到的字节的个数        byte[] buf = new byte[8 * 1024];        int len = 0;        while ((len = in.read(buf)) != -1) {            out.write(buf, 0, len);            out.flush();        }    } catch (Exception e) {        e.printStackTrace();    } finally {        try {            if (in != null) {                in.close();            }        } catch (Exception e) {            System.out.println(&quot;关闭输入流错误！&quot;);        }        try {            if (out != null) {                out.close();            }        } catch (Exception e) {            System.out.println(&quot;关闭输出流错误！&quot;);        }    }}</code></pre><h4 id="4-删除文件或者文件夹以下所有文件"><a href="#4-删除文件或者文件夹以下所有文件" class="headerlink" title="4.删除文件或者文件夹以下所有文件"></a>4.删除文件或者文件夹以下所有文件</h4><pre><code>/** * 删除文件或者文件夹以下所有文件 * * @param file */public static void deleteAllFilesOfDir(File file) {    if (!file.exists())        return;    if (file.isFile()) {        boolean delete = file.delete();        if (!delete) {            System.gc();    //回收资源            file.delete();        }        return;    }    File[] files = file.listFiles();    for (int i = 0; i &lt; files.length; i++) {        deleteAllFilesOfDir(files[i]);    }    file.delete();}/** * 删除单个文件 * * @param file * @return */public static boolean delFile(File file) {    if (!file.exists()) {        return false;    }    if (file.isFile())        return file.delete();    else        return false;}</code></pre><h3 id="软件使用说明书"><a href="#软件使用说明书" class="headerlink" title="软件使用说明书"></a>软件使用说明书</h3><hr><h4 id="安装PC上的Java环境"><a href="#安装PC上的Java环境" class="headerlink" title="安装PC上的Java环境"></a>安装PC上的Java环境</h4><p><a href="https://jingyan.baidu.com/article/6dad5075d1dc40a123e36ea3.html" target="_blank" rel="noopener">教程百度</a></p><h4 id="下载应用的app-下载地址"><a href="#下载应用的app-下载地址" class="headerlink" title="下载应用的app 下载地址"></a>下载应用的app <a href="https://github.com/yttrium2016/iconfontTools/releases" target="_blank" rel="noopener">下载地址</a></h4><p>Github源码地址:<a href="https://github.com/yttrium2016/iconfontTools" target="_blank" rel="noopener">https://github.com/yttrium2016/iconfontTools</a></p><p>求Github小伙伴们使用的人小星星 收藏</p><h4 id="使用图解"><a href="#使用图解" class="headerlink" title="使用图解"></a>使用图解</h4><p>下载解压工具</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716153634648.png" alt=""></p><p>双击打开</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716153634651.png" alt=""></p><p>进入设置</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716153753802.png" alt=""></p><p>浏览器(建议使用Chrome浏览器)打开 网址<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a> 登录确认登录状态下.</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716154248650.png" alt=""></p><p>F12 打开控制台 点击任意一个请求</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716154248654.png" alt=""></p><p>用鼠标复制cookie里面的所有字符</p><p>在软件的设置页面cookies列黏贴进去 点击保存</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716154523563.png" alt=""></p><p>在工具页面输入<a href="https://www.iconfont.cn/里面任意一个图标库的URL上的cid编号" target="_blank" rel="noopener">https://www.iconfont.cn/里面任意一个图标库的URL上的cid编号</a></p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716154813843.png" alt=""></p><p>点击下载</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716154813846.png" alt=""></p><p>稍等后下载完后就会在软件根目录有个文件名叫icon的文件夹里面就是下载的图标文件</p><p><img src="https://gitee.com/yttrium2016/img/raw/master/20190716154813849.png" alt=""></p><blockquote><p>软件使用教程结束</p></blockquote><blockquote><p>PS:每次下载时候会清楚上次下载的文件 所以下载完后请自己手动移出文件夹</p></blockquote><h3 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h3><blockquote><p>本人很懒,所以很多事总是在拖延症中,放弃了,希望可以督促自己以后勤奋点,因为懒,所以去开发工具让自己干活变得容易,挺好的,有时候还是要折腾.学习…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iconfont </tag>
            
            <tag> 图标下载工具 </tag>
            
            <tag> 工具 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一件脚本 搭建SS服务器</title>
      <link href="/19872/"/>
      <url>/19872/</url>
      
        <content type="html"><![CDATA[<h2 id="一键脚本-搭建SS服务器"><a href="#一键脚本-搭建SS服务器" class="headerlink" title="一键脚本 搭建SS服务器"></a>一键脚本 搭建SS服务器</h2><blockquote><p>自己留作记录 方便查找 再次搭建</p></blockquote><h2 id="1-需要工具"><a href="#1-需要工具" class="headerlink" title="1.需要工具"></a>1.需要工具</h2><h3 id="1-1-一台国外的服务器"><a href="#1-1-一台国外的服务器" class="headerlink" title="1.1 一台国外的服务器"></a>1.1 一台国外的服务器</h3><ol><li><p>搬瓦工: <a href="https://bwh8.net/" target="_blank" rel="noopener">https://bwh8.net/</a></p><p> 我第一次买的VPS,老牌,19.9美元一年 或者29.9美元一年,可以直接支付宝支付,当时买的时候还没有CN2路线,速度还可以(据说CN2还是很稳的),不过还是有概率被墙,要去官网换机房 换IP 如果不可换机房就要7还是8美元买一个IP,反正本人是被墙后放弃了,建议初学者购买,控制面板有一件搭建SS的功能,现在不知道有没有了.</p></li><li><p>Vultr: <a href="https://www.vultr.com/" target="_blank" rel="noopener">https://www.vultr.com/</a></p><p> 我第二次买的就是这个,18年买的时候充10美元送25美元,最便宜的服务器3.5美元一个月,相当于用了10个月,10美元还是很便宜的,现在好像有活动充10美元送50美元,也可以用一阵子了,管理页面做的非常舒服,会一点点英文就能看懂,机房位置也非常多(日本,新加坡,美国等..),但是没有CN2的路线,我记得我买的时候是没有的,买来建站,和当梯子都很舒服.支付方式支持微信,支付宝,paypal还是很不错的</p><p> 无耻的放出推荐链接:<a href="https://www.vultr.com/?ref=7871739-4F" target="_blank" rel="noopener">链接(新春活动充10送50)</a>,<a href="https://www.vultr.com/?ref=7384983" target="_blank" rel="noopener">链接</a></p></li><li><p>virmach: <a href="https://virmach.com/" target="_blank" rel="noopener">https://virmach.com/</a></p><p> 第三个是我最近在朋友推荐下发现的,优点是便宜最便宜的是1.25美元一个月,年付只要10个月的钱,缺点是没有CN2,机房大多数是美国的,还有可能会被墙,被墙了需要花5美元去换个IP,有过折腾经验又想少花钱的可以买这个.使用下来还是可以的.好像也支持支付宝.很好.</p></li></ol><h3 id="1-2-远程连接工具"><a href="#1-2-远程连接工具" class="headerlink" title="1.2 远程连接工具"></a>1.2 远程连接工具</h3><p>我使用的是Xshell 6 链接请自行百度吧,好像去年爆出了留有后门的事件,不过我已经用习惯了,还是就用这个了,一般都是LINUX的系统,用SSH去连接服务器,梯子还是不建议的用WINDOWS的系统的.</p><h3 id="1-3-SS电脑客户端"><a href="#1-3-SS电脑客户端" class="headerlink" title="1.3 SS电脑客户端"></a>1.3 SS电脑客户端</h3><p>电脑上需要<img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221162740.png" alt="">这个软件,在GITHUB上可以找到下载链接.</p><h2 id="2-开始演示安装"><a href="#2-开始演示安装" class="headerlink" title="2.开始演示安装"></a>2.开始演示安装</h2><h3 id="2-1去对应服务商购买对应的VPS服务器-这里忽略-网上好多教程-不同的服务商有不同的购买方式-一般是"><a href="#2-1去对应服务商购买对应的VPS服务器-这里忽略-网上好多教程-不同的服务商有不同的购买方式-一般是" class="headerlink" title="2.1去对应服务商购买对应的VPS服务器 这里忽略 网上好多教程,不同的服务商有不同的购买方式,一般是"></a>2.1去对应服务商购买对应的VPS服务器 这里忽略 网上好多教程,不同的服务商有不同的购买方式,一般是</h3><p>注册-&gt;加入购物车-&gt;购买-&gt;服务商审核(部分需要人工审核1-2日)-&gt;得到服务器<br><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221163308.png" alt=""></p><h3 id="2-2-使用工具连接上去"><a href="#2-2-使用工具连接上去" class="headerlink" title="2.2 使用工具连接上去"></a>2.2 使用工具连接上去</h3><p>我是使用Xshell 文件-&gt;新建<br><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221165422.png" alt=""><br><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221165531.png" alt=""></p><p><strong>填上自己的IP,这里我的机器是104.156.227.109 点击确定</strong></p><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221165829.png" alt=""></p><p><strong>接受并保存</strong></p><p>输入你在服务商得到的用户名和密码登录到对应的服务器<br><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221170101.png" alt=""><br><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221170137.png" alt=""></p><p><strong>登录成功</strong></p><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221170249.png" alt=""></p><h2 id="3-先安装BBR-锐速-BBR-plus-之类的加速内核-非必要"><a href="#3-先安装BBR-锐速-BBR-plus-之类的加速内核-非必要" class="headerlink" title="3.先安装BBR,锐速,BBR plus 之类的加速内核(非必要)"></a>3.先安装BBR,锐速,BBR plus 之类的加速内核(非必要)</h2><p>我这是在网上找到大神的编写的脚本:<a href="https://www.moerats.com/archives/387/" target="_blank" rel="noopener">链接地址</a></p><p><strong>支持系统：</strong>CentOS 6+、Debian 8+、Ubuntu 14+。</p><p><strong>注意：</strong>该脚本在Vultr各个系统均测试通过，如果期间有出现任何问题，可向原作者反映帮助改善。<br>运行以下命令：</p><pre><code>wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</code></pre><p>Ubuntu 18.04魔改BBR暂时有点问题，可使用以下命令安装：</p><pre><code>wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;apt install make gcc -ysed -i &apos;s#/usr/bin/gcc-4.9#/usr/bin/gcc#g&apos; &apos;/root/tcp.sh&apos;chmod +x tcp.sh &amp;&amp; ./tcp.sh</code></pre><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221170732.png" alt=""></p><blockquote><p>请傻瓜式操作 等他安装完成… 本人是(2,7,11)</p></blockquote><h2 id="4-安装ss或者ssr服务器"><a href="#4-安装ss或者ssr服务器" class="headerlink" title="4.安装ss或者ssr服务器"></a>4.安装ss或者ssr服务器</h2><blockquote><p>本人又在网上找到了一个脚本 <a href="https://github.com/cn2t/doubi-SSR" target="_blank" rel="noopener">链接地址</a></p></blockquote><h4 id="ssr-sh"><a href="#ssr-sh" class="headerlink" title="ssr.sh"></a>ssr.sh</h4><ul><li>脚本说明: ShadowsocksR 一键安装/管理脚本，支持单端口/多端口切换和管理</li><li>系统支持: CentOS6+ / Debian6+ / Ubuntu14+</li><li>使用方法: <a href="https://doub.io/ss-jc42/" target="_blank" rel="noopener">https://doub.io/ss-jc42/</a></li><li>项目地址: <a href="https://github.com/ToyoDAdoubi/shadowsocksr" target="_blank" rel="noopener">https://github.com/ToyoDAdoubi/shadowsocksr</a></li></ul><h4 id="脚本特点"><a href="#脚本特点" class="headerlink" title="脚本特点:"></a>脚本特点:</h4><p>目前网上的各个ShadowsocksR脚本基本都是只有 安装/启动/重启 等基础功能，对于小白来说还是不够简单方便。既然是一键脚本，那么就要尽可能地简单，小白更容易接受使用！</p><ul><li>支持 限制 用户速度</li><li>支持 限制 端口设备数</li><li>支持 显示 当前连接IP</li><li>支持 显示 SS/SSR连接+二维码</li><li>支持 切换管理 单/多端口</li><li>支持 一键安装 锐速</li><li>支持 一键安装 BBR</li><li>支持 一键封禁 垃圾邮件(SMAP)/BT/PT</li></ul><p><strong>运行以下命令:</strong></p><pre><code>wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</code></pre><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221171520.png" alt=""></p><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221171720.png" alt=""></p><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221171752.png" alt=""></p><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221171834.png" alt=""></p><p><strong>安装完后</strong></p><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221172107.png" alt=""></p><blockquote><p>最后一些提醒,选虚拟机系统的时候我一般选CentOS的系统,一般操作比较简单.这个脚本是SSR的脚本,但是可以兼容SS,客户端可以选择SSR的客户端,一般使用SS客户端也是没有任何问题的.</p></blockquote><h2 id="5-电脑端-其他端填写自己的服务器信息就可以做到访问Google了"><a href="#5-电脑端-其他端填写自己的服务器信息就可以做到访问Google了" class="headerlink" title="5.电脑端 其他端填写自己的服务器信息就可以做到访问Google了."></a>5.电脑端 其他端填写自己的服务器信息就可以做到访问Google了.</h2><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221172435.png" alt=""></p><p><strong>填写好对应的<code>服务器地址</code>,<code>端口</code>,<code>加密方式</code> -&gt; 启动代理</strong></p><p><img src="https://raw.githubusercontent.com/yttrium2016/img/master/20190221172651.png" alt=""></p><blockquote><p>就可以直接访问Google了.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梯子 </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次前段学习</title>
      <link href="/16044/"/>
      <url>/16044/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>我开始的时候对自己写页面的水平真的很担忧，尤其是对CSS，html的方面，真的写的很差的水平。一直想好好学习学习下，尤其是对页面大的布局之类的，还有css style 之类的区别之类的，还有各种样式冲突，最开始直接使用各种简单的前段框架的时候，直接修改源码的CSS，然后全部的布局乱了的体验真的是难以忘记。</p><p>在公司一次新人培训的时候我也跟着去听了听课。这里记录下 我唯一一次开始算了解了一些些前段知识。<br>主要是一些新手常搞不清的小问题 但是我感觉对我的帮助很大</p><blockquote><p>先放上全部的例子网站 <a href="https://www.yangzhenyu.com.cn/demo/cssdemo/" title="第一次的实例">第一次的实例</a> </p></blockquote><h2 id="1-样式优先级"><a href="#1-样式优先级" class="headerlink" title="1.样式优先级"></a>1.样式优先级</h2><p>样式分为内联css，嵌入css，和外联css，内联css是指直接写在html里的style里的样式，嵌入css是指写在同一页面的&lt;style&gt;标签里的样式，外联css是用&lt;link&gt;引入的外部css文件,这三者的优先级是内联》嵌入》外联， 在同级的嵌入或者外联css中，不同的选择器权重不同，优先级不同，html选择器权重为<strong>1</strong>，类选择器权重为<strong>10</strong>，id选择器权重为<strong>100</strong>，权重越大优先级越高，当权重相同时会采用<strong>“层叠原则”</strong> 后定义的会被应用，<strong>!important的话是手动把权重加到最高</strong>， 算是特权阶级，容易对别的元素造成影响，尽量少用。</p><p>例子</p><pre><code>.a .b &gt; .b#a &gt; .a!important &gt; #a</code></pre><h2 id="2-显示隐藏的问题"><a href="#2-显示隐藏的问题" class="headerlink" title="2.显示隐藏的问题"></a>2.显示隐藏的问题</h2><ol><li>display:none;</li><li>opacity:0; </li><li>visibility:hidden;</li></ol><p>上面三种作用是隐藏元素</p><p>三者之间的区别是用display确保元素不可见且被隐藏的元素不占据任何空间,不响应用户交互，就好像元素完全不存在<br>opacity:0;只能从视觉上隐藏元素，而元素本身依然占据它自己的位置并对网页的布局起作用，它也将响应用户交互<br>visibility:hidden;元素不可见但是被隐藏的元素依然会对我们的网页布局起作用。与opacity不同的是它不会响应任何用户交互。</p><h2 id="display的属性"><a href="#display的属性" class="headerlink" title="display的属性"></a>display的属性</h2><h3 id="block-和-inline"><a href="#block-和-inline" class="headerlink" title="block 和 inline"></a>block 和 inline</h3><p>display:block一般用于将行内元素转换为块级元素,而display:inline刚好相反<br>display:block的特征是独占一行，宽高可控制，margin、padding横向纵向都有效果，常见块级元素有div、p、h1-h6、ul/ol系列、table系列，<br>display:inline的特征是不能独占一行，宽高由内容撑开，padding横向纵向都有效，margin横向有效纵向无效，常见行内元素有a、span、i、img、input、select、textarea、button，<br>不过块级元素中的table系列和ul系列有点特殊，虽然也属于块级具有块级元素的特征，但是有更细的属于自己的display<br>table为display:table,tr为display:table-row,td为dispay:table-cell,li为display:list-item</p><blockquote><p>有个小问题是如果行内元素在代码中换行了或者两个标签之间有空格，两个行内元素之间会有一个小小的间隙</p></blockquote><h3 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display:inline-block"></a>display:inline-block</h3><p>行内块元素同时具有行内元素和块级元素的部分特征，不独占一行，宽高可以控制</p><h2 id="position的属性"><a href="#position的属性" class="headerlink" title="position的属性"></a>position的属性</h2><h3 id="position-fixed"><a href="#position-fixed" class="headerlink" title="position:fixed"></a>position:fixed</h3><p>固定定位，相对于浏览器窗口来对元素进行定位。常用于页面顶部导航栏，侧边导航栏功能按钮或者底部返回顶部按钮等。</p><h3 id="position-relative"><a href="#position-relative" class="headerlink" title="position:relative"></a>position:relative</h3><p>相对定位，相对于一个元素原本应该在的位置进行定位。进行定位后文档流中元素原本在的位置还是会保留，所以不会对周围的其他元素造成影响</p><h3 id="position-absolute"><a href="#position-absolute" class="headerlink" title="position:absolute"></a>position:absolute</h3><p>绝对定位，相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于html元素定位，进行定位后元素跳出原文档流，原本的位置不保留，会被后面的元素补上</p><blockquote><p>z-index<br>可以设置元素的堆叠顺序，只能在定位元素上奏效,数值越大离用户越近</p></blockquote><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>在css布局时，一个元素分为内容（content）、padding（内边框）、border（边框）、margin（外边距）四部分。<br>在标准的盒子模型中，width指content部分的宽度，在IE盒子模型中，width表示content+padding+border这三个部分的宽度。<br>所以在布局的时候，如果父div是1200px,3个左浮动的子元素，宽400px，在标准的盒子模型中只要给其中一个子元素加了border或者padding最后一个子元素会掉下来,在IE盒子模型中不会<br>如果想要切换盒模型也很简单,CSS3有个box-sizing，标准盒子模型是box-sizing: content-box，IE盒子模型是box-sizing: border-box<br><img src="http://www.yangzhenyu.com.cn/demo/cssdemo/box.jpg" alt=""></p><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>浮动的时候，浮动的元素会脱离原文档流，它原来的位置会被其他元素顶替，如果一个div没有设定高度，高度靠内部的元素撑开，当它里面的元素浮动的时候，这个div的高度就可能产生塌陷,然后整个布局就有可能会乱掉 这时候就需要清除浮动,清楚浮动的方法比较常用的有，加一个空容器样式为clear:both，或者用父容器的after伪类来清除，还有一个是用overflow:hidden,让父容器把浮动的子元素重新包裹进去.<br><img src="http://www.yangzhenyu.com.cn/demo/cssdemo/float.png" alt=""></p><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p>水平居中最常用的两个margin：0 auto和text-align:center;<br>如果子元素宽高度一定的时候,可以考虑用position:absolute，top、left设为50%，然后计算需要留白的margin在定位中减去，来使子元素水平居中或者垂直居中,缺点是没有足够空间时，content 会消失<br>垂直居中，单行文字的时候可以用给height和line-height设定固定值，然后使两者数值相等，<br>块级元素的话，可以把元素的显示设为表格，然后用vertical-align居中，缺点是IE部分版本不生效，嵌套好几层标签<br>在 content 元素外插入一个 div,设置此 div的height:50%; margin-bottom:-contentheight,content 清除浮动，并显示在中间。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>基本上所有知识点来源于demo 就是学习的课例</p><p>但是让我受益匪浅，所以我决定记录下来 </p><p>方便自己查看也方便别人新手学习。</p><blockquote><p>感谢教我的同事</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员节快乐</title>
      <link href="/33358/"/>
      <url>/33358/</url>
      
        <content type="html"><![CDATA[<h1 id="今天是2018年10月24日"><a href="#今天是2018年10月24日" class="headerlink" title="今天是2018年10月24日"></a>今天是2018年10月24日</h1><h2 id="传说中的程序员节日"><a href="#传说中的程序员节日" class="headerlink" title="传说中的程序员节日"></a>传说中的程序员节日</h2><h4 id="昨天我刚刚搭建起这个博客系统"><a href="#昨天我刚刚搭建起这个博客系统" class="headerlink" title="昨天我刚刚搭建起这个博客系统"></a>昨天我刚刚搭建起这个博客系统</h4><h4 id="第一次用它来写博客-试试看"><a href="#第一次用它来写博客-试试看" class="headerlink" title="第一次用它来写博客 试试看"></a>第一次用它来写博客 试试看</h4><h4 id="在这祝天下所有的真丶程序员-节日快乐-程序永无BUG-哈哈"><a href="#在这祝天下所有的真丶程序员-节日快乐-程序永无BUG-哈哈" class="headerlink" title="在这祝天下所有的真丶程序员 节日快乐 程序永无BUG 哈哈"></a>在这祝天下所有的真丶程序员 节日快乐 程序永无BUG 哈哈</h4><p><img src="https://raw.githubusercontent.com/yttrium2016/BlogImg/master/2018-10-24-01.jpg" alt=""></p><h4 id="前不久我刚刚过了我24周岁的生日，有时候感觉自己都老了，确实时间总是过得很快，在不经意间就不知道去哪了，在这我希望以后自己能多写写关于技术方面的博客，把自己的知识留住。"><a href="#前不久我刚刚过了我24周岁的生日，有时候感觉自己都老了，确实时间总是过得很快，在不经意间就不知道去哪了，在这我希望以后自己能多写写关于技术方面的博客，把自己的知识留住。" class="headerlink" title="前不久我刚刚过了我24周岁的生日，有时候感觉自己都老了，确实时间总是过得很快，在不经意间就不知道去哪了，在这我希望以后自己能多写写关于技术方面的博客，把自己的知识留住。"></a>前不久我刚刚过了我24周岁的生日，有时候感觉自己都老了，确实时间总是过得很快，在不经意间就不知道去哪了，在这我希望以后自己能多写写关于技术方面的博客，把自己的知识留住。</h4><h4 id="忘记在哪看到这么一句话，真的很激励人"><a href="#忘记在哪看到这么一句话，真的很激励人" class="headerlink" title="忘记在哪看到这么一句话，真的很激励人."></a>忘记在哪看到这么一句话，真的很激励人.</h4><p><img src="https://raw.githubusercontent.com/yttrium2016/BlogImg/master/2018-10-24-02.png" alt=""></p><blockquote><p>你才25岁 你可以成为任何你想成为的人 现在起加油吧 少年！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/59448/"/>
      <url>/59448/</url>
      
        <content type="html"><![CDATA[<h3 id="第一篇博客-您好，世界！"><a href="#第一篇博客-您好，世界！" class="headerlink" title="第一篇博客(您好，世界！)"></a>第一篇博客(<strong>您好，世界！</strong>)</h3><p>　　我叫<strong> 杨振宇 </strong>，这是我的博客，我是一个刚刚毕业的大学生，是一个程序员并想要成为一个了不起的全栈工程师，想以此为目标不断努力，想在这个博客上分享一些学习上的心得体会来和大家交流。</p><h6 id="我想在这里记录自己的学习体会，心得体会。"><a href="#我想在这里记录自己的学习体会，心得体会。" class="headerlink" title="我想在这里记录自己的学习体会，心得体会。"></a>我想在这里记录自己的学习体会，心得体会。</h6><h6 id="希望能给同样是程序员的大家一些帮助。"><a href="#希望能给同样是程序员的大家一些帮助。" class="headerlink" title="希望能给同样是程序员的大家一些帮助。"></a>希望能给同样是程序员的大家一些帮助。</h6><h6 id="欢迎大家与我联系交流。"><a href="#欢迎大家与我联系交流。" class="headerlink" title="欢迎大家与我联系交流。"></a>欢迎大家与我联系交流。</h6><p><img src="https://gitee.com/yttrium2016/img/raw/master/27cbbf7886204597b30160e37162286f_login_wallpaper.jpg" alt=""></p><p>希望自己能坚持写下去…</p><p>PS.这是我第二次写第一篇博客了，第一次服务器炸了没存，就没了。</p>]]></content>
      
      
      <categories>
          
          <category> 心情 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
